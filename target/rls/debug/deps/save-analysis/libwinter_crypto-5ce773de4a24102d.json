{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2","program":"/Users/verloop/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","winter_crypto","--edition=2021","/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"std\"","-C","metadata=5ce773de4a24102d","-C","extra-filename=-5ce773de4a24102d","--out-dir","/Users/verloop/web3/winterfell-nft/target/rls/debug/deps","-L","dependency=/Users/verloop/web3/winterfell-nft/target/rls/debug/deps","--extern","blake3=/Users/verloop/web3/winterfell-nft/target/rls/debug/deps/libblake3-2fe3e7cdece10968.rmeta","--extern","sha3=/Users/verloop/web3/winterfell-nft/target/rls/debug/deps/libsha3-5368a668580fab85.rmeta","--extern","math=/Users/verloop/web3/winterfell-nft/target/rls/debug/deps/libwinter_math-caa6979d5adfb8a1.rmeta","--extern","utils=/Users/verloop/web3/winterfell-nft/target/rls/debug/deps/libwinter_utils-7e9ca64107c5b293.rmeta","--cap-lints","allow","-L","native=/Users/verloop/web3/winterfell-nft/target/rls/debug/build/blake3-92387bdc436ce863/out","-L","native=/Users/verloop/web3/winterfell-nft/target/rls/debug/build/blake3-92387bdc436ce863/out","--error-format=json","--sysroot","/Users/verloop/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/verloop/web3/winterfell-nft/target/rls/debug/deps/libwinter_crypto-5ce773de4a24102d.rmeta"},"prelude":{"crate_id":{"name":"winter_crypto","disambiguator":[8941282792384159007,0]},"crate_root":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src","external_crates":[{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[5737620048972976797,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","num":2,"id":{"name":"core","disambiguator":[2242199718071837415,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2188212999151601010,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[1020664553731942337,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5221923779696816614,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10454403582981253701,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7392107620293427149,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9383090470819858406,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[13561338507145107503,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2153887466384468734,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[11638676648589799525,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[17336646944492823354,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[16179365956064936006,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[2085897901681677768,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[4724748409658749452,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[13513626471981952824,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[14681960900203760207,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","num":18,"id":{"name":"winter_math","disambiguator":[7939711538366881299,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","num":19,"id":{"name":"winter_utils","disambiguator":[6543379861855309929,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/sha/mod.rs","num":20,"id":{"name":"sha3","disambiguator":[7268035942060313992,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/sha/mod.rs","num":21,"id":{"name":"digest","disambiguator":[7578323278360302728,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/sha/mod.rs","num":22,"id":{"name":"generic_array","disambiguator":[8836281415988858016,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/sha/mod.rs","num":23,"id":{"name":"typenum","disambiguator":[18344174592359653307,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/sha/mod.rs","num":24,"id":{"name":"crypto_common","disambiguator":[7493296314554171395,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/sha/mod.rs","num":25,"id":{"name":"block_buffer","disambiguator":[11768130926017568546,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/sha/mod.rs","num":26,"id":{"name":"subtle","disambiguator":[4511373288773010580,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/sha/mod.rs","num":27,"id":{"name":"keccak","disambiguator":[9107484285738289293,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/blake/mod.rs","num":28,"id":{"name":"blake3","disambiguator":[16313067414413823840,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/blake/mod.rs","num":29,"id":{"name":"arrayref","disambiguator":[15621369136658719922,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/blake/mod.rs","num":30,"id":{"name":"arrayvec","disambiguator":[8238203197434002581,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/blake/mod.rs","num":31,"id":{"name":"cfg_if","disambiguator":[10518978035588998298,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/blake/mod.rs","num":32,"id":{"name":"constant_time_eq","disambiguator":[4478672943650019765,0]}}],"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":182,"byte_end":1681,"line_start":6,"line_end":47,"column_start":1,"column_end":52}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":748},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":2039,"byte_end":2049,"line_start":11,"line_end":11,"column_start":17,"column_end":27},"alias_span":null,"name":"Blake3_192","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":730},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":2051,"byte_end":2061,"line_start":11,"line_end":11,"column_start":29,"column_end":39},"alias_span":null,"name":"Blake3_256","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":134},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":2087,"byte_end":2095,"line_start":14,"line_end":14,"column_start":14,"column_end":22},"alias_span":null,"name":"Sha3_256","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":265},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":2127,"byte_end":2135,"line_start":17,"line_end":17,"column_start":18,"column_end":26},"alias_span":null,"name":"Rp62_248","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":266},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":2127,"byte_end":2135,"line_start":17,"line_end":17,"column_start":18,"column_end":26},"alias_span":null,"name":"Rp62_248","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":426},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":2137,"byte_end":2145,"line_start":17,"line_end":17,"column_start":28,"column_end":36},"alias_span":null,"name":"Rp64_256","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":427},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":2137,"byte_end":2145,"line_start":17,"line_end":17,"column_start":28,"column_end":36},"alias_span":null,"name":"Rp64_256","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":513},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":1131,"byte_end":1137,"line_start":26,"line_end":26,"column_start":16,"column_end":22},"alias_span":null,"name":"Digest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":509},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":1139,"byte_end":1152,"line_start":26,"line_end":26,"column_start":24,"column_end":37},"alias_span":null,"name":"ElementHasher","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":503},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":1154,"byte_end":1160,"line_start":26,"line_end":26,"column_start":39,"column_end":45},"alias_span":null,"name":"Hasher","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":748},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":1279,"byte_end":1289,"line_start":30,"line_end":30,"column_start":26,"column_end":36},"alias_span":null,"name":"Blake3_192","value":"","parent":{"krate":0,"index":550}},{"kind":"Use","ref_id":{"krate":0,"index":730},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":1316,"byte_end":1326,"line_start":31,"line_end":31,"column_start":26,"column_end":36},"alias_span":null,"name":"Blake3_256","value":"","parent":{"krate":0,"index":550}},{"kind":"Use","ref_id":{"krate":0,"index":265},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":1353,"byte_end":1361,"line_start":32,"line_end":32,"column_start":26,"column_end":34},"alias_span":null,"name":"Rp62_248","value":"","parent":{"krate":0,"index":550}},{"kind":"Use","ref_id":{"krate":0,"index":266},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":1353,"byte_end":1361,"line_start":32,"line_end":32,"column_start":26,"column_end":34},"alias_span":null,"name":"Rp62_248","value":"","parent":{"krate":0,"index":550}},{"kind":"Use","ref_id":{"krate":0,"index":426},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":1388,"byte_end":1396,"line_start":33,"line_end":33,"column_start":26,"column_end":34},"alias_span":null,"name":"Rp64_256","value":"","parent":{"krate":0,"index":550}},{"kind":"Use","ref_id":{"krate":0,"index":427},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":1388,"byte_end":1396,"line_start":33,"line_end":33,"column_start":26,"column_end":34},"alias_span":null,"name":"Rp64_256","value":"","parent":{"krate":0,"index":550}},{"kind":"Use","ref_id":{"krate":0,"index":134},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":1423,"byte_end":1431,"line_start":34,"line_end":34,"column_start":26,"column_end":34},"alias_span":null,"name":"Sha3_256","value":"","parent":{"krate":0,"index":550}},{"kind":"Use","ref_id":{"krate":0,"index":645},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":1465,"byte_end":1483,"line_start":38,"line_end":38,"column_start":18,"column_end":36},"alias_span":null,"name":"build_merkle_nodes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":838},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":1485,"byte_end":1501,"line_start":38,"line_end":38,"column_start":38,"column_end":54},"alias_span":null,"name":"BatchMerkleProof","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":860},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":1503,"byte_end":1513,"line_start":38,"line_end":38,"column_start":56,"column_end":66},"alias_span":null,"name":"MerkleTree","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":689},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":1605,"byte_end":1615,"line_start":44,"line_end":44,"column_start":17,"column_end":27},"alias_span":null,"name":"RandomCoin","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":867},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":1647,"byte_end":1662,"line_start":47,"line_end":47,"column_start":18,"column_end":33},"alias_span":null,"name":"MerkleTreeError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":895},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":1664,"byte_end":1679,"line_start":47,"line_end":47,"column_start":35,"column_end":50},"alias_span":null,"name":"RandomCoinError","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":182,"byte_end":1681,"line_start":6,"line_end":47,"column_start":1,"column_end":52},"name":"","qualname":"::","value":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":544},{"krate":0,"index":547},{"krate":0,"index":550},{"krate":0,"index":566},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":655},{"krate":0,"index":658},{"krate":0,"index":661},{"krate":0,"index":712},{"krate":0,"index":715},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":727}],"decl_id":null,"docs":" This crate contains cryptographic primitives used in STARK proof generation and verification.\n These include:","sig":null,"attributes":[{"value":"/ This crate contains cryptographic primitives used in STARK proof generation and verification.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":182,"byte_end":279,"line_start":6,"line_end":6,"column_start":1,"column_end":98}},{"value":"/ These include:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":280,"byte_end":298,"line_start":7,"line_end":7,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":299,"byte_end":302,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ * **Hash functions** - which are defined using the [Hasher] trait. The crate also contains two","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":303,"byte_end":401,"line_start":9,"line_end":9,"column_start":1,"column_end":99}},{"value":"/   implementations of the trait for BLAKE3 and SHA3 hash functions.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":402,"byte_end":472,"line_start":10,"line_end":10,"column_start":1,"column_end":71}},{"value":"/ * **Merkle trees** - which are used as a commitment scheme in the STARK protocol. The","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":473,"byte_end":562,"line_start":11,"line_end":11,"column_start":1,"column_end":90}},{"value":"/   [MerkleTree] implementation supports concurrent tree construction as well as compact","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":563,"byte_end":653,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"/   aggregation of Merkle paths implemented using a variation of the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":654,"byte_end":724,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"/   [Octopus](https://eprint.iacr.org/2017/933) algorithm.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":725,"byte_end":785,"line_start":14,"line_end":14,"column_start":1,"column_end":61}},{"value":"/ * **PRNG** - which is used to generate pseudo-random elements in a finite field. The","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":786,"byte_end":874,"line_start":15,"line_end":15,"column_start":1,"column_end":89}},{"value":"/   [RandomCoin] implementation uses a cryptographic hash function to generate pseudo-random","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":875,"byte_end":969,"line_start":16,"line_end":16,"column_start":1,"column_end":95}},{"value":"/   elements form a seed.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":970,"byte_end":997,"line_start":17,"line_end":17,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":730},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/blake/mod.rs","byte_start":6914,"byte_end":6924,"line_start":20,"line_end":20,"column_start":12,"column_end":22},"name":"Blake3_256","qualname":"::hash::blake::Blake3_256","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implementation of the [Hasher](super::Hasher) trait for BLAKE3 hash function with 256-bit\n output.\n","sig":null,"attributes":[{"value":"/ Implementation of the [Hasher](super::Hasher) trait for BLAKE3 hash function with 256-bit","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/blake/mod.rs","byte_start":6765,"byte_end":6858,"line_start":17,"line_end":17,"column_start":1,"column_end":94}},{"value":"/ output.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/blake/mod.rs","byte_start":6859,"byte_end":6870,"line_start":18,"line_end":18,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":748},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/blake/mod.rs","byte_start":8580,"byte_end":8590,"line_start":66,"line_end":66,"column_start":12,"column_end":22},"name":"Blake3_192","qualname":"::hash::blake::Blake3_192","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implementation of the [Hasher](super::Hasher) trait for BLAKE3 hash function with 192-bit\n output.\n","sig":null,"attributes":[{"value":"/ Implementation of the [Hasher](super::Hasher) trait for BLAKE3 hash function with 192-bit","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/blake/mod.rs","byte_start":8431,"byte_end":8524,"line_start":63,"line_end":63,"column_start":1,"column_end":94}},{"value":"/ output.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/blake/mod.rs","byte_start":8525,"byte_end":8536,"line_start":64,"line_end":64,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":134},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/sha/mod.rs","byte_start":11449,"byte_end":11457,"line_start":17,"line_end":17,"column_start":12,"column_end":20},"name":"Sha3_256","qualname":"::hash::sha::Sha3_256","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implementation of the [Hasher](super::Hasher) trait for SHA3 hash function with 256-bit\n output.\n","sig":null,"attributes":[{"value":"/ Implementation of the [Hasher](super::Hasher) trait for SHA3 hash function with 256-bit","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/sha/mod.rs","byte_start":11334,"byte_end":11425,"line_start":15,"line_end":15,"column_start":1,"column_end":92}},{"value":"/ output.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/sha/mod.rs","byte_start":11426,"byte_end":11437,"line_start":16,"line_end":16,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":766},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/digest.rs","byte_start":44742,"byte_end":44755,"line_start":15,"line_end":15,"column_start":12,"column_end":25},"name":"ElementDigest","qualname":"::hash::rescue::rp62_248::digest::ElementDigest","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/digest.rs","byte_start":44818,"byte_end":44821,"line_start":18,"line_end":18,"column_start":12,"column_end":15},"name":"new","qualname":"<ElementDigest>::new","value":"pub fn new([BaseElement; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/digest.rs","byte_start":44905,"byte_end":44916,"line_start":22,"line_end":22,"column_start":12,"column_end":23},"name":"as_elements","qualname":"<ElementDigest>::as_elements","value":"pub fn as_elements(&Self) -> &[BaseElement]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/digest.rs","byte_start":44978,"byte_end":44997,"line_start":26,"line_end":26,"column_start":12,"column_end":31},"name":"digests_as_elements","qualname":"<ElementDigest>::digests_as_elements","value":"pub fn digests_as_elements(&[Self]) -> &[BaseElement]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":265},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":18826,"byte_end":18834,"line_start":90,"line_end":90,"column_start":12,"column_end":20},"name":"Rp62_248","qualname":"::hash::rescue::rp62_248::Rp62_248","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implementation of [Hasher] trait for Rescue Prime hash function with 248-bit output.","sig":null,"attributes":[{"value":"/ Implementation of [Hasher] trait for Rescue Prime hash function with 248-bit output.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":15709,"byte_end":15797,"line_start":44,"line_end":44,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":15798,"byte_end":15801,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ The hash function is implemented according to the Rescue Prime","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":15802,"byte_end":15868,"line_start":46,"line_end":46,"column_start":1,"column_end":67}},{"value":"/ [specifications](https://eprint.iacr.org/2020/1143.pdf) with the following exception:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":15869,"byte_end":15958,"line_start":47,"line_end":47,"column_start":1,"column_end":90}},{"value":"/ * We set the number of rounds to 7, which implies a 40% security margin instead of the 50%","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":15959,"byte_end":16053,"line_start":48,"line_end":48,"column_start":1,"column_end":95}},{"value":"/   margin used in the specifications (a 50% margin rounds up to 8 rounds). The primary","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":16054,"byte_end":16143,"line_start":49,"line_end":49,"column_start":1,"column_end":90}},{"value":"/   motivation for this is that having the number of rounds be one less than a power of two","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":16144,"byte_end":16237,"line_start":50,"line_end":50,"column_start":1,"column_end":94}},{"value":"/   simplifies AIR design for computations involving the hash function.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":16238,"byte_end":16311,"line_start":51,"line_end":51,"column_start":1,"column_end":74}},{"value":"/ * When hashing a sequence of elements, we do not append Fp(1) followed by Fp(0) elements","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":16312,"byte_end":16404,"line_start":52,"line_end":52,"column_start":1,"column_end":93}},{"value":"/   to the end of the sequence as padding. Instead, we initialize one of the capacity elements","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":16405,"byte_end":16501,"line_start":53,"line_end":53,"column_start":1,"column_end":97}},{"value":"/   to the number of elements to be hashed, and pad the sequence with Fp(0) elements only. This","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":16502,"byte_end":16599,"line_start":54,"line_end":54,"column_start":1,"column_end":98}},{"value":"/   ensures consistency of hash outputs between different hashing methods (see section below).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":16600,"byte_end":16696,"line_start":55,"line_end":55,"column_start":1,"column_end":97}},{"value":"/   However, it also means that our instantiation of Rescue Prime cannot be used in a stream","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":16697,"byte_end":16791,"line_start":56,"line_end":56,"column_start":1,"column_end":95}},{"value":"/   mode as the number of elements to be hashed must be known upfront.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":16792,"byte_end":16864,"line_start":57,"line_end":57,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":16865,"byte_end":16868,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ The parameters used to instantiate the function are:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":16869,"byte_end":16925,"line_start":59,"line_end":59,"column_start":1,"column_end":57}},{"value":"/ * Field: 62-bit prime field with modulus 2^62 - 111 * 2^39 + 1.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":16926,"byte_end":16993,"line_start":60,"line_end":60,"column_start":1,"column_end":68}},{"value":"/ * State width: 12 field elements.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":16994,"byte_end":17031,"line_start":61,"line_end":61,"column_start":1,"column_end":38}},{"value":"/ * Capacity size: 4 field elements.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":17032,"byte_end":17070,"line_start":62,"line_end":62,"column_start":1,"column_end":39}},{"value":"/ * Number of founds: 7.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":17071,"byte_end":17097,"line_start":63,"line_end":63,"column_start":1,"column_end":27}},{"value":"/ * S-Box degree: 3.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":17098,"byte_end":17120,"line_start":64,"line_end":64,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":17121,"byte_end":17124,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ The above parameters target 124-bit security level. The digest consists of four field elements","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":17125,"byte_end":17223,"line_start":66,"line_end":66,"column_start":1,"column_end":99}},{"value":"/ and it can be serialized into 31 bytes (248 bits).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":17224,"byte_end":17278,"line_start":67,"line_end":67,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":17279,"byte_end":17282,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ## Hash output consistency","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":17283,"byte_end":17313,"line_start":69,"line_end":69,"column_start":1,"column_end":31}},{"value":"/ Functions [hash_elements()](Rp62_248::hash_elements), [merge()](Rp62_248::merge), and","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":17314,"byte_end":17403,"line_start":70,"line_end":70,"column_start":1,"column_end":90}},{"value":"/ [merge_with_int()](Rp62_248::merge_with_int) are internally consistent. That is, computing","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":17404,"byte_end":17498,"line_start":71,"line_end":71,"column_start":1,"column_end":95}},{"value":"/ a hash for the same set of elements using these functions will always produce the same","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":17499,"byte_end":17589,"line_start":72,"line_end":72,"column_start":1,"column_end":91}},{"value":"/ result. For example, merging two digests using [merge()](Rp62_248::merge) will produce the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":17590,"byte_end":17684,"line_start":73,"line_end":73,"column_start":1,"column_end":95}},{"value":"/ same result as hashing 8 elements which make up these digests using","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":17685,"byte_end":17756,"line_start":74,"line_end":74,"column_start":1,"column_end":72}},{"value":"/ [hash_elements()](Rp62_248::hash_elements) function.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":17757,"byte_end":17813,"line_start":75,"line_end":75,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":17814,"byte_end":17817,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ However, [hash()](Rp62_248::hash) function is not consistent with functions mentioned above.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":17818,"byte_end":17914,"line_start":77,"line_end":77,"column_start":1,"column_end":97}},{"value":"/ For example, if we take two field elements, serialize them to bytes and hash them using","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":17915,"byte_end":18006,"line_start":78,"line_end":78,"column_start":1,"column_end":92}},{"value":"/ [hash()](Rp62_248::hash), the result will differ from the result obtained by hashing these","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":18007,"byte_end":18101,"line_start":79,"line_end":79,"column_start":1,"column_end":95}},{"value":"/ elements directly using [hash_elements()](Rp62_248::hash_elements) function. The reason for","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":18102,"byte_end":18197,"line_start":80,"line_end":80,"column_start":1,"column_end":96}},{"value":"/ this difference is that [hash()](Rp62_248::hash) function needs to be able to handle","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":18198,"byte_end":18286,"line_start":81,"line_end":81,"column_start":1,"column_end":89}},{"value":"/ arbitrary binary strings, which may or may not encode valid field elements - and thus,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":18287,"byte_end":18377,"line_start":82,"line_end":82,"column_start":1,"column_end":91}},{"value":"/ deserialization procedure used by this function is different from the procedure used to","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":18378,"byte_end":18469,"line_start":83,"line_end":83,"column_start":1,"column_end":92}},{"value":"/ deserialize valid field elements.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":18470,"byte_end":18507,"line_start":84,"line_end":84,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":18508,"byte_end":18511,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ Thus, if the underlying data consists of valid field elements, it might make more sense","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":18512,"byte_end":18603,"line_start":86,"line_end":86,"column_start":1,"column_end":92}},{"value":"/ to deserialize them into field elements and then hash them using","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":18604,"byte_end":18672,"line_start":87,"line_end":87,"column_start":1,"column_end":69}},{"value":"/ [hash_elements()](Rp62_248::hash_elements) function rather then hashing the serialized bytes","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":18673,"byte_end":18769,"line_start":88,"line_end":88,"column_start":1,"column_end":97}},{"value":"/ using [hash()](Rp62_248::hash) function.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":18770,"byte_end":18814,"line_start":89,"line_end":89,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":784},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/digest.rs","byte_start":80729,"byte_end":80742,"line_start":15,"line_end":15,"column_start":12,"column_end":25},"name":"ElementDigest","qualname":"::hash::rescue::rp64_256::digest::ElementDigest","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/digest.rs","byte_start":80805,"byte_end":80808,"line_start":18,"line_end":18,"column_start":12,"column_end":15},"name":"new","qualname":"<ElementDigest>::new","value":"pub fn new([BaseElement; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/digest.rs","byte_start":80892,"byte_end":80903,"line_start":22,"line_end":22,"column_start":12,"column_end":23},"name":"as_elements","qualname":"<ElementDigest>::as_elements","value":"pub fn as_elements(&Self) -> &[BaseElement]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/digest.rs","byte_start":80965,"byte_end":80984,"line_start":26,"line_end":26,"column_start":12,"column_end":31},"name":"digests_as_elements","qualname":"<ElementDigest>::digests_as_elements","value":"pub fn digests_as_elements(&[Self]) -> &[BaseElement]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":426},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":53064,"byte_end":53072,"line_start":109,"line_end":109,"column_start":12,"column_end":20},"name":"Rp64_256","qualname":"::hash::rescue::rp64_256::Rp64_256","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implementation of [Hasher] trait for Rescue Prime hash function with 256-bit output.","sig":null,"attributes":[{"value":"/ Implementation of [Hasher] trait for Rescue Prime hash function with 256-bit output.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":49494,"byte_end":49582,"line_start":58,"line_end":58,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":49583,"byte_end":49586,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ The hash function is implemented according to the Rescue Prime","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":49587,"byte_end":49653,"line_start":60,"line_end":60,"column_start":1,"column_end":67}},{"value":"/ [specifications](https://eprint.iacr.org/2020/1143.pdf) with the following exception:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":49654,"byte_end":49743,"line_start":61,"line_end":61,"column_start":1,"column_end":90}},{"value":"/ * We set the number of rounds to 7, which implies a 40% security margin instead of the 50%","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":49744,"byte_end":49838,"line_start":62,"line_end":62,"column_start":1,"column_end":95}},{"value":"/   margin used in the specifications (a 50% margin rounds up to 8 rounds). The primary","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":49839,"byte_end":49928,"line_start":63,"line_end":63,"column_start":1,"column_end":90}},{"value":"/   motivation for this is that having the number of rounds be one less than a power of two","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":49929,"byte_end":50022,"line_start":64,"line_end":64,"column_start":1,"column_end":94}},{"value":"/   simplifies AIR design for computations involving the hash function.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":50023,"byte_end":50096,"line_start":65,"line_end":65,"column_start":1,"column_end":74}},{"value":"/ * We use the first 4 elements of the state (rather than the last 4 elements of the state) for","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":50097,"byte_end":50194,"line_start":66,"line_end":66,"column_start":1,"column_end":98}},{"value":"/   capacity and the remaining 8 elements for rate. The output of the hash function comes from","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":50195,"byte_end":50291,"line_start":67,"line_end":67,"column_start":1,"column_end":97}},{"value":"/   the first four elements of the rate portion of the state (elements 4, 5, 6, and 7). This","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":50292,"byte_end":50386,"line_start":68,"line_end":68,"column_start":1,"column_end":95}},{"value":"/   effectively applies a fixed bit permutation before and after XLIX permutation. We assert","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":50387,"byte_end":50481,"line_start":69,"line_end":69,"column_start":1,"column_end":95}},{"value":"/   without proof that this does not affect security of the construction.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":50482,"byte_end":50557,"line_start":70,"line_end":70,"column_start":1,"column_end":76}},{"value":"/ * When hashing a sequence of elements, we do not append Fp(1) followed by Fp(0) elements","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":50558,"byte_end":50650,"line_start":71,"line_end":71,"column_start":1,"column_end":93}},{"value":"/   to the end of the sequence as padding. Instead, we initialize the first capacity element","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":50651,"byte_end":50745,"line_start":72,"line_end":72,"column_start":1,"column_end":95}},{"value":"/   to the number of elements to be hashed, and pad the sequence with Fp(0) elements only. This","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":50746,"byte_end":50843,"line_start":73,"line_end":73,"column_start":1,"column_end":98}},{"value":"/   ensures consistency of hash outputs between different hashing methods (see section below).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":50844,"byte_end":50940,"line_start":74,"line_end":74,"column_start":1,"column_end":97}},{"value":"/   However, it also means that our instantiation of Rescue Prime cannot be used in a stream","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":50941,"byte_end":51035,"line_start":75,"line_end":75,"column_start":1,"column_end":95}},{"value":"/   mode as the number of elements to be hashed must be known upfront.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":51036,"byte_end":51108,"line_start":76,"line_end":76,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":51109,"byte_end":51112,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ The parameters used to instantiate the function are:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":51113,"byte_end":51169,"line_start":78,"line_end":78,"column_start":1,"column_end":57}},{"value":"/ * Field: 64-bit prime field with modulus 2^64 - 2^32 + 1.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":51170,"byte_end":51231,"line_start":79,"line_end":79,"column_start":1,"column_end":62}},{"value":"/ * State width: 12 field elements.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":51232,"byte_end":51269,"line_start":80,"line_end":80,"column_start":1,"column_end":38}},{"value":"/ * Capacity size: 4 field elements.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":51270,"byte_end":51308,"line_start":81,"line_end":81,"column_start":1,"column_end":39}},{"value":"/ * Number of founds: 7.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":51309,"byte_end":51335,"line_start":82,"line_end":82,"column_start":1,"column_end":27}},{"value":"/ * S-Box degree: 7.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":51336,"byte_end":51358,"line_start":83,"line_end":83,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":51359,"byte_end":51362,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ The above parameters target 128-bit security level. The digest consists of four field elements","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":51363,"byte_end":51461,"line_start":85,"line_end":85,"column_start":1,"column_end":99}},{"value":"/ and it can be serialized into 32 bytes (256 bits).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":51462,"byte_end":51516,"line_start":86,"line_end":86,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":51517,"byte_end":51520,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ ## Hash output consistency","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":51521,"byte_end":51551,"line_start":88,"line_end":88,"column_start":1,"column_end":31}},{"value":"/ Functions [hash_elements()](Rp64_256::hash_elements), [merge()](Rp64_256::merge), and","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":51552,"byte_end":51641,"line_start":89,"line_end":89,"column_start":1,"column_end":90}},{"value":"/ [merge_with_int()](Rp64_256::merge_with_int) are internally consistent. That is, computing","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":51642,"byte_end":51736,"line_start":90,"line_end":90,"column_start":1,"column_end":95}},{"value":"/ a hash for the same set of elements using these functions will always produce the same","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":51737,"byte_end":51827,"line_start":91,"line_end":91,"column_start":1,"column_end":91}},{"value":"/ result. For example, merging two digests using [merge()](Rp64_256::merge) will produce the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":51828,"byte_end":51922,"line_start":92,"line_end":92,"column_start":1,"column_end":95}},{"value":"/ same result as hashing 8 elements which make up these digests using","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":51923,"byte_end":51994,"line_start":93,"line_end":93,"column_start":1,"column_end":72}},{"value":"/ [hash_elements()](Rp64_256::hash_elements) function.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":51995,"byte_end":52051,"line_start":94,"line_end":94,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":52052,"byte_end":52055,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ However, [hash()](Rp64_256::hash) function is not consistent with functions mentioned above.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":52056,"byte_end":52152,"line_start":96,"line_end":96,"column_start":1,"column_end":97}},{"value":"/ For example, if we take two field elements, serialize them to bytes and hash them using","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":52153,"byte_end":52244,"line_start":97,"line_end":97,"column_start":1,"column_end":92}},{"value":"/ [hash()](Rp64_256::hash), the result will differ from the result obtained by hashing these","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":52245,"byte_end":52339,"line_start":98,"line_end":98,"column_start":1,"column_end":95}},{"value":"/ elements directly using [hash_elements()](Rp64_256::hash_elements) function. The reason for","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":52340,"byte_end":52435,"line_start":99,"line_end":99,"column_start":1,"column_end":96}},{"value":"/ this difference is that [hash()](Rp64_256::hash) function needs to be able to handle","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":52436,"byte_end":52524,"line_start":100,"line_end":100,"column_start":1,"column_end":89}},{"value":"/ arbitrary binary strings, which may or may not encode valid field elements - and thus,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":52525,"byte_end":52615,"line_start":101,"line_end":101,"column_start":1,"column_end":91}},{"value":"/ deserialization procedure used by this function is different from the procedure used to","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":52616,"byte_end":52707,"line_start":102,"line_end":102,"column_start":1,"column_end":92}},{"value":"/ deserialize valid field elements.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":52708,"byte_end":52745,"line_start":103,"line_end":103,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":52746,"byte_end":52749,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ Thus, if the underlying data consists of valid field elements, it might make more sense","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":52750,"byte_end":52841,"line_start":105,"line_end":105,"column_start":1,"column_end":92}},{"value":"/ to deserialize them into field elements and then hash them using","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":52842,"byte_end":52910,"line_start":106,"line_end":106,"column_start":1,"column_end":69}},{"value":"/ [hash_elements()](Rp64_256::hash_elements) function rather then hashing the serialized bytes","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":52911,"byte_end":53007,"line_start":107,"line_end":107,"column_start":1,"column_end":97}},{"value":"/ using [hash()](Rp64_256::hash) function.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":53008,"byte_end":53052,"line_start":108,"line_end":108,"column_start":1,"column_end":45}}]},{"kind":"Const","id":{"krate":0,"index":445},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":60298,"byte_end":60308,"line_start":256,"line_end":256,"column_start":15,"column_end":25},"name":"NUM_ROUNDS","qualname":"::hash::rescue::rp64_256::Rp64_256::NUM_ROUNDS","value":"usize","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":" The number of rounds is set to 7 to target 128-bit security level with 40% security margin.\n","sig":null,"attributes":[{"value":"/ The number of rounds is set to 7 to target 128-bit security level with 40% security margin.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":60188,"byte_end":60283,"line_start":255,"line_end":255,"column_start":5,"column_end":100}}]},{"kind":"Const","id":{"krate":0,"index":446},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":60505,"byte_end":60516,"line_start":260,"line_end":260,"column_start":15,"column_end":26},"name":"STATE_WIDTH","qualname":"::hash::rescue::rp64_256::Rp64_256::STATE_WIDTH","value":"usize","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":" Sponge state is set to 12 field elements or 768 bytes; 8 elements are reserved for rate and\n the remaining 4 elements are reserved for capacity.\n","sig":null,"attributes":[{"value":"/ Sponge state is set to 12 field elements or 768 bytes; 8 elements are reserved for rate and","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":60335,"byte_end":60430,"line_start":258,"line_end":258,"column_start":5,"column_end":100}},{"value":"/ the remaining 4 elements are reserved for capacity.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":60435,"byte_end":60490,"line_start":259,"line_end":259,"column_start":5,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":447},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":60641,"byte_end":60651,"line_start":263,"line_end":263,"column_start":15,"column_end":25},"name":"RATE_RANGE","qualname":"::hash::rescue::rp64_256::Rp64_256::RATE_RANGE","value":"Range<usize>","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":" The rate portion of the state is located in elements 4 through 11 (inclusive).\n","sig":null,"attributes":[{"value":"/ The rate portion of the state is located in elements 4 through 11 (inclusive).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":60544,"byte_end":60626,"line_start":262,"line_end":262,"column_start":5,"column_end":87}}]},{"kind":"Const","id":{"krate":0,"index":448},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":60776,"byte_end":60790,"line_start":266,"line_end":266,"column_start":15,"column_end":29},"name":"CAPACITY_RANGE","qualname":"::hash::rescue::rp64_256::Rp64_256::CAPACITY_RANGE","value":"Range<usize>","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":" The capacity portion of the state is located in elements 0, 1, 2, and 3.\n","sig":null,"attributes":[{"value":"/ The capacity portion of the state is located in elements 0, 1, 2, and 3.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":60685,"byte_end":60761,"line_start":265,"line_end":265,"column_start":5,"column_end":81}}]},{"kind":"Const","id":{"krate":0,"index":449},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":60926,"byte_end":60938,"line_start":269,"line_end":269,"column_start":15,"column_end":27},"name":"DIGEST_RANGE","qualname":"::hash::rescue::rp64_256::Rp64_256::DIGEST_RANGE","value":"Range<usize>","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":" The output of the hash function can be read from state elements 4, 5, 6, and 7.\n","sig":null,"attributes":[{"value":"/ The output of the hash function can be read from state elements 4, 5, 6, and 7.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":60828,"byte_end":60911,"line_start":268,"line_end":268,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":61171,"byte_end":61188,"line_start":275,"line_end":275,"column_start":12,"column_end":29},"name":"apply_permutation","qualname":"<Rp64_256>::apply_permutation","value":"pub fn apply_permutation(&mut [BaseElement; ])","parent":null,"children":[],"decl_id":null,"docs":" Applies Rescue-XLIX permutation to the provided state.\n","sig":null,"attributes":[{"value":"/ Applies Rescue-XLIX permutation to the provided state.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":61101,"byte_end":61159,"line_start":274,"line_end":274,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":61583,"byte_end":61594,"line_start":285,"line_end":285,"column_start":12,"column_end":23},"name":"apply_round","qualname":"<Rp64_256>::apply_round","value":"pub fn apply_round(&mut [BaseElement; ], usize)","parent":null,"children":[],"decl_id":null,"docs":" Rescue-XLIX round function.\n","sig":null,"attributes":[{"value":"/ Rescue-XLIX round function.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":61518,"byte_end":61549,"line_start":283,"line_end":283,"column_start":5,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":61554,"byte_end":61571,"line_start":284,"line_end":284,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":503},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":2572,"byte_end":2578,"line_start":28,"line_end":28,"column_start":11,"column_end":17},"name":"Hasher","qualname":"::hash::Hasher","value":"Hasher","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":508}],"decl_id":null,"docs":" Defines a cryptographic hash function.","sig":null,"attributes":[{"value":"/ Defines a cryptographic hash function.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":2267,"byte_end":2309,"line_start":22,"line_end":22,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":2310,"byte_end":2313,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ This trait defined hash procedures for the following inputs:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":2314,"byte_end":2378,"line_start":24,"line_end":24,"column_start":1,"column_end":65}},{"value":"/ * A sequence of bytes.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":2379,"byte_end":2405,"line_start":25,"line_end":25,"column_start":1,"column_end":27}},{"value":"/ * Two digests - this is intended for use in Merkle tree constructions.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":2406,"byte_end":2480,"line_start":26,"line_end":26,"column_start":1,"column_end":75}},{"value":"/ * A digests and a u64 value - this intended for use in PRNG or PoW contexts.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":2481,"byte_end":2561,"line_start":27,"line_end":27,"column_start":1,"column_end":81}}]},{"kind":"Type","id":{"krate":0,"index":504},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":2647,"byte_end":2653,"line_start":30,"line_end":30,"column_start":10,"column_end":16},"name":"Digest","qualname":"::hash::Hasher::Digest","value":"type Digest: Digest;","parent":{"krate":0,"index":503},"children":[],"decl_id":null,"docs":" Specifies a digest type returned by this hasher.\n","sig":null,"attributes":[{"value":"/ Specifies a digest type returned by this hasher.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":2585,"byte_end":2637,"line_start":29,"line_end":29,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":2729,"byte_end":2733,"line_start":33,"line_end":33,"column_start":8,"column_end":12},"name":"hash","qualname":"::hash::Hasher::hash","value":"pub fn hash(&[u8]) -> Self::Digest","parent":{"krate":0,"index":503},"children":[],"decl_id":null,"docs":" Returns a hash of the provided sequence of bytes.\n","sig":null,"attributes":[{"value":"/ Returns a hash of the provided sequence of bytes.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":2668,"byte_end":2721,"line_start":32,"line_end":32,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":2885,"byte_end":2890,"line_start":37,"line_end":37,"column_start":8,"column_end":13},"name":"merge","qualname":"::hash::Hasher::merge","value":"pub fn merge(&[Self::Digest; ]) -> Self::Digest","parent":{"krate":0,"index":503},"children":[],"decl_id":null,"docs":" Returns a hash of two digests. This method is intended for use in construction of\n Merkle trees.\n","sig":null,"attributes":[{"value":"/ Returns a hash of two digests. This method is intended for use in construction of","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":2770,"byte_end":2855,"line_start":35,"line_end":35,"column_start":5,"column_end":90}},{"value":"/ Merkle trees.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":2860,"byte_end":2877,"line_start":36,"line_end":36,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3043,"byte_end":3057,"line_start":40,"line_end":40,"column_start":8,"column_end":22},"name":"merge_with_int","qualname":"::hash::Hasher::merge_with_int","value":"pub fn merge_with_int(Self::Digest, u64) -> Self::Digest","parent":{"krate":0,"index":503},"children":[],"decl_id":null,"docs":" Returns hash(`seed` || `value`). This method is intended for use in PRNG and PoW contexts.\n","sig":null,"attributes":[{"value":"/ Returns hash(`seed` || `value`). This method is intended for use in PRNG and PoW contexts.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":2941,"byte_end":3035,"line_start":39,"line_end":39,"column_start":5,"column_end":99}}]},{"kind":"Trait","id":{"krate":0,"index":509},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3382,"byte_end":3395,"line_start":47,"line_end":47,"column_start":11,"column_end":24},"name":"ElementHasher","qualname":"::hash::ElementHasher","value":"ElementHasher: Hasher","parent":null,"children":[{"krate":0,"index":510},{"krate":0,"index":511}],"decl_id":null,"docs":" Defines a cryptographic hash function for hashing field elements.","sig":null,"attributes":[{"value":"/ Defines a cryptographic hash function for hashing field elements.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3110,"byte_end":3179,"line_start":43,"line_end":43,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3180,"byte_end":3183,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ This trait defines a hash procedure for a sequence of field elements. The elements can be","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3184,"byte_end":3277,"line_start":45,"line_end":45,"column_start":1,"column_end":94}},{"value":"/ either in the base field specified for this hasher, or in an extension of the base field.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3278,"byte_end":3371,"line_start":46,"line_end":46,"column_start":1,"column_end":94}}]},{"kind":"Type","id":{"krate":0,"index":510},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3497,"byte_end":3506,"line_start":49,"line_end":49,"column_start":10,"column_end":19},"name":"BaseField","qualname":"::hash::ElementHasher::BaseField","value":"type BaseField: StarkField;","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" Specifies a base field for elements which can be hashed with this hasher.\n","sig":null,"attributes":[{"value":"/ Specifies a base field for elements which can be hashed with this hasher.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3410,"byte_end":3487,"line_start":48,"line_end":48,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3583,"byte_end":3596,"line_start":52,"line_end":52,"column_start":8,"column_end":21},"name":"hash_elements","qualname":"::hash::ElementHasher::hash_elements","value":"pub fn hash_elements<E>(&[E]) -> Self::Digest where E: FieldElement<BaseField\n= Self::BaseField>","parent":{"krate":0,"index":509},"children":[],"decl_id":null,"docs":" Returns a hash of the provided field elements.\n","sig":null,"attributes":[{"value":"/ Returns a hash of the provided field elements.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3525,"byte_end":3575,"line_start":51,"line_end":51,"column_start":5,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":513},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3885,"byte_end":3891,"line_start":61,"line_end":61,"column_start":11,"column_end":17},"name":"Digest","qualname":"::hash::Digest","value":"Digest: Debug + Default + Copy + Clone + Eq + PartialEq + Send + Sync + Serializable +\nDeserializable","parent":null,"children":[{"krate":0,"index":514}],"decl_id":null,"docs":" Defines output type for a cryptographic hash function.\n","sig":null,"attributes":[{"value":"/ Defines output type for a cryptographic hash function.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3816,"byte_end":3874,"line_start":60,"line_end":60,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":4408,"byte_end":4416,"line_start":70,"line_end":70,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::hash::Digest::as_bytes","value":"pub fn as_bytes(&Self) -> [u8; ]","parent":{"krate":0,"index":513},"children":[],"decl_id":null,"docs":" Returns this digest serialized into an array of bytes.","sig":null,"attributes":[{"value":"/ Returns this digest serialized into an array of bytes.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3997,"byte_end":4055,"line_start":64,"line_end":64,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":4060,"byte_end":4063,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ Ideally, the length of the returned array should be defined by an associated constant, but","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":4068,"byte_end":4162,"line_start":66,"line_end":66,"column_start":5,"column_end":99}},{"value":"/ using associated constants in const generics is not supported by Rust yet. Thus, we put an","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":4167,"byte_end":4261,"line_start":67,"line_end":67,"column_start":5,"column_end":99}},{"value":"/ upper limit on the possible digest size. For digests which are smaller than 32 bytes, the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":4266,"byte_end":4359,"line_start":68,"line_end":68,"column_start":5,"column_end":98}},{"value":"/ unused bytes should be set to 0.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":4364,"byte_end":4400,"line_start":69,"line_end":69,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":802},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":4612,"byte_end":4622,"line_start":77,"line_end":77,"column_start":12,"column_end":22},"name":"ByteDigest","qualname":"::hash::ByteDigest","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":4698,"byte_end":4701,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<ByteDigest<N>>::new","value":"pub fn new([u8; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":4788,"byte_end":4804,"line_start":85,"line_end":85,"column_start":12,"column_end":28},"name":"bytes_as_digests","qualname":"<ByteDigest<N>>::bytes_as_digests","value":"pub fn bytes_as_digests(&[[u8; ]]) -> &[ByteDigest<>]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":4759,"byte_end":4776,"line_start":84,"line_end":84,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":5022,"byte_end":5038,"line_start":92,"line_end":92,"column_start":12,"column_end":28},"name":"digests_as_bytes","qualname":"<ByteDigest<N>>::digests_as_bytes","value":"pub fn digests_as_bytes(&[ByteDigest<>]) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":4993,"byte_end":5010,"line_start":91,"line_end":91,"column_start":5,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":550},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":1171,"byte_end":1178,"line_start":27,"line_end":27,"column_start":9,"column_end":16},"name":"hashers","qualname":"::hashers","value":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":551},{"krate":0,"index":554},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":563}],"decl_id":null,"docs":" Contains implementations of currently supported hash functions.\n","sig":null,"attributes":[{"value":"/ Contains implementations of currently supported hash functions.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/lib.rs","byte_start":1185,"byte_end":1252,"line_start":28,"line_end":28,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":838},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":97375,"byte_end":97391,"line_start":31,"line_end":31,"column_start":12,"column_end":28},"name":"BatchMerkleProof","qualname":"::merkle::proofs::BatchMerkleProof","value":"BatchMerkleProof {  }","parent":null,"children":[{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":842}],"decl_id":null,"docs":" Multiple Merkle paths aggregated into a single proof.","sig":null,"attributes":[{"value":"/ Multiple Merkle paths aggregated into a single proof.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":96804,"byte_end":96861,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":96862,"byte_end":96865,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The aggregation is done in a way which removes all duplicate internal nodes, and thus,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":96866,"byte_end":96956,"line_start":23,"line_end":23,"column_start":1,"column_end":91}},{"value":"/ it is possible to achieve non-negligible compression as compared to naively concatenating","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":96957,"byte_end":97050,"line_start":24,"line_end":24,"column_start":1,"column_end":94}},{"value":"/ individual Merkle paths. The algorithm is for aggregation is a variation of","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":97051,"byte_end":97130,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/ [Octopus](https://eprint.iacr.org/2017/933).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":97131,"byte_end":97179,"line_start":26,"line_end":26,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":97180,"byte_end":97183,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Currently, at most 255 paths can be aggregated into a single proof. This limitation is","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":97184,"byte_end":97274,"line_start":28,"line_end":28,"column_start":1,"column_end":91}},{"value":"/ imposed primarily for serialization purposes.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":97275,"byte_end":97324,"line_start":29,"line_end":29,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":97928,"byte_end":97938,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"from_paths","qualname":"<BatchMerkleProof<H>>::from_paths","value":"pub fn from_paths(&[Vec<H::Digest>], &[usize]) -> BatchMerkleProof<H>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a batch Merkle proof from individual Merkle authentication paths.","sig":null,"attributes":[{"value":"/ Constructs a batch Merkle proof from individual Merkle authentication paths.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":97558,"byte_end":97638,"line_start":38,"line_end":38,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":97643,"byte_end":97646,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":97651,"byte_end":97663,"line_start":40,"line_end":40,"column_start":5,"column_end":17}},{"value":"/ Panics if:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":97668,"byte_end":97682,"line_start":41,"line_end":41,"column_start":5,"column_end":19}},{"value":"/ * No paths have been provided (i.e., `paths` is an empty slice).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":97687,"byte_end":97755,"line_start":42,"line_end":42,"column_start":5,"column_end":73}},{"value":"/ * More than 255 paths have been provided.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":97760,"byte_end":97805,"line_start":43,"line_end":43,"column_start":5,"column_end":50}},{"value":"/ * Number of paths is not equal to the number of indexes.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":97810,"byte_end":97870,"line_start":44,"line_end":44,"column_start":5,"column_end":65}},{"value":"/ * Not all paths have the same length.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":97875,"byte_end":97916,"line_start":45,"line_end":45,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":101036,"byte_end":101044,"line_start":128,"line_end":128,"column_start":12,"column_end":20},"name":"get_root","qualname":"<BatchMerkleProof<H>>::get_root","value":"pub fn get_root(&Self, &[usize]) -> Result<H::Digest, MerkleTreeError>","parent":null,"children":[],"decl_id":null,"docs":" Computes a node to which all Merkle paths aggregated in this proof resolve.","sig":null,"attributes":[{"value":"/ Computes a node to which all Merkle paths aggregated in this proof resolve.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":100505,"byte_end":100584,"line_start":118,"line_end":118,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":100589,"byte_end":100592,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":100597,"byte_end":100609,"line_start":120,"line_end":120,"column_start":5,"column_end":17}},{"value":"/ Returns an error if:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":100614,"byte_end":100638,"line_start":121,"line_end":121,"column_start":5,"column_end":29}},{"value":"/ * No indexes were provided (i.e., `indexes` is an empty slice).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":100643,"byte_end":100710,"line_start":122,"line_end":122,"column_start":5,"column_end":72}},{"value":"/ * Number of provided indexes is greater than 255.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":100715,"byte_end":100768,"line_start":123,"line_end":123,"column_start":5,"column_end":58}},{"value":"/ * Any of the specified `indexes` is greater than or equal to the number of leaves in the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":100773,"byte_end":100865,"line_start":124,"line_end":124,"column_start":5,"column_end":97}},{"value":"/   tree for which this batch proof was generated.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":100870,"byte_end":100922,"line_start":125,"line_end":125,"column_start":5,"column_end":57}},{"value":"/ * List of indexes contains duplicates.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":100927,"byte_end":100969,"line_start":126,"line_end":126,"column_start":5,"column_end":47}},{"value":"/ * The proof does not resolve to a single root.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":100974,"byte_end":101024,"line_start":127,"line_end":127,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":106563,"byte_end":106578,"line_start":267,"line_end":267,"column_start":12,"column_end":27},"name":"serialize_nodes","qualname":"<BatchMerkleProof<H>>::serialize_nodes","value":"pub fn serialize_nodes(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Converts all internal proof nodes into a vector of bytes.","sig":null,"attributes":[{"value":"/ Converts all internal proof nodes into a vector of bytes.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":106330,"byte_end":106391,"line_start":261,"line_end":261,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":106396,"byte_end":106399,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":106404,"byte_end":106416,"line_start":263,"line_end":263,"column_start":5,"column_end":17}},{"value":"/ Panics if:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":106421,"byte_end":106435,"line_start":264,"line_end":264,"column_start":5,"column_end":19}},{"value":"/ * The proof contains more than 255 Merkle paths.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":106440,"byte_end":106492,"line_start":265,"line_end":265,"column_start":5,"column_end":57}},{"value":"/ * The Merkle paths consist of more than 255 nodes.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":106497,"byte_end":106551,"line_start":266,"line_end":266,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":107725,"byte_end":107736,"line_start":296,"line_end":296,"column_start":12,"column_end":23},"name":"deserialize","qualname":"<BatchMerkleProof<H>>::deserialize","value":"pub fn deserialize<R: ByteReader>(&mut R, Vec<H::Digest>, u8)\n-> Result<Self, DeserializationError>","parent":null,"children":[],"decl_id":null,"docs":" Parses internal nodes from the provided `node_bytes`, and constructs a batch Merkle proof\n from these nodes, provided `leaves`, and provided tree `depth`.","sig":null,"attributes":[{"value":"/ Parses internal nodes from the provided `node_bytes`, and constructs a batch Merkle proof","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":107242,"byte_end":107335,"line_start":287,"line_end":287,"column_start":5,"column_end":98}},{"value":"/ from these nodes, provided `leaves`, and provided tree `depth`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":107340,"byte_end":107407,"line_start":288,"line_end":288,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":107412,"byte_end":107415,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":107420,"byte_end":107432,"line_start":290,"line_end":290,"column_start":5,"column_end":17}},{"value":"/ Returns an error if:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":107437,"byte_end":107461,"line_start":291,"line_end":291,"column_start":5,"column_end":29}},{"value":"/ * No leaves were provided (i.e., `leaves` is an empty slice).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":107466,"byte_end":107531,"line_start":292,"line_end":292,"column_start":5,"column_end":70}},{"value":"/ * Number of provided leaves is greater than 255.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":107536,"byte_end":107588,"line_start":293,"line_end":293,"column_start":5,"column_end":57}},{"value":"/ * Tree `depth` was set to zero.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":107593,"byte_end":107628,"line_start":294,"line_end":294,"column_start":5,"column_end":40}},{"value":"/ * `node_bytes` could not be deserialized into a valid set of internal nodes.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":107633,"byte_end":107713,"line_start":295,"line_end":295,"column_start":5,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":860},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":86542,"byte_end":86552,"line_start":88,"line_end":88,"column_start":12,"column_end":22},"name":"MerkleTree","qualname":"::merkle::MerkleTree","value":"MerkleTree {  }","parent":null,"children":[{"krate":0,"index":862},{"krate":0,"index":863}],"decl_id":null,"docs":" A fully-balanced Merkle tree.","sig":null,"attributes":[{"value":"/ A fully-balanced Merkle tree.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":83906,"byte_end":83939,"line_start":23,"line_end":23,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":83940,"byte_end":83943,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ In this implementation, a Merkle tree consists of two types of nodes: leaves and internal nodes","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":83944,"byte_end":84043,"line_start":25,"line_end":25,"column_start":1,"column_end":100}},{"value":"/ (one of which is a tree root). All nodes must be instances of the digest specified by the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84044,"byte_end":84137,"line_start":26,"line_end":26,"column_start":1,"column_end":94}},{"value":"/ [Hasher] used to build the tree.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84138,"byte_end":84174,"line_start":27,"line_end":27,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84175,"byte_end":84178,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84179,"byte_end":84190,"line_start":29,"line_end":29,"column_start":1,"column_end":12}},{"value":"/       *        <- tree root","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84191,"byte_end":84222,"line_start":30,"line_end":30,"column_start":1,"column_end":32}},{"value":"/     /   \\","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84223,"byte_end":84236,"line_start":31,"line_end":31,"column_start":1,"column_end":14}},{"value":"/    /     \\","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84237,"byte_end":84251,"line_start":32,"line_end":32,"column_start":1,"column_end":15}},{"value":"/   *       *    <- internal nodes","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84252,"byte_end":84288,"line_start":33,"line_end":33,"column_start":1,"column_end":37}},{"value":"/  / \\     / \\","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84289,"byte_end":84305,"line_start":34,"line_end":34,"column_start":1,"column_end":17}},{"value":"/ o   o   o   o  <- leaves","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84306,"byte_end":84334,"line_start":35,"line_end":35,"column_start":1,"column_end":29}},{"value":"/ |   |   |   |","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84335,"byte_end":84352,"line_start":36,"line_end":36,"column_start":1,"column_end":18}},{"value":"/ #   #   #   #  <- values","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84353,"byte_end":84381,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84382,"byte_end":84389,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84390,"byte_end":84393,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ A tree can be built from a slice of leaves using [MerkleTree::new()] function. Thus, the user","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84394,"byte_end":84491,"line_start":40,"line_end":40,"column_start":1,"column_end":98}},{"value":"/ is responsible for performing the first level of hashing (i.e., hashing values into leaf","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84492,"byte_end":84584,"line_start":41,"line_end":41,"column_start":1,"column_end":93}},{"value":"/ nodes). The number of leaves must always be a power of two so that the tree is fully balanced,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84585,"byte_end":84683,"line_start":42,"line_end":42,"column_start":1,"column_end":99}},{"value":"/ and a tree must contain at least two leaves.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84684,"byte_end":84732,"line_start":43,"line_end":43,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84733,"byte_end":84736,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ The depth of a tree is zero-based. Thus, a tree with two leaves has depth 1, a tree with four","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84737,"byte_end":84834,"line_start":45,"line_end":45,"column_start":1,"column_end":98}},{"value":"/ leaves has depth 2 etc.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84835,"byte_end":84862,"line_start":46,"line_end":46,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84863,"byte_end":84866,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ When the crate is compiled with `concurrent` feature enabled, tree construction will be","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84867,"byte_end":84958,"line_start":48,"line_end":48,"column_start":1,"column_end":92}},{"value":"/ performed in multiple threads (usually, as many threads as there are logical cores on the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":84959,"byte_end":85052,"line_start":49,"line_end":49,"column_start":1,"column_end":94}},{"value":"/ machine). The number of threads can be configured via `RAYON_NUM_THREADS` environment variable.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":85053,"byte_end":85152,"line_start":50,"line_end":50,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":85153,"byte_end":85156,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ To generate an inclusion proof for a given leaf, [MerkleTree::prove()] method can be used.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":85157,"byte_end":85251,"line_start":52,"line_end":52,"column_start":1,"column_end":95}},{"value":"/ You can also use [MerkleTree::prove_batch()] method to generate inclusion proofs for multiple","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":85252,"byte_end":85349,"line_start":53,"line_end":53,"column_start":1,"column_end":98}},{"value":"/ leaves. The advantage of the batch method is that redundant internal nodes are removed from","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":85350,"byte_end":85445,"line_start":54,"line_end":54,"column_start":1,"column_end":96}},{"value":"/ the batch proof, thereby compressing it (we use a variation of the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":85446,"byte_end":85516,"line_start":55,"line_end":55,"column_start":1,"column_end":71}},{"value":"/ [Octopus](https://eprint.iacr.org/2017/933) algorithm).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":85517,"byte_end":85576,"line_start":56,"line_end":56,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":85577,"byte_end":85580,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ To verify proofs, [MerkleTree::verify()] and [MerkleTree::verify_batch()] functions can be","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":85581,"byte_end":85675,"line_start":58,"line_end":58,"column_start":1,"column_end":95}},{"value":"/ used respectively.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":85676,"byte_end":85698,"line_start":59,"line_end":59,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":85699,"byte_end":85702,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":85703,"byte_end":85717,"line_start":61,"line_end":61,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":85718,"byte_end":85725,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"/ # use winter_crypto::{MerkleTree, Hasher, hashers::Blake3_256};","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":85726,"byte_end":85793,"line_start":63,"line_end":63,"column_start":1,"column_end":68}},{"value":"/ # use math::fields::f128::BaseElement;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":85794,"byte_end":85836,"line_start":64,"line_end":64,"column_start":1,"column_end":43}},{"value":"/ type Blake3 = Blake3_256::<BaseElement>;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":85837,"byte_end":85881,"line_start":65,"line_end":65,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":85882,"byte_end":85885,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ // build a tree","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":85886,"byte_end":85905,"line_start":67,"line_end":67,"column_start":1,"column_end":20}},{"value":"/ let leaves = [","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":85906,"byte_end":85924,"line_start":68,"line_end":68,"column_start":1,"column_end":19}},{"value":"/     Blake3::hash(&[1u8]),","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":85925,"byte_end":85954,"line_start":69,"line_end":69,"column_start":1,"column_end":30}},{"value":"/     Blake3::hash(&[2u8]),","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":85955,"byte_end":85984,"line_start":70,"line_end":70,"column_start":1,"column_end":30}},{"value":"/     Blake3::hash(&[3u8]),","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":85985,"byte_end":86014,"line_start":71,"line_end":71,"column_start":1,"column_end":30}},{"value":"/     Blake3::hash(&[4u8]),","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":86015,"byte_end":86044,"line_start":72,"line_end":72,"column_start":1,"column_end":30}},{"value":"/ ];","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":86045,"byte_end":86051,"line_start":73,"line_end":73,"column_start":1,"column_end":7}},{"value":"/ let tree = MerkleTree::<Blake3>::new(leaves.to_vec()).unwrap();","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":86052,"byte_end":86119,"line_start":74,"line_end":74,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(2, tree.depth());","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":86120,"byte_end":86152,"line_start":75,"line_end":75,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(leaves, tree.leaves());","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":86153,"byte_end":86191,"line_start":76,"line_end":76,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":86192,"byte_end":86195,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ // generate a proof","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":86196,"byte_end":86219,"line_start":78,"line_end":78,"column_start":1,"column_end":24}},{"value":"/ let proof = tree.prove(2).unwrap();","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":86220,"byte_end":86259,"line_start":79,"line_end":79,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(3, proof.len());","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":86260,"byte_end":86291,"line_start":80,"line_end":80,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(leaves[2], proof[0]);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":86292,"byte_end":86328,"line_start":81,"line_end":81,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":86329,"byte_end":86332,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ // verify proof","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":86333,"byte_end":86352,"line_start":83,"line_end":83,"column_start":1,"column_end":20}},{"value":"/ assert!(MerkleTree::<Blake3>::verify(*tree.root(), 2, &proof).is_ok());","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":86353,"byte_end":86428,"line_start":84,"line_end":84,"column_start":1,"column_end":76}},{"value":"/ assert!(MerkleTree::<Blake3>::verify(*tree.root(), 1, &proof).is_err());","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":86429,"byte_end":86505,"line_start":85,"line_end":85,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":86506,"byte_end":86513,"line_start":86,"line_end":86,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":87294,"byte_end":87297,"line_start":108,"line_end":108,"column_start":12,"column_end":15},"name":"new","qualname":"<MerkleTree<H>>::new","value":"pub fn new(Vec<H::Digest>) -> Result<Self, MerkleTreeError>","parent":null,"children":[],"decl_id":null,"docs":" Returns new Merkle tree built from the provide leaves using hash function specified by the\n `H` generic parameter.","sig":null,"attributes":[{"value":"/ Returns new Merkle tree built from the provide leaves using hash function specified by the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":86910,"byte_end":87004,"line_start":99,"line_end":99,"column_start":5,"column_end":99}},{"value":"/ `H` generic parameter.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":87009,"byte_end":87035,"line_start":100,"line_end":100,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":87040,"byte_end":87043,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ When `concurrent` feature is enabled, the tree is built using multiple threads.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":87048,"byte_end":87131,"line_start":102,"line_end":102,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":87136,"byte_end":87139,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":87144,"byte_end":87156,"line_start":104,"line_end":104,"column_start":5,"column_end":17}},{"value":"/ Returns an error if:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":87161,"byte_end":87185,"line_start":105,"line_end":105,"column_start":5,"column_end":29}},{"value":"/ * Fewer than two leaves were provided.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":87190,"byte_end":87232,"line_start":106,"line_end":106,"column_start":5,"column_end":47}},{"value":"/ * Number of leaves is not a power of two.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":87237,"byte_end":87282,"line_start":107,"line_end":107,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":88175,"byte_end":88179,"line_start":133,"line_end":133,"column_start":12,"column_end":16},"name":"root","qualname":"<MerkleTree<H>>::root","value":"pub fn root(&Self) -> &H::Digest","parent":null,"children":[],"decl_id":null,"docs":" Returns the root of the tree.\n","sig":null,"attributes":[{"value":"/ Returns the root of the tree.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":88130,"byte_end":88163,"line_start":132,"line_end":132,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":88421,"byte_end":88426,"line_start":141,"line_end":141,"column_start":12,"column_end":17},"name":"depth","qualname":"<MerkleTree<H>>::depth","value":"pub fn depth(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns depth of the tree.","sig":null,"attributes":[{"value":"/ Returns depth of the tree.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":88237,"byte_end":88267,"line_start":137,"line_end":137,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":88272,"byte_end":88275,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ The depth of a tree is zero-based. Thus, a tree with two leaves has depth 1, a tree with","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":88280,"byte_end":88372,"line_start":139,"line_end":139,"column_start":5,"column_end":97}},{"value":"/ four leaves has depth 2 etc.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":88377,"byte_end":88409,"line_start":140,"line_end":140,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":639},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":88544,"byte_end":88550,"line_start":146,"line_end":146,"column_start":12,"column_end":18},"name":"leaves","qualname":"<MerkleTree<H>>::leaves","value":"pub fn leaves(&Self) -> &[H::Digest]","parent":null,"children":[],"decl_id":null,"docs":" Returns leaf nodes of the tree.\n","sig":null,"attributes":[{"value":"/ Returns leaf nodes of the tree.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":88497,"byte_end":88532,"line_start":145,"line_end":145,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":89019,"byte_end":89024,"line_start":160,"line_end":160,"column_start":12,"column_end":17},"name":"prove","qualname":"<MerkleTree<H>>::prove","value":"pub fn prove(&Self, usize) -> Result<Vec<H::Digest>, MerkleTreeError>","parent":null,"children":[],"decl_id":null,"docs":" Returns a Merkle path to a leaf at the specified `index`.","sig":null,"attributes":[{"value":"/ Returns a Merkle path to a leaf at the specified `index`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":88732,"byte_end":88793,"line_start":153,"line_end":153,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":88798,"byte_end":88801,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ The leaf itself will be the first element in the path.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":88806,"byte_end":88864,"line_start":155,"line_end":155,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":88869,"byte_end":88872,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":88877,"byte_end":88889,"line_start":157,"line_end":157,"column_start":5,"column_end":17}},{"value":"/ Returns an error if the specified index is greater than or equal to the number of leaves","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":88894,"byte_end":88986,"line_start":158,"line_end":158,"column_start":5,"column_end":97}},{"value":"/ in the tree.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":88991,"byte_end":89007,"line_start":159,"line_end":159,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":641},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":89998,"byte_end":90009,"line_start":188,"line_end":188,"column_start":12,"column_end":23},"name":"prove_batch","qualname":"<MerkleTree<H>>::prove_batch","value":"pub fn prove_batch(&Self, &[usize])\n-> Result<BatchMerkleProof<H>, MerkleTreeError>","parent":null,"children":[],"decl_id":null,"docs":" Computes Merkle paths for the provided indexes and compresses the paths into a single proof.","sig":null,"attributes":[{"value":"/ Computes Merkle paths for the provided indexes and compresses the paths into a single proof.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":89548,"byte_end":89644,"line_start":179,"line_end":179,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":89649,"byte_end":89652,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":89657,"byte_end":89669,"line_start":181,"line_end":181,"column_start":5,"column_end":17}},{"value":"/ Returns an error if:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":89674,"byte_end":89698,"line_start":182,"line_end":182,"column_start":5,"column_end":29}},{"value":"/ * No indexes were provided (i.e., `indexes` is an empty slice).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":89703,"byte_end":89770,"line_start":183,"line_end":183,"column_start":5,"column_end":72}},{"value":"/ * Number of provided indexes is greater than 255.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":89775,"byte_end":89828,"line_start":184,"line_end":184,"column_start":5,"column_end":58}},{"value":"/ * Any of the provided indexes are greater than or equal to the number of leaves in the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":89833,"byte_end":89923,"line_start":185,"line_end":185,"column_start":5,"column_end":95}},{"value":"/   tree.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":89928,"byte_end":89939,"line_start":186,"line_end":186,"column_start":5,"column_end":16}},{"value":"/ * List of indexes contains duplicates.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":89944,"byte_end":89986,"line_start":187,"line_end":187,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":643},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":92495,"byte_end":92501,"line_start":260,"line_end":260,"column_start":12,"column_end":18},"name":"verify","qualname":"<MerkleTree<H>>::verify","value":"pub fn verify(H::Digest, usize, &[H::Digest]) -> Result<(), MerkleTreeError>","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the `proof` for the specified `index` is valid.","sig":null,"attributes":[{"value":"/ Checks whether the `proof` for the specified `index` is valid.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":92267,"byte_end":92333,"line_start":255,"line_end":255,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":92338,"byte_end":92341,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":92346,"byte_end":92358,"line_start":257,"line_end":257,"column_start":5,"column_end":17}},{"value":"/ Returns an error if the specified `proof` (which is a Merkle path) does not resolve to the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":92363,"byte_end":92457,"line_start":258,"line_end":258,"column_start":5,"column_end":99}},{"value":"/ specified `root`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":92462,"byte_end":92483,"line_start":259,"line_end":259,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":93688,"byte_end":93700,"line_start":294,"line_end":294,"column_start":12,"column_end":24},"name":"verify_batch","qualname":"<MerkleTree<H>>::verify_batch","value":"pub fn verify_batch(&H::Digest, &[usize], &BatchMerkleProof<H>)\n-> Result<(), MerkleTreeError>","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the batch proof contains Merkle paths for the of the specified `indexes`.","sig":null,"attributes":[{"value":"/ Checks whether the batch proof contains Merkle paths for the of the specified `indexes`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":93111,"byte_end":93203,"line_start":284,"line_end":284,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":93208,"byte_end":93211,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":93216,"byte_end":93228,"line_start":286,"line_end":286,"column_start":5,"column_end":17}},{"value":"/ Returns an error if:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":93233,"byte_end":93257,"line_start":287,"line_end":287,"column_start":5,"column_end":29}},{"value":"/ * No indexes were provided (i.e., `indexes` is an empty slice).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":93262,"byte_end":93329,"line_start":288,"line_end":288,"column_start":5,"column_end":72}},{"value":"/ * Number of provided indexes is greater than 255.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":93334,"byte_end":93387,"line_start":289,"line_end":289,"column_start":5,"column_end":58}},{"value":"/ * Any of the specified `indexes` is greater than or equal to the number of leaves in the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":93392,"byte_end":93484,"line_start":290,"line_end":290,"column_start":5,"column_end":97}},{"value":"/   tree from which the batch proof was generated.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":93489,"byte_end":93541,"line_start":291,"line_end":291,"column_start":5,"column_end":57}},{"value":"/ * List of indexes contains duplicates.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":93546,"byte_end":93588,"line_start":292,"line_end":292,"column_start":5,"column_end":47}},{"value":"/ * Any of the paths in the batch proof does not resolve to the specified `root`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":93593,"byte_end":93676,"line_start":293,"line_end":293,"column_start":5,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":645},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":94512,"byte_end":94530,"line_start":316,"line_end":316,"column_start":8,"column_end":26},"name":"build_merkle_nodes","qualname":"::merkle::build_merkle_nodes","value":"pub fn build_merkle_nodes<H: Hasher>(&[H::Digest]) -> Vec<H::Digest>","parent":null,"children":[],"decl_id":null,"docs":" Returns the internal nodes of a Merkle tree defined by the specified leaves.","sig":null,"attributes":[{"value":"/ Returns the internal nodes of a Merkle tree defined by the specified leaves.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":94088,"byte_end":94168,"line_start":309,"line_end":309,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":94169,"byte_end":94172,"line_start":310,"line_end":310,"column_start":1,"column_end":4}},{"value":"/ The internal nodes are turned as a vector where the root is stored at position 1, its children","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":94173,"byte_end":94271,"line_start":311,"line_end":311,"column_start":1,"column_end":99}},{"value":"/ are stored at positions 2, 3, their children are stored at positions 4, 5, 6, 7 etc.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":94272,"byte_end":94360,"line_start":312,"line_end":312,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":94361,"byte_end":94364,"line_start":313,"line_end":313,"column_start":1,"column_end":4}},{"value":"/ This function is exposed primarily for benchmarking purposes. It is not intended to be used","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":94365,"byte_end":94460,"line_start":314,"line_end":314,"column_start":1,"column_end":96}},{"value":"/ directly by the end users of the crate.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":94461,"byte_end":94504,"line_start":315,"line_end":315,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":689},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":112269,"byte_end":112279,"line_start":59,"line_end":59,"column_start":12,"column_end":22},"name":"RandomCoin","qualname":"::random::RandomCoin","value":"RandomCoin {  }","parent":null,"children":[{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694}],"decl_id":null,"docs":" Pseudo-random element generator for finite fields.","sig":null,"attributes":[{"value":"/ Pseudo-random element generator for finite fields.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":109882,"byte_end":109936,"line_start":14,"line_end":14,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":109937,"byte_end":109940,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ A random coin can be used to draws elements uniformly at random from the specified base field","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":109941,"byte_end":110038,"line_start":16,"line_end":16,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":110131,"byte_end":110134,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Internally we use a cryptographic hash function (which is specified via the `H` type parameter),","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":110135,"byte_end":110235,"line_start":19,"line_end":19,"column_start":1,"column_end":101}},{"value":"/ to draw elements from the field. The coin works roughly as follows:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":110236,"byte_end":110307,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"/ - The internal state of the coin consists of a `seed` and a `counter`. At instantiation","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":110308,"byte_end":110399,"line_start":21,"line_end":21,"column_start":1,"column_end":92}},{"value":"/   time, the `seed` is set to a hash of the provided bytes, and the `counter` is set to 0.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":110400,"byte_end":110493,"line_start":22,"line_end":22,"column_start":1,"column_end":94}},{"value":"/ - To draw the next element, we increment the `counter` and compute hash(`seed` || `counter`).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":110494,"byte_end":110591,"line_start":23,"line_end":23,"column_start":1,"column_end":98}},{"value":"/   If the resulting value is a valid field element, we return the result; otherwise we try","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":110592,"byte_end":110685,"line_start":24,"line_end":24,"column_start":1,"column_end":94}},{"value":"/   again until a valid element is found or the number of allowed tries is exceeded.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":110686,"byte_end":110772,"line_start":25,"line_end":25,"column_start":1,"column_end":87}},{"value":"/ - We can also re-seed the coin with a new value. During the reseeding procedure, the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":110773,"byte_end":110861,"line_start":26,"line_end":26,"column_start":1,"column_end":89}},{"value":"/   seed is set to hash(`old_seed` || `new_seed`), and the counter is reset to 0.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":110862,"byte_end":110945,"line_start":27,"line_end":27,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":110946,"byte_end":110949,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":110950,"byte_end":110964,"line_start":29,"line_end":29,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":110965,"byte_end":110972,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ # use winter_crypto::{RandomCoin, hashers::Blake3_256};","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":110973,"byte_end":111032,"line_start":31,"line_end":31,"column_start":1,"column_end":60}},{"value":"/ # use math::fields::f128::BaseElement;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":111033,"byte_end":111075,"line_start":32,"line_end":32,"column_start":1,"column_end":43}},{"value":"/ // instantiate a random coin using BLAKE3 as the hash function","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":111076,"byte_end":111142,"line_start":33,"line_end":33,"column_start":1,"column_end":67}},{"value":"/ let mut coin = RandomCoin::<BaseElement, Blake3_256<BaseElement>>::new(&[1, 2, 3, 4]);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":111143,"byte_end":111233,"line_start":34,"line_end":34,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":111234,"byte_end":111237,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // should draw different elements each time","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":111238,"byte_end":111285,"line_start":36,"line_end":36,"column_start":1,"column_end":48}},{"value":"/ let e1 = coin.draw::<BaseElement>().unwrap();;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":111286,"byte_end":111336,"line_start":37,"line_end":37,"column_start":1,"column_end":51}},{"value":"/ let e2 = coin.draw::<BaseElement>().unwrap();;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":111337,"byte_end":111387,"line_start":38,"line_end":38,"column_start":1,"column_end":51}},{"value":"/ assert_ne!(e1, e2);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":111388,"byte_end":111411,"line_start":39,"line_end":39,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":111412,"byte_end":111415,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ let e3 = coin.draw::<BaseElement>().unwrap();;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":111416,"byte_end":111466,"line_start":41,"line_end":41,"column_start":1,"column_end":51}},{"value":"/ assert_ne!(e1, e3);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":111467,"byte_end":111490,"line_start":42,"line_end":42,"column_start":1,"column_end":24}},{"value":"/ assert_ne!(e2, e3);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":111491,"byte_end":111514,"line_start":43,"line_end":43,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":111515,"byte_end":111518,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ // should draw same elements for the same seed","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":111519,"byte_end":111569,"line_start":45,"line_end":45,"column_start":1,"column_end":51}},{"value":"/ let mut coin1 = RandomCoin::<BaseElement, Blake3_256<BaseElement>>::new(&[1, 2, 3, 4]);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":111570,"byte_end":111661,"line_start":46,"line_end":46,"column_start":1,"column_end":92}},{"value":"/ let mut coin2 = RandomCoin::<BaseElement, Blake3_256<BaseElement>>::new(&[1, 2, 3, 4]);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":111662,"byte_end":111753,"line_start":47,"line_end":47,"column_start":1,"column_end":92}},{"value":"/ let e1 = coin1.draw::<BaseElement>().unwrap();;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":111754,"byte_end":111805,"line_start":48,"line_end":48,"column_start":1,"column_end":52}},{"value":"/ let e2 = coin2.draw::<BaseElement>().unwrap();;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":111806,"byte_end":111857,"line_start":49,"line_end":49,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(e1, e2);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":111858,"byte_end":111881,"line_start":50,"line_end":50,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":111882,"byte_end":111885,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ // should draw different elements based on seed","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":111886,"byte_end":111937,"line_start":52,"line_end":52,"column_start":1,"column_end":52}},{"value":"/ let mut coin1 = RandomCoin::<BaseElement, Blake3_256<BaseElement>>::new(&[1, 2, 3, 4]);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":111938,"byte_end":112029,"line_start":53,"line_end":53,"column_start":1,"column_end":92}},{"value":"/ let mut coin2 = RandomCoin::<BaseElement, Blake3_256<BaseElement>>::new(&[2, 3, 4, 5]);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":112030,"byte_end":112121,"line_start":54,"line_end":54,"column_start":1,"column_end":92}},{"value":"/ let e1 = coin1.draw::<BaseElement>().unwrap();;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":112122,"byte_end":112173,"line_start":55,"line_end":55,"column_start":1,"column_end":52}},{"value":"/ let e2 = coin2.draw::<BaseElement>().unwrap();;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":112174,"byte_end":112225,"line_start":56,"line_end":56,"column_start":1,"column_end":52}},{"value":"/ assert_ne!(e1, e2);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":112226,"byte_end":112249,"line_start":57,"line_end":57,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":112250,"byte_end":112257,"line_start":58,"line_end":58,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":112656,"byte_end":112659,"line_start":73,"line_end":73,"column_start":12,"column_end":15},"name":"new","qualname":"<RandomCoin<B, H>>::new","value":"pub fn new(&[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new random coin instantiated with the provided `seed`.\n","sig":null,"attributes":[{"value":"/ Returns a new random coin instantiated with the provided `seed`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":112576,"byte_end":112644,"line_start":72,"line_end":72,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":113905,"byte_end":113911,"line_start":105,"line_end":105,"column_start":12,"column_end":18},"name":"reseed","qualname":"<RandomCoin<B, H>>::reseed","value":"pub fn reseed(&mut Self, H::Digest)","parent":null,"children":[],"decl_id":null,"docs":" Reseeds the coin with the specified data by setting the new seed to hash(`seed` || `data`).","sig":null,"attributes":[{"value":"/ Reseeds the coin with the specified data by setting the new seed to hash(`seed` || `data`).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":112957,"byte_end":113052,"line_start":85,"line_end":85,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":113057,"byte_end":113060,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":113065,"byte_end":113079,"line_start":87,"line_end":87,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":113084,"byte_end":113091,"line_start":88,"line_end":88,"column_start":5,"column_end":12}},{"value":"/ # use winter_crypto::{RandomCoin, Hasher, hashers::Blake3_256};","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":113096,"byte_end":113163,"line_start":89,"line_end":89,"column_start":5,"column_end":72}},{"value":"/ # use math::fields::f128::BaseElement;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":113168,"byte_end":113210,"line_start":90,"line_end":90,"column_start":5,"column_end":47}},{"value":"/ let mut coin1 = RandomCoin::<BaseElement, Blake3_256<BaseElement>>::new(&[1, 2, 3, 4]);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":113215,"byte_end":113306,"line_start":91,"line_end":91,"column_start":5,"column_end":96}},{"value":"/ let mut coin2 = RandomCoin::<BaseElement, Blake3_256<BaseElement>>::new(&[1, 2, 3, 4]);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":113311,"byte_end":113402,"line_start":92,"line_end":92,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":113407,"byte_end":113410,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ // should draw the same element form both coins","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":113415,"byte_end":113466,"line_start":94,"line_end":94,"column_start":5,"column_end":56}},{"value":"/ let e1 = coin1.draw::<BaseElement>().unwrap();","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":113471,"byte_end":113521,"line_start":95,"line_end":95,"column_start":5,"column_end":55}},{"value":"/ let e2 = coin2.draw::<BaseElement>().unwrap();;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":113526,"byte_end":113577,"line_start":96,"line_end":96,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(e1, e2);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":113582,"byte_end":113605,"line_start":97,"line_end":97,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":113610,"byte_end":113613,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ // after reseeding should draw different elements","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":113618,"byte_end":113671,"line_start":99,"line_end":99,"column_start":5,"column_end":58}},{"value":"/ coin2.reseed(Blake3_256::<BaseElement>::hash(&[2, 3, 4, 5]));","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":113676,"byte_end":113741,"line_start":100,"line_end":100,"column_start":5,"column_end":70}},{"value":"/ let e1 = coin1.draw::<BaseElement>().unwrap();;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":113746,"byte_end":113797,"line_start":101,"line_end":101,"column_start":5,"column_end":56}},{"value":"/ let e2 = coin2.draw::<BaseElement>().unwrap();;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":113802,"byte_end":113853,"line_start":102,"line_end":102,"column_start":5,"column_end":56}},{"value":"/ assert_ne!(e1, e2);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":113858,"byte_end":113881,"line_start":103,"line_end":103,"column_start":5,"column_end":28}},{"value":"/ ```","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":113886,"byte_end":113893,"line_start":104,"line_end":104,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":114953,"byte_end":114968,"line_start":131,"line_end":131,"column_start":12,"column_end":27},"name":"reseed_with_int","qualname":"<RandomCoin<B, H>>::reseed_with_int","value":"pub fn reseed_with_int(&mut Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" Reseeds the coin with the specified value by setting the new seed to hash(`seed` ||\n `value`).","sig":null,"attributes":[{"value":"/ Reseeds the coin with the specified value by setting the new seed to hash(`seed` ||","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":114029,"byte_end":114116,"line_start":110,"line_end":110,"column_start":5,"column_end":92}},{"value":"/ `value`).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":114121,"byte_end":114134,"line_start":111,"line_end":111,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":114139,"byte_end":114142,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":114147,"byte_end":114161,"line_start":113,"line_end":113,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":114166,"byte_end":114173,"line_start":114,"line_end":114,"column_start":5,"column_end":12}},{"value":"/ # use winter_crypto::{RandomCoin, Hasher, hashers::Blake3_256};","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":114178,"byte_end":114245,"line_start":115,"line_end":115,"column_start":5,"column_end":72}},{"value":"/ # use math::fields::f128::BaseElement;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":114250,"byte_end":114292,"line_start":116,"line_end":116,"column_start":5,"column_end":47}},{"value":"/ let mut coin1 = RandomCoin::<BaseElement, Blake3_256<BaseElement>>::new(&[1, 2, 3, 4]);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":114297,"byte_end":114388,"line_start":117,"line_end":117,"column_start":5,"column_end":96}},{"value":"/ let mut coin2 = RandomCoin::<BaseElement, Blake3_256<BaseElement>>::new(&[1, 2, 3, 4]);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":114393,"byte_end":114484,"line_start":118,"line_end":118,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":114489,"byte_end":114492,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ // should draw the same element form both coins","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":114497,"byte_end":114548,"line_start":120,"line_end":120,"column_start":5,"column_end":56}},{"value":"/ let e1 = coin1.draw::<BaseElement>().unwrap();;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":114553,"byte_end":114604,"line_start":121,"line_end":121,"column_start":5,"column_end":56}},{"value":"/ let e2 = coin2.draw::<BaseElement>().unwrap();;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":114609,"byte_end":114660,"line_start":122,"line_end":122,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(e1, e2);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":114665,"byte_end":114688,"line_start":123,"line_end":123,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":114693,"byte_end":114696,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ // after reseeding should draw different elements","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":114701,"byte_end":114754,"line_start":125,"line_end":125,"column_start":5,"column_end":58}},{"value":"/ coin2.reseed_with_int(42);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":114759,"byte_end":114789,"line_start":126,"line_end":126,"column_start":5,"column_end":35}},{"value":"/ let e1 = coin1.draw::<BaseElement>().unwrap();;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":114794,"byte_end":114845,"line_start":127,"line_end":127,"column_start":5,"column_end":56}},{"value":"/ let e2 = coin2.draw::<BaseElement>().unwrap();;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":114850,"byte_end":114901,"line_start":128,"line_end":128,"column_start":5,"column_end":56}},{"value":"/ assert_ne!(e1, e2);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":114906,"byte_end":114929,"line_start":129,"line_end":129,"column_start":5,"column_end":28}},{"value":"/ ```","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":114934,"byte_end":114941,"line_start":130,"line_end":130,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":115812,"byte_end":115825,"line_start":156,"line_end":156,"column_start":12,"column_end":25},"name":"leading_zeros","qualname":"<RandomCoin<B, H>>::leading_zeros","value":"pub fn leading_zeros(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of leading zeros in the seed if it is interpreted as an integer in\n big-endian byte order.","sig":null,"attributes":[{"value":"/ Returns the number of leading zeros in the seed if it is interpreted as an integer in","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":115213,"byte_end":115302,"line_start":139,"line_end":139,"column_start":5,"column_end":94}},{"value":"/ big-endian byte order.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":115307,"byte_end":115333,"line_start":140,"line_end":140,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":115338,"byte_end":115341,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":115346,"byte_end":115360,"line_start":142,"line_end":142,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":115365,"byte_end":115372,"line_start":143,"line_end":143,"column_start":5,"column_end":12}},{"value":"/ # use winter_crypto::{RandomCoin, hashers::Blake3_256};","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":115377,"byte_end":115436,"line_start":144,"line_end":144,"column_start":5,"column_end":64}},{"value":"/ # use math::fields::f128::BaseElement;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":115441,"byte_end":115483,"line_start":145,"line_end":145,"column_start":5,"column_end":47}},{"value":"/ let mut coin = RandomCoin::<BaseElement, Blake3_256<BaseElement>>::new(&[1, 2, 3, 4]);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":115488,"byte_end":115578,"line_start":146,"line_end":146,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":115583,"byte_end":115586,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ let mut value = 0;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":115591,"byte_end":115613,"line_start":148,"line_end":148,"column_start":5,"column_end":27}},{"value":"/ while coin.check_leading_zeros(value) < 2 {","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":115618,"byte_end":115665,"line_start":149,"line_end":149,"column_start":5,"column_end":52}},{"value":"/     value += 1;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":115670,"byte_end":115689,"line_start":150,"line_end":150,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":115694,"byte_end":115699,"line_start":151,"line_end":151,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":115704,"byte_end":115707,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ coin.reseed_with_int(value);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":115712,"byte_end":115744,"line_start":153,"line_end":153,"column_start":5,"column_end":37}},{"value":"/ assert!(coin.leading_zeros() >= 2);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":115749,"byte_end":115788,"line_start":154,"line_end":154,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":115793,"byte_end":115800,"line_start":155,"line_end":155,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":116186,"byte_end":116205,"line_start":164,"line_end":164,"column_start":12,"column_end":31},"name":"check_leading_zeros","qualname":"<RandomCoin<B, H>>::check_leading_zeros","value":"pub fn check_leading_zeros(&Self, u64) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Computes hash(`seed` || `value`) and returns the number of leading zeros in the resulting\n value if it is interpreted as an integer in big-endian byte order.\n","sig":null,"attributes":[{"value":"/ Computes hash(`seed` || `value`) and returns the number of leading zeros in the resulting","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":116006,"byte_end":116099,"line_start":162,"line_end":162,"column_start":5,"column_end":98}},{"value":"/ value if it is interpreted as an integer in big-endian byte order.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":116104,"byte_end":116174,"line_start":163,"line_end":163,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":116775,"byte_end":116779,"line_start":179,"line_end":179,"column_start":12,"column_end":16},"name":"draw","qualname":"<RandomCoin<B, H>>::draw","value":"pub fn draw<E>(&mut Self) -> Result<E, RandomCoinError> where\nE: FieldElement<BaseField = B>","parent":null,"children":[],"decl_id":null,"docs":" Returns the next pseudo-random field element.","sig":null,"attributes":[{"value":"/ Returns the next pseudo-random field element.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":116578,"byte_end":116627,"line_start":174,"line_end":174,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":116632,"byte_end":116635,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":116640,"byte_end":116652,"line_start":176,"line_end":176,"column_start":5,"column_end":17}},{"value":"/ Returns an error if a valid field element could not be generated after 1000 calls to the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":116657,"byte_end":116749,"line_start":177,"line_end":177,"column_start":5,"column_end":97}},{"value":"/ PRNG.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":116754,"byte_end":116763,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":117648,"byte_end":117657,"line_start":203,"line_end":203,"column_start":12,"column_end":21},"name":"draw_pair","qualname":"<RandomCoin<B, H>>::draw_pair","value":"pub fn draw_pair<E>(&mut Self) -> Result<(E, E), RandomCoinError> where\nE: FieldElement<BaseField = B>","parent":null,"children":[],"decl_id":null,"docs":" Returns the next pair of pseudo-random field elements.","sig":null,"attributes":[{"value":"/ Returns the next pair of pseudo-random field elements.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":117439,"byte_end":117497,"line_start":198,"line_end":198,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":117502,"byte_end":117505,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":117510,"byte_end":117522,"line_start":200,"line_end":200,"column_start":5,"column_end":17}},{"value":"/ Returns an error if any of the field elements could not be generated after 100 calls to","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":117527,"byte_end":117618,"line_start":201,"line_end":201,"column_start":5,"column_end":96}},{"value":"/ the PRNG;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":117623,"byte_end":117636,"line_start":202,"line_end":202,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":118027,"byte_end":118038,"line_start":215,"line_end":215,"column_start":12,"column_end":23},"name":"draw_triple","qualname":"<RandomCoin<B, H>>::draw_triple","value":"pub fn draw_triple<E>(&mut Self) -> Result<(E, E, E), RandomCoinError> where\nE: FieldElement<BaseField = B>","parent":null,"children":[],"decl_id":null,"docs":" Returns the next triplet of pseudo-random field elements.","sig":null,"attributes":[{"value":"/ Returns the next triplet of pseudo-random field elements.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":117815,"byte_end":117876,"line_start":210,"line_end":210,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":117881,"byte_end":117884,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":117889,"byte_end":117901,"line_start":212,"line_end":212,"column_start":5,"column_end":17}},{"value":"/ Returns an error if any of the field elements could not be generated after 100 calls to","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":117906,"byte_end":117997,"line_start":213,"line_end":213,"column_start":5,"column_end":96}},{"value":"/ the PRNG;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":118002,"byte_end":118015,"line_start":214,"line_end":214,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":119291,"byte_end":119304,"line_start":252,"line_end":252,"column_start":12,"column_end":25},"name":"draw_integers","qualname":"<RandomCoin<B, H>>::draw_integers","value":"pub fn draw_integers(&mut Self, usize, usize)\n-> Result<Vec<usize>, RandomCoinError>","parent":null,"children":[],"decl_id":null,"docs":" Returns a vector of unique integers selected from the range [0, domain_size).","sig":null,"attributes":[{"value":"/ Returns a vector of unique integers selected from the range [0, domain_size).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":118213,"byte_end":118294,"line_start":222,"line_end":222,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":118299,"byte_end":118302,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":118307,"byte_end":118319,"line_start":224,"line_end":224,"column_start":5,"column_end":17}},{"value":"/ Returns an error if the specified number of unique integers could not be generated","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":118324,"byte_end":118410,"line_start":225,"line_end":225,"column_start":5,"column_end":91}},{"value":"/ after 1000 calls to the PRNG.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":118415,"byte_end":118448,"line_start":226,"line_end":226,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":118453,"byte_end":118456,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":118461,"byte_end":118473,"line_start":228,"line_end":228,"column_start":5,"column_end":17}},{"value":"/ Panics if:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":118478,"byte_end":118492,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/ - `domain_size` is not a power of two.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":118497,"byte_end":118539,"line_start":230,"line_end":230,"column_start":5,"column_end":47}},{"value":"/ - `num_values` is greater than or equal to `domain_size`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":118544,"byte_end":118605,"line_start":231,"line_end":231,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":118610,"byte_end":118613,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":118618,"byte_end":118632,"line_start":233,"line_end":233,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":118637,"byte_end":118644,"line_start":234,"line_end":234,"column_start":5,"column_end":12}},{"value":"/ # use std::collections::HashSet;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":118649,"byte_end":118685,"line_start":235,"line_end":235,"column_start":5,"column_end":41}},{"value":"/ # use winter_crypto::{RandomCoin, hashers::Blake3_256};","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":118690,"byte_end":118749,"line_start":236,"line_end":236,"column_start":5,"column_end":64}},{"value":"/ # use math::fields::f128::BaseElement;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":118754,"byte_end":118796,"line_start":237,"line_end":237,"column_start":5,"column_end":47}},{"value":"/ let mut coin = RandomCoin::<BaseElement, Blake3_256<BaseElement>>::new(&[1, 2, 3, 4]);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":118801,"byte_end":118891,"line_start":238,"line_end":238,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":118896,"byte_end":118899,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ let num_values = 20;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":118904,"byte_end":118928,"line_start":240,"line_end":240,"column_start":5,"column_end":29}},{"value":"/ let domain_size = 64;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":118933,"byte_end":118958,"line_start":241,"line_end":241,"column_start":5,"column_end":30}},{"value":"/ let values = coin.draw_integers(num_values, domain_size).unwrap();","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":118963,"byte_end":119033,"line_start":242,"line_end":242,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":119038,"byte_end":119041,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(num_values, values.len());","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":119046,"byte_end":119087,"line_start":244,"line_end":244,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":119092,"byte_end":119095,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ let mut value_set = HashSet::new();","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":119100,"byte_end":119139,"line_start":246,"line_end":246,"column_start":5,"column_end":44}},{"value":"/ for value in values {","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":119144,"byte_end":119169,"line_start":247,"line_end":247,"column_start":5,"column_end":30}},{"value":"/     assert!(value < domain_size);","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":119174,"byte_end":119211,"line_start":248,"line_end":248,"column_start":5,"column_end":42}},{"value":"/     assert!(value_set.insert(value));","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":119216,"byte_end":119257,"line_start":249,"line_end":249,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":119262,"byte_end":119267,"line_start":250,"line_end":250,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":119272,"byte_end":119279,"line_start":251,"line_end":251,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":868},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":121625,"byte_end":121637,"line_start":15,"line_end":15,"column_start":5,"column_end":17},"name":"TooFewLeaves","qualname":"::errors::MerkleTreeError::TooFewLeaves","value":"MerkleTreeError::TooFewLeaves(usize, usize)","parent":{"krate":0,"index":867},"children":[],"decl_id":null,"docs":" Fewer than two leaves were used to construct a Merkle tree.\n","sig":null,"attributes":[{"value":"/ Fewer than two leaves were used to construct a Merkle tree.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":121557,"byte_end":121620,"line_start":14,"line_end":14,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":872},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":121724,"byte_end":121751,"line_start":17,"line_end":17,"column_start":5,"column_end":32},"name":"NumberOfLeavesNotPowerOfTwo","qualname":"::errors::MerkleTreeError::NumberOfLeavesNotPowerOfTwo","value":"MerkleTreeError::NumberOfLeavesNotPowerOfTwo(usize)","parent":{"krate":0,"index":867},"children":[],"decl_id":null,"docs":" Number of leaves for a Merkle tree was not a power of two.\n","sig":null,"attributes":[{"value":"/ Number of leaves for a Merkle tree was not a power of two.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":121657,"byte_end":121719,"line_start":16,"line_end":16,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":875},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":121848,"byte_end":121868,"line_start":19,"line_end":19,"column_start":5,"column_end":25},"name":"LeafIndexOutOfBounds","qualname":"::errors::MerkleTreeError::LeafIndexOutOfBounds","value":"MerkleTreeError::LeafIndexOutOfBounds(usize, usize)","parent":{"krate":0,"index":867},"children":[],"decl_id":null,"docs":" A leaf index was greater than or equal to the number of leaves in the tree.\n","sig":null,"attributes":[{"value":"/ A leaf index was greater than or equal to the number of leaves in the tree.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":121764,"byte_end":121843,"line_start":18,"line_end":18,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":879},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":121979,"byte_end":121997,"line_start":21,"line_end":21,"column_start":5,"column_end":23},"name":"DuplicateLeafIndex","qualname":"::errors::MerkleTreeError::DuplicateLeafIndex","value":"MerkleTreeError::DuplicateLeafIndex","parent":{"krate":0,"index":867},"children":[],"decl_id":null,"docs":" A leaf index was included more than once in the list of indexes for a batch proof.\n","sig":null,"attributes":[{"value":"/ A leaf index was included more than once in the list of indexes for a batch proof.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":121888,"byte_end":121974,"line_start":20,"line_end":20,"column_start":5,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":881},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":122067,"byte_end":122084,"line_start":23,"line_end":23,"column_start":5,"column_end":22},"name":"TooFewLeafIndexes","qualname":"::errors::MerkleTreeError::TooFewLeafIndexes","value":"MerkleTreeError::TooFewLeafIndexes","parent":{"krate":0,"index":867},"children":[],"decl_id":null,"docs":" No leaf indexes were provided for a batch Merkle proof.\n","sig":null,"attributes":[{"value":"/ No leaf indexes were provided for a batch Merkle proof.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":122003,"byte_end":122062,"line_start":22,"line_end":22,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":883},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":122158,"byte_end":122176,"line_start":25,"line_end":25,"column_start":5,"column_end":23},"name":"TooManyLeafIndexes","qualname":"::errors::MerkleTreeError::TooManyLeafIndexes","value":"MerkleTreeError::TooManyLeafIndexes(usize, usize)","parent":{"krate":0,"index":867},"children":[],"decl_id":null,"docs":" Too many leaf index were provided for a batch Merkle proof.\n","sig":null,"attributes":[{"value":"/ Too many leaf index were provided for a batch Merkle proof.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":122090,"byte_end":122153,"line_start":24,"line_end":24,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":887},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":122261,"byte_end":122273,"line_start":27,"line_end":27,"column_start":5,"column_end":17},"name":"InvalidProof","qualname":"::errors::MerkleTreeError::InvalidProof","value":"MerkleTreeError::InvalidProof","parent":{"krate":0,"index":867},"children":[],"decl_id":null,"docs":" Merkle proof is not valid for the specified position(s).\n","sig":null,"attributes":[{"value":"/ Merkle proof is not valid for the specified position(s).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":122196,"byte_end":122256,"line_start":26,"line_end":26,"column_start":5,"column_end":65}}]},{"kind":"Enum","id":{"krate":0,"index":867},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":121535,"byte_end":121550,"line_start":13,"line_end":13,"column_start":10,"column_end":25},"name":"MerkleTreeError","qualname":"::errors::MerkleTreeError","value":"pub enum MerkleTreeError {\n    TooFewLeaves(usize, usize),\n    NumberOfLeavesNotPowerOfTwo(usize),\n    LeafIndexOutOfBounds(usize, usize),\n    DuplicateLeafIndex,\n    TooFewLeafIndexes,\n    TooManyLeafIndexes(usize, usize),\n    InvalidProof,\n}","parent":null,"children":[{"krate":0,"index":868},{"krate":0,"index":872},{"krate":0,"index":875},{"krate":0,"index":879},{"krate":0,"index":881},{"krate":0,"index":883},{"krate":0,"index":887}],"decl_id":null,"docs":" Defines errors which can occur when using Merkle trees.\n","sig":null,"attributes":[{"value":"/ Defines errors which can occur when using Merkle trees.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":121438,"byte_end":121497,"line_start":11,"line_end":11,"column_start":1,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":896},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":124150,"byte_end":124174,"line_start":81,"line_end":81,"column_start":5,"column_end":29},"name":"FailedToDrawFieldElement","qualname":"::errors::RandomCoinError::FailedToDrawFieldElement","value":"RandomCoinError::FailedToDrawFieldElement(usize)","parent":{"krate":0,"index":895},"children":[],"decl_id":null,"docs":" A valid element could not be drawn from the field after the specified number of tries.\n","sig":null,"attributes":[{"value":"/ A valid element could not be drawn from the field after the specified number of tries.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":124055,"byte_end":124145,"line_start":80,"line_end":80,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":899},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":124323,"byte_end":124343,"line_start":84,"line_end":84,"column_start":5,"column_end":25},"name":"FailedToDrawIntegers","qualname":"::errors::RandomCoinError::FailedToDrawIntegers","value":"RandomCoinError::FailedToDrawIntegers(usize, usize, usize)","parent":{"krate":0,"index":895},"children":[],"decl_id":null,"docs":" The required number of integer values could not be drawn from the specified domain after\n the specified number of tries.\n","sig":null,"attributes":[{"value":"/ The required number of integer values could not be drawn from the specified domain after","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":124187,"byte_end":124279,"line_start":82,"line_end":82,"column_start":5,"column_end":97}},{"value":"/ the specified number of tries.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":124284,"byte_end":124318,"line_start":83,"line_end":83,"column_start":5,"column_end":39}}]},{"kind":"Enum","id":{"krate":0,"index":895},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":124033,"byte_end":124048,"line_start":79,"line_end":79,"column_start":10,"column_end":25},"name":"RandomCoinError","qualname":"::errors::RandomCoinError","value":"pub enum RandomCoinError {\n    FailedToDrawFieldElement(usize),\n    FailedToDrawIntegers(usize, usize, usize),\n}","parent":null,"children":[{"krate":0,"index":896},{"krate":0,"index":899}],"decl_id":null,"docs":" Defines errors which can occur when drawing values from a random coin.\n","sig":null,"attributes":[{"value":"/ Defines errors which can occur when drawing values from a random coin.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":123921,"byte_end":123995,"line_start":77,"line_end":77,"column_start":1,"column_end":75}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/blake/mod.rs","byte_start":6989,"byte_end":6999,"line_start":22,"line_end":22,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/blake/mod.rs","byte_start":7593,"byte_end":7603,"line_start":41,"line_end":41,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/blake/mod.rs","byte_start":8655,"byte_end":8665,"line_start":68,"line_end":68,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/blake/mod.rs","byte_start":9427,"byte_end":9437,"line_start":91,"line_end":91,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/blake/mod.rs","byte_start":10488,"byte_end":10499,"line_start":118,"line_end":118,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/blake/mod.rs","byte_start":10680,"byte_end":10691,"line_start":128,"line_end":128,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/sha/mod.rs","byte_start":11522,"byte_end":11530,"line_start":19,"line_end":19,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/sha/mod.rs","byte_start":12144,"byte_end":12152,"line_start":38,"line_end":38,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/sha/mod.rs","byte_start":13083,"byte_end":13092,"line_start":63,"line_end":63,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/sha/mod.rs","byte_start":13267,"byte_end":13276,"line_start":73,"line_end":73,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/digest.rs","byte_start":44791,"byte_end":44804,"line_start":17,"line_end":17,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":243},{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/digest.rs","byte_start":45213,"byte_end":45226,"line_start":33,"line_end":33,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/digest.rs","byte_start":45787,"byte_end":45800,"line_start":50,"line_end":50,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/digest.rs","byte_start":45922,"byte_end":45935,"line_start":56,"line_end":56,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/digest.rs","byte_start":46084,"byte_end":46097,"line_start":62,"line_end":62,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":18855,"byte_end":18863,"line_start":92,"line_end":92,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":273},{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":23798,"byte_end":23806,"line_start":190,"line_end":190,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":279},{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/digest.rs","byte_start":80778,"byte_end":80791,"line_start":17,"line_end":17,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":387},{"krate":0,"index":389},{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/digest.rs","byte_start":81200,"byte_end":81213,"line_start":33,"line_end":33,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/digest.rs","byte_start":81624,"byte_end":81637,"line_start":46,"line_end":46,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/digest.rs","byte_start":81759,"byte_end":81772,"line_start":52,"line_end":52,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/digest.rs","byte_start":81915,"byte_end":81928,"line_start":58,"line_end":58,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":402}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/digest.rs","byte_start":82382,"byte_end":82395,"line_start":70,"line_end":70,"column_start":43,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":53093,"byte_end":53101,"line_start":111,"line_end":111,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":434},{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":58129,"byte_end":58137,"line_start":209,"line_end":209,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":440},{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":60055,"byte_end":60063,"line_start":251,"line_end":251,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":454},{"krate":0,"index":459},{"krate":0,"index":463},{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":4671,"byte_end":4681,"line_start":79,"line_end":79,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":518},{"krate":0,"index":520},{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":5251,"byte_end":5261,"line_start":99,"line_end":99,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":525}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":5441,"byte_end":5451,"line_start":107,"line_end":107,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":5558,"byte_end":5568,"line_start":113,"line_end":113,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":534}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":5728,"byte_end":5738,"line_start":119,"line_end":119,"column_start":41,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":538}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":97532,"byte_end":97548,"line_start":37,"line_end":37,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":627},{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":86771,"byte_end":86781,"line_start":96,"line_end":96,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":643},{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":112434,"byte_end":112444,"line_start":69,"line_end":69,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":705},{"krate":0,"index":707},{"krate":0,"index":709},{"krate":0,"index":711}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":122300,"byte_end":122315,"line_start":30,"line_end":30,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":720}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":124391,"byte_end":124406,"line_start":87,"line_end":87,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":722}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/blake/mod.rs","byte_start":6989,"byte_end":6999,"line_start":22,"line_end":22,"column_start":32,"column_end":42},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":730},"to":{"krate":0,"index":503}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/blake/mod.rs","byte_start":7593,"byte_end":7603,"line_start":41,"line_end":41,"column_start":39,"column_end":49},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":730},"to":{"krate":0,"index":509}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/blake/mod.rs","byte_start":8655,"byte_end":8665,"line_start":68,"line_end":68,"column_start":32,"column_end":42},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":748},"to":{"krate":0,"index":503}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/blake/mod.rs","byte_start":9427,"byte_end":9437,"line_start":91,"line_end":91,"column_start":39,"column_end":49},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":748},"to":{"krate":0,"index":509}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/blake/mod.rs","byte_start":10488,"byte_end":10499,"line_start":118,"line_end":118,"column_start":6,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":90},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/blake/mod.rs","byte_start":10680,"byte_end":10691,"line_start":128,"line_end":128,"column_start":21,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":90},"to":{"krate":19,"index":137}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/sha/mod.rs","byte_start":11522,"byte_end":11530,"line_start":19,"line_end":19,"column_start":32,"column_end":40},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":134},"to":{"krate":0,"index":503}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/sha/mod.rs","byte_start":12144,"byte_end":12152,"line_start":38,"line_end":38,"column_start":39,"column_end":47},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":134},"to":{"krate":0,"index":509}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/sha/mod.rs","byte_start":13083,"byte_end":13092,"line_start":63,"line_end":63,"column_start":6,"column_end":15},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/sha/mod.rs","byte_start":13267,"byte_end":13276,"line_start":73,"line_end":73,"column_start":21,"column_end":30},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":152},"to":{"krate":19,"index":137}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/digest.rs","byte_start":44791,"byte_end":44804,"line_start":17,"line_end":17,"column_start":6,"column_end":19},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":766},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/digest.rs","byte_start":45213,"byte_end":45226,"line_start":33,"line_end":33,"column_start":17,"column_end":30},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":766},"to":{"krate":0,"index":513}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/digest.rs","byte_start":45787,"byte_end":45800,"line_start":50,"line_end":50,"column_start":18,"column_end":31},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":766},"to":{"krate":2,"index":2994}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/digest.rs","byte_start":45922,"byte_end":45935,"line_start":56,"line_end":56,"column_start":23,"column_end":36},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":766},"to":{"krate":19,"index":57}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/digest.rs","byte_start":46084,"byte_end":46097,"line_start":62,"line_end":62,"column_start":25,"column_end":38},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":766},"to":{"krate":19,"index":97}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":18855,"byte_end":18863,"line_start":92,"line_end":92,"column_start":17,"column_end":25},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":265},"to":{"krate":0,"index":503}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp62_248/mod.rs","byte_start":23798,"byte_end":23806,"line_start":190,"line_end":190,"column_start":24,"column_end":32},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":265},"to":{"krate":0,"index":509}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/digest.rs","byte_start":80778,"byte_end":80791,"line_start":17,"line_end":17,"column_start":6,"column_end":19},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":784},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/digest.rs","byte_start":81200,"byte_end":81213,"line_start":33,"line_end":33,"column_start":17,"column_end":30},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":784},"to":{"krate":0,"index":513}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/digest.rs","byte_start":81624,"byte_end":81637,"line_start":46,"line_end":46,"column_start":18,"column_end":31},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":784},"to":{"krate":2,"index":2994}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/digest.rs","byte_start":81759,"byte_end":81772,"line_start":52,"line_end":52,"column_start":23,"column_end":36},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":784},"to":{"krate":19,"index":57}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/digest.rs","byte_start":81915,"byte_end":81928,"line_start":58,"line_end":58,"column_start":25,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":784},"to":{"krate":19,"index":97}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/digest.rs","byte_start":82382,"byte_end":82395,"line_start":70,"line_end":70,"column_start":43,"column_end":56},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":784},"to":{"krate":2,"index":2922}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":53093,"byte_end":53101,"line_start":111,"line_end":111,"column_start":17,"column_end":25},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":426},"to":{"krate":0,"index":503}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":58129,"byte_end":58137,"line_start":209,"line_end":209,"column_start":24,"column_end":32},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":426},"to":{"krate":0,"index":509}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/rescue/rp64_256/mod.rs","byte_start":60055,"byte_end":60063,"line_start":251,"line_end":251,"column_start":6,"column_end":14},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":426},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3397,"byte_end":3403,"line_start":47,"line_end":47,"column_start":26,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":503},"to":{"krate":0,"index":509}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3897,"byte_end":3902,"line_start":62,"line_end":62,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":9396},"to":{"krate":0,"index":513}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3905,"byte_end":3912,"line_start":62,"line_end":62,"column_start":13,"column_end":20},"kind":"SuperTrait","from":{"krate":2,"index":2994},"to":{"krate":0,"index":513}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3915,"byte_end":3919,"line_start":62,"line_end":62,"column_start":23,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":3026},"to":{"krate":0,"index":513}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3922,"byte_end":3927,"line_start":62,"line_end":62,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2637},"to":{"krate":0,"index":513}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3930,"byte_end":3932,"line_start":62,"line_end":62,"column_start":38,"column_end":40},"kind":"SuperTrait","from":{"krate":2,"index":2672},"to":{"krate":0,"index":513}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3935,"byte_end":3944,"line_start":62,"line_end":62,"column_start":43,"column_end":52},"kind":"SuperTrait","from":{"krate":2,"index":2667},"to":{"krate":0,"index":513}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3947,"byte_end":3951,"line_start":62,"line_end":62,"column_start":55,"column_end":59},"kind":"SuperTrait","from":{"krate":2,"index":3016},"to":{"krate":0,"index":513}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3954,"byte_end":3958,"line_start":62,"line_end":62,"column_start":62,"column_end":66},"kind":"SuperTrait","from":{"krate":2,"index":3028},"to":{"krate":0,"index":513}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3961,"byte_end":3973,"line_start":62,"line_end":62,"column_start":69,"column_end":81},"kind":"SuperTrait","from":{"krate":19,"index":57},"to":{"krate":0,"index":513}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":3976,"byte_end":3990,"line_start":62,"line_end":62,"column_start":84,"column_end":98},"kind":"SuperTrait","from":{"krate":19,"index":97},"to":{"krate":0,"index":513}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":4671,"byte_end":4681,"line_start":79,"line_end":79,"column_start":22,"column_end":32},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":802},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":5251,"byte_end":5261,"line_start":99,"line_end":99,"column_start":33,"column_end":43},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":802},"to":{"krate":0,"index":513}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":5441,"byte_end":5451,"line_start":107,"line_end":107,"column_start":34,"column_end":44},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":802},"to":{"krate":2,"index":2994}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":5558,"byte_end":5568,"line_start":113,"line_end":113,"column_start":39,"column_end":49},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":802},"to":{"krate":19,"index":57}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/hash/mod.rs","byte_start":5728,"byte_end":5738,"line_start":119,"line_end":119,"column_start":41,"column_end":51},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":802},"to":{"krate":19,"index":97}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/proofs.rs","byte_start":97532,"byte_end":97548,"line_start":37,"line_end":37,"column_start":17,"column_end":33},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":838},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/merkle/mod.rs","byte_start":86771,"byte_end":86781,"line_start":96,"line_end":96,"column_start":17,"column_end":27},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":860},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/random/mod.rs","byte_start":112434,"byte_end":112444,"line_start":69,"line_end":69,"column_start":32,"column_end":42},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":689},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":122300,"byte_end":122315,"line_start":30,"line_end":30,"column_start":23,"column_end":38},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":867},"to":{"krate":2,"index":9403}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-crypto-0.3.2/src/errors.rs","byte_start":124391,"byte_end":124406,"line_start":87,"line_end":87,"column_start":23,"column_end":38},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":895},"to":{"krate":2,"index":9403}}]}