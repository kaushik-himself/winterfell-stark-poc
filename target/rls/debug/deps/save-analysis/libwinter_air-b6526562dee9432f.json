{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0","program":"/Users/verloop/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","winter_air","--edition=2021","/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"std\"","-C","metadata=b6526562dee9432f","-C","extra-filename=-b6526562dee9432f","--out-dir","/Users/verloop/web3/winterfell-nft/target/rls/debug/deps","-L","dependency=/Users/verloop/web3/winterfell-nft/target/rls/debug/deps","--extern","crypto=/Users/verloop/web3/winterfell-nft/target/rls/debug/deps/libwinter_crypto-5ce773de4a24102d.rmeta","--extern","fri=/Users/verloop/web3/winterfell-nft/target/rls/debug/deps/libwinter_fri-9decb77369600f6f.rmeta","--extern","math=/Users/verloop/web3/winterfell-nft/target/rls/debug/deps/libwinter_math-caa6979d5adfb8a1.rmeta","--extern","utils=/Users/verloop/web3/winterfell-nft/target/rls/debug/deps/libwinter_utils-7e9ca64107c5b293.rmeta","--cap-lints","allow","-L","native=/Users/verloop/web3/winterfell-nft/target/rls/debug/build/blake3-92387bdc436ce863/out","-L","native=/Users/verloop/web3/winterfell-nft/target/rls/debug/build/blake3-92387bdc436ce863/out","--error-format=json","--sysroot","/Users/verloop/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/verloop/web3/winterfell-nft/target/rls/debug/deps/libwinter_air-b6526562dee9432f.rmeta"},"prelude":{"crate_id":{"name":"winter_air","disambiguator":[12765257955789625656,0]},"crate_root":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src","external_crates":[{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[5737620048972976797,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","num":2,"id":{"name":"core","disambiguator":[2242199718071837415,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2188212999151601010,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[1020664553731942337,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5221923779696816614,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10454403582981253701,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7392107620293427149,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9383090470819858406,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[13561338507145107503,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2153887466384468734,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[11638676648589799525,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[17336646944492823354,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[16179365956064936006,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[2085897901681677768,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[4724748409658749452,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[13513626471981952824,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[14681960900203760207,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","num":18,"id":{"name":"winter_fri","disambiguator":[8240717306310797145,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","num":19,"id":{"name":"winter_math","disambiguator":[7939711538366881299,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","num":20,"id":{"name":"winter_utils","disambiguator":[6543379861855309929,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","num":21,"id":{"name":"winter_crypto","disambiguator":[8941282792384159007,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","num":22,"id":{"name":"sha3","disambiguator":[7268035942060313992,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","num":23,"id":{"name":"digest","disambiguator":[7578323278360302728,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","num":24,"id":{"name":"generic_array","disambiguator":[8836281415988858016,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","num":25,"id":{"name":"typenum","disambiguator":[18344174592359653307,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","num":26,"id":{"name":"crypto_common","disambiguator":[7493296314554171395,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","num":27,"id":{"name":"block_buffer","disambiguator":[11768130926017568546,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","num":28,"id":{"name":"subtle","disambiguator":[4511373288773010580,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","num":29,"id":{"name":"keccak","disambiguator":[9107484285738289293,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","num":30,"id":{"name":"blake3","disambiguator":[16313067414413823840,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","num":31,"id":{"name":"arrayref","disambiguator":[15621369136658719922,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","num":32,"id":{"name":"arrayvec","disambiguator":[8238203197434002581,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","num":33,"id":{"name":"cfg_if","disambiguator":[10518978035588998298,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","num":34,"id":{"name":"constant_time_eq","disambiguator":[4478672943650019765,0]}}],"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":182,"byte_end":2235,"line_start":6,"line_end":49,"column_start":1,"column_end":3}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":713},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":2713,"byte_end":2720,"line_start":17,"line_end":17,"column_start":18,"column_end":25},"alias_span":null,"name":"Context","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":730},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":2761,"byte_end":2772,"line_start":20,"line_end":20,"column_start":22,"column_end":33},"alias_span":null,"name":"Commitments","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":746},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":2805,"byte_end":2812,"line_start":23,"line_end":23,"column_start":18,"column_end":25},"alias_span":null,"name":"Queries","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":760},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":2849,"byte_end":2857,"line_start":26,"line_end":26,"column_start":20,"column_end":28},"alias_span":null,"name":"OodFrame","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":796},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":1864,"byte_end":1878,"line_start":39,"line_end":39,"column_start":17,"column_end":31},"alias_span":null,"name":"AssertionError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":840},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":1912,"byte_end":1926,"line_start":42,"line_end":42,"column_start":19,"column_end":33},"alias_span":null,"name":"FieldExtension","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":819},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":1928,"byte_end":1940,"line_start":42,"line_end":42,"column_start":35,"column_end":47},"alias_span":null,"name":"HashFunction","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":861},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":1942,"byte_end":1954,"line_start":42,"line_end":42,"column_start":49,"column_end":61},"alias_span":null,"name":"ProofOptions","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":626},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":1986,"byte_end":1989,"line_start":46,"line_end":46,"column_start":5,"column_end":8},"alias_span":null,"name":"Air","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":896},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":1991,"byte_end":2001,"line_start":46,"line_end":46,"column_start":10,"column_end":20},"alias_span":null,"name":"AirContext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":918},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":2003,"byte_end":2012,"line_start":46,"line_end":46,"column_start":22,"column_end":31},"alias_span":null,"name":"Assertion","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":955},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":2014,"byte_end":2032,"line_start":46,"line_end":46,"column_start":33,"column_end":51},"alias_span":null,"name":"BoundaryConstraint","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":941},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":2034,"byte_end":2057,"line_start":46,"line_end":46,"column_start":53,"column_end":76},"alias_span":null,"name":"BoundaryConstraintGroup","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1021},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":2063,"byte_end":2096,"line_start":47,"line_end":47,"column_start":5,"column_end":38},"alias_span":null,"name":"ConstraintCompositionCoefficients","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1042},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":2098,"byte_end":2115,"line_start":47,"line_end":47,"column_start":40,"column_end":57},"alias_span":null,"name":"ConstraintDivisor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1031},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":2117,"byte_end":2144,"line_start":47,"line_end":47,"column_start":59,"column_end":86},"alias_span":null,"name":"DeepCompositionCoefficients","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1011},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":2150,"byte_end":2165,"line_start":48,"line_end":48,"column_start":5,"column_end":20},"alias_span":null,"name":"EvaluationFrame","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":881},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":2167,"byte_end":2176,"line_start":48,"line_end":48,"column_start":22,"column_end":31},"alias_span":null,"name":"TraceInfo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":997},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":2178,"byte_end":2204,"line_start":48,"line_end":48,"column_start":33,"column_end":59},"alias_span":null,"name":"TransitionConstraintDegree","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":985},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":2206,"byte_end":2231,"line_start":48,"line_end":48,"column_start":61,"column_end":86},"alias_span":null,"name":"TransitionConstraintGroup","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":182,"byte_end":2235,"line_start":6,"line_end":49,"column_start":1,"column_end":3},"name":"","qualname":"::","value":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":251},{"krate":0,"index":256},{"krate":0,"index":259},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":318},{"krate":0,"index":321},{"krate":0,"index":324},{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":680},{"krate":0,"index":683},{"krate":0,"index":686},{"krate":0,"index":689},{"krate":0,"index":692},{"krate":0,"index":695},{"krate":0,"index":698},{"krate":0,"index":701},{"krate":0,"index":704},{"krate":0,"index":707},{"krate":0,"index":710}],"decl_id":null,"docs":" This crate contains components need to describe arbitrary computations in a STARK-specific\n format.","sig":null,"attributes":[{"value":"/ This crate contains components need to describe arbitrary computations in a STARK-specific","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":182,"byte_end":276,"line_start":6,"line_end":6,"column_start":1,"column_end":95}},{"value":"/ format.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":277,"byte_end":288,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":289,"byte_end":292,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Before we can generate proofs attesting that some computations were executed correctly, we","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":293,"byte_end":387,"line_start":9,"line_end":9,"column_start":1,"column_end":95}},{"value":"/ need to describe these computations in a way that can be understood by the Winterfell prover","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":388,"byte_end":484,"line_start":10,"line_end":10,"column_start":1,"column_end":97}},{"value":"/ and verifier.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":485,"byte_end":502,"line_start":11,"line_end":11,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":503,"byte_end":506,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ More formally, we need to reduce our computations to algebraic statements involving a set of","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":507,"byte_end":603,"line_start":13,"line_end":13,"column_start":1,"column_end":97}},{"value":"/ bounded-degree polynomials. This step is usually called *arithmetization*. STARK arithmetization","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":604,"byte_end":704,"line_start":14,"line_end":14,"column_start":1,"column_end":101}},{"value":"/ reduces computations to an *algebraic intermediate representation* or AIR for short. For basics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":705,"byte_end":804,"line_start":15,"line_end":15,"column_start":1,"column_end":100}},{"value":"/ of AIR arithmetization please refer to the excellent posts from StarkWare:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":805,"byte_end":883,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":884,"byte_end":887,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ * [Arithmetization I](https://medium.com/starkware/arithmetization-i-15c046390862)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":888,"byte_end":974,"line_start":18,"line_end":18,"column_start":1,"column_end":87}},{"value":"/ * [Arithmetization II](https://medium.com/starkware/arithmetization-ii-403c3b3f4355)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":975,"byte_end":1063,"line_start":19,"line_end":19,"column_start":1,"column_end":89}},{"value":"/ * [StarkDEX Deep Dive: the STARK Core Engine](https://medium.com/starkware/starkdex-deep-dive-the-stark-core-engine-497942d0f0ab)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":1064,"byte_end":1197,"line_start":20,"line_end":20,"column_start":1,"column_end":134}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":1198,"byte_end":1201,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Coming up with efficient arithmetizations for computations is highly non-trivial, and","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":1202,"byte_end":1291,"line_start":22,"line_end":22,"column_start":1,"column_end":90}},{"value":"/ describing arithmetizations could be tedious and error-prone. The [Air] trait aims to help","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":1292,"byte_end":1386,"line_start":23,"line_end":23,"column_start":1,"column_end":95}},{"value":"/ with the latter, which, hopefully, also makes the former a little simpler. For additional","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":1387,"byte_end":1480,"line_start":24,"line_end":24,"column_start":1,"column_end":94}},{"value":"/ details, please refer to the documentation of the [Air] trait itself.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":1481,"byte_end":1554,"line_start":25,"line_end":25,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":1555,"byte_end":1558,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ This crate also contains components describing STARK protocol parameters ([ProofOptions]) and","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":1559,"byte_end":1656,"line_start":27,"line_end":27,"column_start":1,"column_end":98}},{"value":"/ proof structure ([StarkProof](proof::StarkProof)).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":1657,"byte_end":1711,"line_start":28,"line_end":28,"column_start":1,"column_end":55}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"proof","qualname":"::proof","value":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":134},{"krate":0,"index":137},{"krate":0,"index":190},{"krate":0,"index":193},{"krate":0,"index":237},{"krate":0,"index":240},{"krate":0,"index":777},{"krate":0,"index":785},{"krate":0,"index":787},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":241},{"krate":0,"index":250}],"decl_id":null,"docs":" Contains STARK proof struct and associated components.\n","sig":null,"attributes":[{"value":"/ Contains STARK proof struct and associated components.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":2419,"byte_end":2477,"line_start":6,"line_end":6,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":713},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":9775,"byte_end":9782,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"Context","qualname":"::proof::context::Context","value":"Context {  }","parent":null,"children":[{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718}],"decl_id":null,"docs":" Basic metadata about a specific execution of a computation.\n","sig":null,"attributes":[{"value":"/ Basic metadata about a specific execution of a computation.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":9661,"byte_end":9724,"line_start":15,"line_end":15,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":10209,"byte_end":10212,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<Context>::new","value":"pub fn new<B: StarkField>(&TraceInfo, ProofOptions) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new context for a computation described by the specified field, trace info, and\n proof options.\n","sig":null,"attributes":[{"value":"/ Creates a new context for a computation described by the specified field, trace info, and","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":10081,"byte_end":10174,"line_start":28,"line_end":28,"column_start":5,"column_end":98}},{"value":"/ proof options.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":10179,"byte_end":10197,"line_start":29,"line_end":29,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":10784,"byte_end":10796,"line_start":44,"line_end":44,"column_start":12,"column_end":24},"name":"trace_length","qualname":"<Context>::trace_length","value":"pub fn trace_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns execution trace length of the computation described by this context.\n","sig":null,"attributes":[{"value":"/ Returns execution trace length of the computation described by this context.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":10692,"byte_end":10772,"line_start":43,"line_end":43,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":10963,"byte_end":10974,"line_start":49,"line_end":49,"column_start":12,"column_end":23},"name":"trace_width","qualname":"<Context>::trace_width","value":"pub fn trace_width(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns execution trace width of the computation described by this context.\n","sig":null,"attributes":[{"value":"/ Returns execution trace width of the computation described by this context.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":10872,"byte_end":10951,"line_start":48,"line_end":48,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":11129,"byte_end":11143,"line_start":54,"line_end":54,"column_start":12,"column_end":26},"name":"get_trace_info","qualname":"<Context>::get_trace_info","value":"pub fn get_trace_info(&Self) -> TraceInfo","parent":null,"children":[],"decl_id":null,"docs":" Returns execution trace info for the computation described by this context.\n","sig":null,"attributes":[{"value":"/ Returns execution trace info for the computation described by this context.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":11038,"byte_end":11117,"line_start":53,"line_end":53,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":11416,"byte_end":11431,"line_start":63,"line_end":63,"column_start":12,"column_end":27},"name":"lde_domain_size","qualname":"<Context>::lde_domain_size","value":"pub fn lde_domain_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the size of the LDE domain for the computation described by this context.\n","sig":null,"attributes":[{"value":"/ Returns the size of the LDE domain for the computation described by this context.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":11319,"byte_end":11404,"line_start":62,"line_end":62,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":11611,"byte_end":11630,"line_start":68,"line_end":68,"column_start":12,"column_end":31},"name":"field_modulus_bytes","qualname":"<Context>::field_modulus_bytes","value":"pub fn field_modulus_bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns modulus of the field for the computation described by this context.\n","sig":null,"attributes":[{"value":"/ Returns modulus of the field for the computation described by this context.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":11520,"byte_end":11599,"line_start":67,"line_end":67,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":11895,"byte_end":11911,"line_start":76,"line_end":76,"column_start":12,"column_end":28},"name":"num_modulus_bits","qualname":"<Context>::num_modulus_bits","value":"pub fn num_modulus_bits(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns number of bits in the base field modulus for the computation described by this\n context.","sig":null,"attributes":[{"value":"/ Returns number of bits in the base field modulus for the computation described by this","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":11694,"byte_end":11784,"line_start":72,"line_end":72,"column_start":5,"column_end":95}},{"value":"/ context.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":11789,"byte_end":11801,"line_start":73,"line_end":73,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":11806,"byte_end":11809,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ The modulus is assumed to be encoded in little-endian byte order.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":11814,"byte_end":11883,"line_start":75,"line_end":75,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":12323,"byte_end":12330,"line_start":90,"line_end":90,"column_start":12,"column_end":19},"name":"options","qualname":"<Context>::options","value":"pub fn options(&Self) -> &ProofOptions","parent":null,"children":[],"decl_id":null,"docs":" Returns proof options which were used to a proof in this context.\n","sig":null,"attributes":[{"value":"/ Returns proof options which were used to a proof in this context.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":12242,"byte_end":12311,"line_start":89,"line_end":89,"column_start":5,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":730},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":16155,"byte_end":16166,"line_start":24,"line_end":24,"column_start":12,"column_end":23},"name":"Commitments","qualname":"::proof::commitments::Commitments","value":"","parent":null,"children":[],"decl_id":null,"docs":" Commitments made by the prover during commit phase of the protocol.","sig":null,"attributes":[{"value":"/ Commitments made by the prover during commit phase of the protocol.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":15613,"byte_end":15684,"line_start":14,"line_end":14,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":15685,"byte_end":15688,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ These commitments include:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":15689,"byte_end":15719,"line_start":16,"line_end":16,"column_start":1,"column_end":31}},{"value":"/ * Commitment to the extended execution trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":15720,"byte_end":15769,"line_start":17,"line_end":17,"column_start":1,"column_end":50}},{"value":"/ * Commitment to the evaluations of constraint composition polynomial over LDE domain.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":15770,"byte_end":15859,"line_start":18,"line_end":18,"column_start":1,"column_end":90}},{"value":"/ * Commitments to the evaluations of polynomials at all FRI layers.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":15860,"byte_end":15930,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":15931,"byte_end":15934,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Internally, the commitments are stored as a sequence of bytes. Thus, to retrieve the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":15935,"byte_end":16023,"line_start":21,"line_end":21,"column_start":1,"column_end":89}},{"value":"/ commitments, [parse()](Commitments::parse) function should be used.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":16024,"byte_end":16095,"line_start":22,"line_end":22,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":16411,"byte_end":16414,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<Commitments>::new","value":"pub fn new<H: Hasher>(H::Digest, H::Digest, Vec<H::Digest>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new Commitments struct initialized with the provided commitments.\n","sig":null,"attributes":[{"value":"/ Returns a new Commitments struct initialized with the provided commitments.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":16320,"byte_end":16399,"line_start":29,"line_end":29,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":16918,"byte_end":16921,"line_start":46,"line_end":46,"column_start":12,"column_end":15},"name":"add","qualname":"<Commitments>::add","value":"pub fn add<H: Hasher>(&mut Self, &H::Digest)","parent":null,"children":[],"decl_id":null,"docs":" Adds the specified commitment to the list of commitments.\n","sig":null,"attributes":[{"value":"/ Adds the specified commitment to the list of commitments.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":16845,"byte_end":16906,"line_start":45,"line_end":45,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":17703,"byte_end":17708,"line_start":64,"line_end":64,"column_start":12,"column_end":17},"name":"parse","qualname":"<Commitments>::parse","value":"pub fn parse<H: Hasher>(Self, usize)\n-> Result<(H::Digest, H::Digest, Vec<H::Digest>), DeserializationError>","parent":null,"children":[],"decl_id":null,"docs":" Parses the serialized commitments into distinct parts.","sig":null,"attributes":[{"value":"/ Parses the serialized commitments into distinct parts.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":17141,"byte_end":17199,"line_start":53,"line_end":53,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":17204,"byte_end":17207,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ The parts are (in the order in which they appear in the tuple):","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":17212,"byte_end":17279,"line_start":55,"line_end":55,"column_start":5,"column_end":72}},{"value":"/ 1. Extended execution trace commitment.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":17284,"byte_end":17327,"line_start":56,"line_end":56,"column_start":5,"column_end":48}},{"value":"/ 2. Constraint composition polynomial evaluation commitment.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":17332,"byte_end":17395,"line_start":57,"line_end":57,"column_start":5,"column_end":68}},{"value":"/ 3. FRI layer commitments.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":17400,"byte_end":17429,"line_start":58,"line_end":58,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":17434,"byte_end":17437,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":17442,"byte_end":17454,"line_start":60,"line_end":60,"column_start":5,"column_end":17}},{"value":"/ Returns an error if the bytes stored in self could not be parsed into the requested number","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":17459,"byte_end":17553,"line_start":61,"line_end":61,"column_start":5,"column_end":99}},{"value":"/ of commitments, or if there are any unconsumed bytes remaining after the parsing completes.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":17558,"byte_end":17653,"line_start":62,"line_end":62,"column_start":5,"column_end":100}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":17658,"byte_end":17691,"line_start":63,"line_end":63,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":746},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":20623,"byte_end":20630,"line_start":30,"line_end":30,"column_start":12,"column_end":19},"name":"Queries","qualname":"::proof::queries::Queries","value":"Queries {  }","parent":null,"children":[{"krate":0,"index":747},{"krate":0,"index":748}],"decl_id":null,"docs":" Decommitments to evaluations of a set of functions at multiple points.","sig":null,"attributes":[{"value":"/ Decommitments to evaluations of a set of functions at multiple points.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":19689,"byte_end":19763,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":19764,"byte_end":19767,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Given a set of functions evaluated over a domain *D*, a commitment is assumed to be a Merkle","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":19768,"byte_end":19864,"line_start":17,"line_end":17,"column_start":1,"column_end":97}},{"value":"/ tree where a leaf at position *i* contains evaluations of all functions at *x<sub>i</sub>*.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":19865,"byte_end":19960,"line_start":18,"line_end":18,"column_start":1,"column_end":96}},{"value":"/ Thus, a query (i.e. a single decommitment) for position *i* includes evaluations of all","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":19961,"byte_end":20052,"line_start":19,"line_end":19,"column_start":1,"column_end":92}},{"value":"/ functions at *x<sub>i</sub>*, accompanied by a Merkle authentication path from the leaf *i* to","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":20053,"byte_end":20151,"line_start":20,"line_end":20,"column_start":1,"column_end":99}},{"value":"/ the tree root.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":20152,"byte_end":20170,"line_start":21,"line_end":21,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":20171,"byte_end":20174,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This struct can contain one or more queries. In cases when more than one query is stored,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":20175,"byte_end":20268,"line_start":23,"line_end":23,"column_start":1,"column_end":94}},{"value":"/ Merkle authentication paths are compressed to remove redundant nodes.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":20269,"byte_end":20342,"line_start":24,"line_end":24,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":20343,"byte_end":20346,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Internally, all Merkle paths and query values are stored as a sequence of bytes. Thus, to","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":20347,"byte_end":20440,"line_start":26,"line_end":26,"column_start":1,"column_end":94}},{"value":"/ retrieve query values and the corresponding Merkle authentication paths,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":20441,"byte_end":20517,"line_start":27,"line_end":27,"column_start":1,"column_end":77}},{"value":"/ [parse()](Queries::parse) function should be used.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":20518,"byte_end":20572,"line_start":28,"line_end":28,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":21440,"byte_end":21443,"line_start":49,"line_end":49,"column_start":12,"column_end":15},"name":"new","qualname":"<Queries>::new","value":"pub fn new<H: Hasher, E: FieldElement>(BatchMerkleProof<H>, Vec<Vec<E>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns queries constructed from evaluations of a set of functions at some number of points\n in a domain and their corresponding Merkle authentication paths.","sig":null,"attributes":[{"value":"/ Returns queries constructed from evaluations of a set of functions at some number of points","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":20815,"byte_end":20910,"line_start":38,"line_end":38,"column_start":5,"column_end":100}},{"value":"/ in a domain and their corresponding Merkle authentication paths.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":20915,"byte_end":20983,"line_start":39,"line_end":39,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":20988,"byte_end":20991,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ For each evaluation point, the same number of values must be provided, and a hash of","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":20996,"byte_end":21084,"line_start":41,"line_end":41,"column_start":5,"column_end":93}},{"value":"/ these values must be equal to a leaf node in the corresponding Merkle authentication path.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":21089,"byte_end":21183,"line_start":42,"line_end":42,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":21188,"byte_end":21191,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":21196,"byte_end":21208,"line_start":44,"line_end":44,"column_start":5,"column_end":17}},{"value":"/ Panics if:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":21213,"byte_end":21227,"line_start":45,"line_end":45,"column_start":5,"column_end":19}},{"value":"/ * No queries were provided (`query_values` is an empty vector).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":21232,"byte_end":21299,"line_start":46,"line_end":46,"column_start":5,"column_end":72}},{"value":"/ * Any of the queries does not contain any evaluations.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":21304,"byte_end":21362,"line_start":47,"line_end":47,"column_start":5,"column_end":63}},{"value":"/ * Not all queries contain the same number of evaluations.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":21367,"byte_end":21428,"line_start":48,"line_end":48,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":23099,"byte_end":23104,"line_start":91,"line_end":91,"column_start":12,"column_end":17},"name":"parse","qualname":"<Queries>::parse","value":"pub fn parse<H, E>(Self, usize, usize, usize)\n-> Result<(BatchMerkleProof<H>, Vec<Vec<E>>), DeserializationError> where\nE: FieldElement, H: ElementHasher<BaseField = E::BaseField>","parent":null,"children":[],"decl_id":null,"docs":" Convert internally stored bytes into a set of query values and the corresponding Merkle\n authentication paths.","sig":null,"attributes":[{"value":"/ Convert internally stored bytes into a set of query values and the corresponding Merkle","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":22804,"byte_end":22895,"line_start":83,"line_end":83,"column_start":5,"column_end":96}},{"value":"/ authentication paths.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":22900,"byte_end":22925,"line_start":84,"line_end":84,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":22930,"byte_end":22933,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":22938,"byte_end":22950,"line_start":86,"line_end":86,"column_start":5,"column_end":17}},{"value":"/ Panics if:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":22955,"byte_end":22969,"line_start":87,"line_end":87,"column_start":5,"column_end":19}},{"value":"/ * `domain_size` is not a power of two.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":22974,"byte_end":23016,"line_start":88,"line_end":88,"column_start":5,"column_end":47}},{"value":"/ * `num_queries` is zero.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":23021,"byte_end":23049,"line_start":89,"line_end":89,"column_start":5,"column_end":33}},{"value":"/ * `values_per_query` is zero.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":23054,"byte_end":23087,"line_start":90,"line_end":90,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":760},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":27351,"byte_end":27359,"line_start":27,"line_end":27,"column_start":12,"column_end":20},"name":"OodFrame","qualname":"::proof::ood_frame::OodFrame","value":"OodFrame {  }","parent":null,"children":[{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763}],"decl_id":null,"docs":" Trace and constraint polynomial evaluations at an out-of-domain point.","sig":null,"attributes":[{"value":"/ Trace and constraint polynomial evaluations at an out-of-domain point.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":26732,"byte_end":26806,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":26807,"byte_end":26810,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This struct contains the following evaluations:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":26811,"byte_end":26862,"line_start":17,"line_end":17,"column_start":1,"column_end":52}},{"value":"/ * Evaluations of all trace polynomials at *z*.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":26863,"byte_end":26913,"line_start":18,"line_end":18,"column_start":1,"column_end":51}},{"value":"/ * Evaluations of all trace polynomials at *z * g*.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":26914,"byte_end":26968,"line_start":19,"line_end":19,"column_start":1,"column_end":55}},{"value":"/ * Evaluations of constraint composition column polynomials at *z*.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":26969,"byte_end":27039,"line_start":20,"line_end":20,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":27040,"byte_end":27043,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ where *z* is an out-of-domain point and *g* is the generator of the trace domain.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":27044,"byte_end":27129,"line_start":22,"line_end":22,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":27130,"byte_end":27133,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Internally, the evaluations are stored as a sequence of bytes. Thus, to retrieve the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":27134,"byte_end":27222,"line_start":24,"line_end":24,"column_start":1,"column_end":89}},{"value":"/ evaluations, [parse()](OodFrame::parse) function should be used.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":27223,"byte_end":27291,"line_start":25,"line_end":25,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":27809,"byte_end":27812,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"new","qualname":"<OodFrame>::new","value":"pub fn new<E: FieldElement>(EvaluationFrame<E>, Vec<E>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new [OodFrame] instantiated with the provided evaluation frame and a vector of\n out-of-domain constraint evaluations.","sig":null,"attributes":[{"value":"/ Returns a new [OodFrame] instantiated with the provided evaluation frame and a vector of","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":27582,"byte_end":27674,"line_start":36,"line_end":36,"column_start":5,"column_end":97}},{"value":"/ out-of-domain constraint evaluations.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":27679,"byte_end":27720,"line_start":37,"line_end":37,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":27725,"byte_end":27728,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":27733,"byte_end":27745,"line_start":39,"line_end":39,"column_start":5,"column_end":17}},{"value":"/ Panics if `evaluations` is an empty vector.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":27750,"byte_end":27797,"line_start":40,"line_end":40,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":28334,"byte_end":28354,"line_start":55,"line_end":55,"column_start":12,"column_end":32},"name":"set_evaluation_frame","qualname":"<OodFrame>::set_evaluation_frame","value":"pub fn set_evaluation_frame<E: FieldElement>(&mut Self, &EvaluationFrame<E>)","parent":null,"children":[],"decl_id":null,"docs":" Updates evaluation frame portion of this out-of-domain frame.","sig":null,"attributes":[{"value":"/ Updates evaluation frame portion of this out-of-domain frame.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":28175,"byte_end":28240,"line_start":51,"line_end":51,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":28245,"byte_end":28248,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":28253,"byte_end":28265,"line_start":53,"line_end":53,"column_start":5,"column_end":17}},{"value":"/ Panics if evaluation frame has already been set.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":28270,"byte_end":28322,"line_start":54,"line_end":54,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":29007,"byte_end":29033,"line_start":74,"line_end":74,"column_start":12,"column_end":38},"name":"set_constraint_evaluations","qualname":"<OodFrame>::set_constraint_evaluations","value":"pub fn set_constraint_evaluations<E: FieldElement>(&mut Self, &[E])","parent":null,"children":[],"decl_id":null,"docs":" Updates constraint evaluation portion of this out-of-domain frame.","sig":null,"attributes":[{"value":"/ Updates constraint evaluation portion of this out-of-domain frame.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":28781,"byte_end":28851,"line_start":68,"line_end":68,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":28856,"byte_end":28859,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":28864,"byte_end":28876,"line_start":70,"line_end":70,"column_start":5,"column_end":17}},{"value":"/ Panics if:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":28881,"byte_end":28895,"line_start":71,"line_end":71,"column_start":5,"column_end":19}},{"value":"/ * Constraint evaluations have already been set.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":28900,"byte_end":28951,"line_start":72,"line_end":72,"column_start":5,"column_end":56}},{"value":"/ * `evaluations` is an empty vector.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":28956,"byte_end":28995,"line_start":73,"line_end":73,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":30110,"byte_end":30115,"line_start":101,"line_end":101,"column_start":12,"column_end":17},"name":"parse","qualname":"<OodFrame>::parse","value":"pub fn parse<E: FieldElement>(Self, usize, usize)\n-> Result<(EvaluationFrame<E>, Vec<E>), DeserializationError>","parent":null,"children":[],"decl_id":null,"docs":" Returns an evaluation frame and a vector of out-of-domain constraint evaluations contained\n in `self`.","sig":null,"attributes":[{"value":"/ Returns an evaluation frame and a vector of out-of-domain constraint evaluations contained","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":29512,"byte_end":29606,"line_start":88,"line_end":88,"column_start":5,"column_end":99}},{"value":"/ in `self`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":29611,"byte_end":29625,"line_start":89,"line_end":89,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":29630,"byte_end":29633,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":29638,"byte_end":29650,"line_start":91,"line_end":91,"column_start":5,"column_end":17}},{"value":"/ Panics if either `trace_width` or `num_evaluations` are equal to zero.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":29655,"byte_end":29729,"line_start":92,"line_end":92,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":29734,"byte_end":29737,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":29742,"byte_end":29754,"line_start":94,"line_end":94,"column_start":5,"column_end":17}},{"value":"/ Returns an error if:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":29759,"byte_end":29783,"line_start":95,"line_end":95,"column_start":5,"column_end":29}},{"value":"/ * A valid [EvaluationFrame] for the specified `trace_width` could not be parsed from the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":29788,"byte_end":29880,"line_start":96,"line_end":96,"column_start":5,"column_end":97}},{"value":"/   internal bytes.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":29885,"byte_end":29906,"line_start":97,"line_end":97,"column_start":5,"column_end":26}},{"value":"/ * A vector of evaluations specified by `num_evaluations` could not be parsed from the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":29911,"byte_end":30000,"line_start":98,"line_end":98,"column_start":5,"column_end":94}},{"value":"/   internal bytes.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":30005,"byte_end":30026,"line_start":99,"line_end":99,"column_start":5,"column_end":26}},{"value":"/ * Any unconsumed bytes remained after the parsing was complete.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":30031,"byte_end":30098,"line_start":100,"line_end":100,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":777},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":3855,"byte_end":3865,"line_start":48,"line_end":48,"column_start":12,"column_end":22},"name":"StarkProof","qualname":"::proof::StarkProof","value":"StarkProof { context, commitments, trace_queries, constraint_queries, ood_frame, fri_proof, pow_nonce }","parent":null,"children":[{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":784}],"decl_id":null,"docs":" A proof generated by Winterfell prover.","sig":null,"attributes":[{"value":"/ A proof generated by Winterfell prover.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":3135,"byte_end":3178,"line_start":35,"line_end":35,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":3179,"byte_end":3182,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ A STARK proof contains information proving that a computation was executed correctly. A proof","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":3183,"byte_end":3280,"line_start":37,"line_end":37,"column_start":1,"column_end":98}},{"value":"/ also contains basic metadata for the computation, but neither the definition of the computation","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":3281,"byte_end":3380,"line_start":38,"line_end":38,"column_start":1,"column_end":100}},{"value":"/ itself, nor public inputs consumed by the computation are contained in a proof.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":3381,"byte_end":3464,"line_start":39,"line_end":39,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":3465,"byte_end":3468,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ A proof can be serialized into a sequence of bytes using [to_bytes()](StarkProof::to_bytes)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":3469,"byte_end":3564,"line_start":41,"line_end":41,"column_start":1,"column_end":96}},{"value":"/ function, and deserialized from a sequence of bytes using [from_bytes()](StarkProof::from_bytes)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":3565,"byte_end":3665,"line_start":42,"line_end":42,"column_start":1,"column_end":101}},{"value":"/ function.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":3666,"byte_end":3679,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":3680,"byte_end":3683,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ To estimate soundness of a proof (in bits), [security_level()](StarkProof::security_level)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":3684,"byte_end":3778,"line_start":45,"line_end":45,"column_start":1,"column_end":95}},{"value":"/ function can be used.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":3779,"byte_end":3804,"line_start":46,"line_end":46,"column_start":1,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":778},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":3963,"byte_end":3970,"line_start":50,"line_end":50,"column_start":9,"column_end":16},"name":"context","qualname":"::proof::StarkProof::context","value":"proof::context::Context","parent":{"krate":0,"index":777},"children":[],"decl_id":null,"docs":" Basic metadata about the execution of the computation described by this proof.\n","sig":null,"attributes":[{"value":"/ Basic metadata about the execution of the computation described by this proof.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":3872,"byte_end":3954,"line_start":49,"line_end":49,"column_start":5,"column_end":87}}]},{"kind":"Field","id":{"krate":0,"index":779},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":4069,"byte_end":4080,"line_start":52,"line_end":52,"column_start":9,"column_end":20},"name":"commitments","qualname":"::proof::StarkProof::commitments","value":"proof::commitments::Commitments","parent":{"krate":0,"index":777},"children":[],"decl_id":null,"docs":" Commitments made by the prover during the commit phase of the protocol.\n","sig":null,"attributes":[{"value":"/ Commitments made by the prover during the commit phase of the protocol.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":3985,"byte_end":4060,"line_start":51,"line_end":51,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":780},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":4198,"byte_end":4211,"line_start":54,"line_end":54,"column_start":9,"column_end":22},"name":"trace_queries","qualname":"::proof::StarkProof::trace_queries","value":"proof::queries::Queries","parent":{"krate":0,"index":777},"children":[],"decl_id":null,"docs":" Decommitments of extended execution trace values at positions queried by the verifier.\n","sig":null,"attributes":[{"value":"/ Decommitments of extended execution trace values at positions queried by the verifier.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":4099,"byte_end":4189,"line_start":53,"line_end":53,"column_start":5,"column_end":95}}]},{"kind":"Field","id":{"krate":0,"index":781},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":4347,"byte_end":4365,"line_start":57,"line_end":57,"column_start":9,"column_end":27},"name":"constraint_queries","qualname":"::proof::StarkProof::constraint_queries","value":"proof::queries::Queries","parent":{"krate":0,"index":777},"children":[],"decl_id":null,"docs":" Decommitments of constraint composition polynomial evaluations at positions queried by\n the verifier.\n","sig":null,"attributes":[{"value":"/ Decommitments of constraint composition polynomial evaluations at positions queried by","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":4226,"byte_end":4316,"line_start":55,"line_end":55,"column_start":5,"column_end":95}},{"value":"/ the verifier.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":4321,"byte_end":4338,"line_start":56,"line_end":56,"column_start":5,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":782},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":4463,"byte_end":4472,"line_start":59,"line_end":59,"column_start":9,"column_end":18},"name":"ood_frame","qualname":"::proof::StarkProof::ood_frame","value":"proof::ood_frame::OodFrame","parent":{"krate":0,"index":777},"children":[],"decl_id":null,"docs":" Trace and constraint polynomial evaluations at an out-of-domain point.\n","sig":null,"attributes":[{"value":"/ Trace and constraint polynomial evaluations at an out-of-domain point.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":4380,"byte_end":4454,"line_start":58,"line_end":58,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":783},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":4552,"byte_end":4561,"line_start":61,"line_end":61,"column_start":9,"column_end":18},"name":"fri_proof","qualname":"::proof::StarkProof::fri_proof","value":"winter_fri::FriProof","parent":{"krate":0,"index":777},"children":[],"decl_id":null,"docs":" Low-degree proof for a DEEP composition polynomial.\n","sig":null,"attributes":[{"value":"/ Low-degree proof for a DEEP composition polynomial.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":4488,"byte_end":4543,"line_start":60,"line_end":60,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":784},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":4634,"byte_end":4643,"line_start":63,"line_end":63,"column_start":9,"column_end":18},"name":"pow_nonce","qualname":"::proof::StarkProof::pow_nonce","value":"u64","parent":{"krate":0,"index":777},"children":[],"decl_id":null,"docs":" Proof-of-work nonce for query seed grinding.\n","sig":null,"attributes":[{"value":"/ Proof-of-work nonce for query seed grinding.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":4577,"byte_end":4625,"line_start":62,"line_end":62,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":4753,"byte_end":4760,"line_start":68,"line_end":68,"column_start":12,"column_end":19},"name":"options","qualname":"<StarkProof>::options","value":"pub fn options(&Self) -> &ProofOptions","parent":null,"children":[],"decl_id":null,"docs":" Returns STARK protocol parameters used to generate this proof.\n","sig":null,"attributes":[{"value":"/ Returns STARK protocol parameters used to generate this proof.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":4675,"byte_end":4741,"line_start":67,"line_end":67,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":4910,"byte_end":4922,"line_start":73,"line_end":73,"column_start":12,"column_end":24},"name":"trace_length","qualname":"<StarkProof>::trace_length","value":"pub fn trace_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns trace length for the computation described by this proof.\n","sig":null,"attributes":[{"value":"/ Returns trace length for the computation described by this proof.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":4829,"byte_end":4898,"line_start":72,"line_end":72,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":5068,"byte_end":5079,"line_start":78,"line_end":78,"column_start":12,"column_end":23},"name":"trace_width","qualname":"<StarkProof>::trace_width","value":"pub fn trace_width(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns trace width for the computation described by this proof.\n","sig":null,"attributes":[{"value":"/ Returns trace width for the computation described by this proof.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":4988,"byte_end":5056,"line_start":77,"line_end":77,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":5223,"byte_end":5237,"line_start":83,"line_end":83,"column_start":12,"column_end":26},"name":"get_trace_info","qualname":"<StarkProof>::get_trace_info","value":"pub fn get_trace_info(&Self) -> TraceInfo","parent":null,"children":[],"decl_id":null,"docs":" Returns trace info for the computation described by this proof.\n","sig":null,"attributes":[{"value":"/ Returns trace info for the computation described by this proof.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":5144,"byte_end":5211,"line_start":82,"line_end":82,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":5404,"byte_end":5419,"line_start":88,"line_end":88,"column_start":12,"column_end":27},"name":"lde_domain_size","qualname":"<StarkProof>::lde_domain_size","value":"pub fn lde_domain_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the size of the LDE domain for the computation described by this proof.\n","sig":null,"attributes":[{"value":"/ Returns the size of the LDE domain for the computation described by this proof.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":5309,"byte_end":5392,"line_start":87,"line_end":87,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":5994,"byte_end":6008,"line_start":100,"line_end":100,"column_start":12,"column_end":26},"name":"security_level","qualname":"<StarkProof>::security_level","value":"pub fn security_level(&Self, bool) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns security level of this proof (in bits).","sig":null,"attributes":[{"value":"/ Returns security level of this proof (in bits).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":5610,"byte_end":5661,"line_start":94,"line_end":94,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":5666,"byte_end":5669,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ When `conjectured` is true, conjectured security level is returned; otherwise, provable","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":5674,"byte_end":5765,"line_start":96,"line_end":96,"column_start":5,"column_end":96}},{"value":"/ security level is returned. Usually, the number of queries needed for provable security is","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":5770,"byte_end":5864,"line_start":97,"line_end":97,"column_start":5,"column_end":99}},{"value":"/ 2x - 3x higher than the number of queries needed for conjectured security at the same","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":5869,"byte_end":5958,"line_start":98,"line_end":98,"column_start":5,"column_end":94}},{"value":"/ security level.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":5963,"byte_end":5982,"line_start":99,"line_end":99,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":6640,"byte_end":6648,"line_start":117,"line_end":117,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<StarkProof>::to_bytes","value":"pub fn to_bytes(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Serializes this proof into a vector of bytes.\n","sig":null,"attributes":[{"value":"/ Serializes this proof into a vector of bytes.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":6579,"byte_end":6628,"line_start":116,"line_end":116,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":7289,"byte_end":7299,"line_start":133,"line_end":133,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<StarkProof>::from_bytes","value":"pub fn from_bytes(&[u8]) -> Result<Self, DeserializationError>","parent":null,"children":[],"decl_id":null,"docs":" Returns a STARK proof read from the specified `source`.","sig":null,"attributes":[{"value":"/ Returns a STARK proof read from the specified `source`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":7098,"byte_end":7157,"line_start":129,"line_end":129,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":7162,"byte_end":7165,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":7170,"byte_end":7182,"line_start":131,"line_end":131,"column_start":5,"column_end":17}},{"value":"/ Returns an error of a valid STARK proof could not be read from the specified `source`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":7187,"byte_end":7277,"line_start":132,"line_end":132,"column_start":5,"column_end":95}}]},{"kind":"TupleVariant","id":{"krate":0,"index":797},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/errors.rs","byte_start":33202,"byte_end":33220,"line_start":15,"line_end":15,"column_start":5,"column_end":23},"name":"TraceWidthTooShort","qualname":"::errors::AssertionError::TraceWidthTooShort","value":"AssertionError::TraceWidthTooShort(usize, usize)","parent":{"krate":0,"index":796},"children":[],"decl_id":null,"docs":" This error occurs when an assertion is evaluated against an execution trace which does not\n contain a register specified by the assertion.\n","sig":null,"attributes":[{"value":"/ This error occurs when an assertion is evaluated against an execution trace which does not","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/errors.rs","byte_start":33048,"byte_end":33142,"line_start":13,"line_end":13,"column_start":5,"column_end":99}},{"value":"/ contain a register specified by the assertion.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/errors.rs","byte_start":33147,"byte_end":33197,"line_start":14,"line_end":14,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":801},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/errors.rs","byte_start":33373,"byte_end":33397,"line_start":18,"line_end":18,"column_start":5,"column_end":29},"name":"TraceLengthNotPowerOfTwo","qualname":"::errors::AssertionError::TraceLengthNotPowerOfTwo","value":"AssertionError::TraceLengthNotPowerOfTwo(usize)","parent":{"krate":0,"index":796},"children":[],"decl_id":null,"docs":" This error occurs when an assertion is evaluated against an execution trace with length\n which is not a power of two.\n","sig":null,"attributes":[{"value":"/ This error occurs when an assertion is evaluated against an execution trace with length","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/errors.rs","byte_start":33240,"byte_end":33331,"line_start":16,"line_end":16,"column_start":5,"column_end":96}},{"value":"/ which is not a power of two.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/errors.rs","byte_start":33336,"byte_end":33368,"line_start":17,"line_end":17,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":804},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/errors.rs","byte_start":33571,"byte_end":33590,"line_start":21,"line_end":21,"column_start":5,"column_end":24},"name":"TraceLengthTooShort","qualname":"::errors::AssertionError::TraceLengthTooShort","value":"AssertionError::TraceLengthTooShort(usize, usize)","parent":{"krate":0,"index":796},"children":[],"decl_id":null,"docs":" This error occurs when an assertion is evaluated against an execution trace which does not\n contain a step against which the assertion is placed.\n","sig":null,"attributes":[{"value":"/ This error occurs when an assertion is evaluated against an execution trace which does not","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/errors.rs","byte_start":33410,"byte_end":33504,"line_start":19,"line_end":19,"column_start":5,"column_end":99}},{"value":"/ contain a step against which the assertion is placed.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/errors.rs","byte_start":33509,"byte_end":33566,"line_start":20,"line_end":20,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":808},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/errors.rs","byte_start":33785,"byte_end":33804,"line_start":24,"line_end":24,"column_start":5,"column_end":24},"name":"TraceLengthNotExact","qualname":"::errors::AssertionError::TraceLengthNotExact","value":"AssertionError::TraceLengthNotExact(usize, usize)","parent":{"krate":0,"index":796},"children":[],"decl_id":null,"docs":" This error occurs when a `Sequence` assertion is placed against an execution trace with\n length which conflicts with the trace length implied by the assertion.\n","sig":null,"attributes":[{"value":"/ This error occurs when a `Sequence` assertion is placed against an execution trace with","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/errors.rs","byte_start":33610,"byte_end":33701,"line_start":22,"line_end":22,"column_start":5,"column_end":96}},{"value":"/ length which conflicts with the trace length implied by the assertion.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/errors.rs","byte_start":33706,"byte_end":33780,"line_start":23,"line_end":23,"column_start":5,"column_end":79}}]},{"kind":"Enum","id":{"krate":0,"index":796},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/errors.rs","byte_start":33027,"byte_end":33041,"line_start":12,"line_end":12,"column_start":10,"column_end":24},"name":"AssertionError","qualname":"::errors::AssertionError","value":"pub enum AssertionError {\n    TraceWidthTooShort(usize, usize),\n    TraceLengthNotPowerOfTwo(usize),\n    TraceLengthTooShort(usize, usize),\n    TraceLengthNotExact(usize, usize),\n}","parent":null,"children":[{"krate":0,"index":797},{"krate":0,"index":801},{"krate":0,"index":804},{"krate":0,"index":808}],"decl_id":null,"docs":" Represents an error returned during assertion evaluation.\n","sig":null,"attributes":[{"value":"/ Represents an error returned during assertion evaluation.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/errors.rs","byte_start":32928,"byte_end":32989,"line_start":10,"line_end":10,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":820},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":35646,"byte_end":35656,"line_start":24,"line_end":24,"column_start":5,"column_end":15},"name":"Blake3_192","qualname":"::options::HashFunction::Blake3_192","value":"HashFunction::Blake3_192","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" BLAKE3 hash function with 192 bit output.","sig":null,"attributes":[{"value":"/ BLAKE3 hash function with 192 bit output.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":35492,"byte_end":35537,"line_start":21,"line_end":21,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":35542,"byte_end":35545,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ When this function is used in the STARK protocol, proof security cannot exceed 96 bits.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":35550,"byte_end":35641,"line_start":23,"line_end":23,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":823},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":35822,"byte_end":35832,"line_start":29,"line_end":29,"column_start":5,"column_end":15},"name":"Blake3_256","qualname":"::options::HashFunction::Blake3_256","value":"HashFunction::Blake3_256","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" BLAKE3 hash function with 256 bit output.","sig":null,"attributes":[{"value":"/ BLAKE3 hash function with 256 bit output.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":35667,"byte_end":35712,"line_start":26,"line_end":26,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":35717,"byte_end":35720,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ When this function is used in the STARK protocol, proof security cannot exceed 128 bits.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":35725,"byte_end":35817,"line_start":28,"line_end":28,"column_start":5,"column_end":97}}]},{"kind":"TupleVariant","id":{"krate":0,"index":826},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":35996,"byte_end":36004,"line_start":34,"line_end":34,"column_start":5,"column_end":13},"name":"Sha3_256","qualname":"::options::HashFunction::Sha3_256","value":"HashFunction::Sha3_256","parent":{"krate":0,"index":819},"children":[],"decl_id":null,"docs":" SHA3 hash function with 256 bit output.","sig":null,"attributes":[{"value":"/ SHA3 hash function with 256 bit output.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":35843,"byte_end":35886,"line_start":31,"line_end":31,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":35891,"byte_end":35894,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ When this function is used in the STARK protocol, proof security cannot exceed 128 bits.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":35899,"byte_end":35991,"line_start":33,"line_end":33,"column_start":5,"column_end":97}}]},{"kind":"Enum","id":{"krate":0,"index":819},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":35473,"byte_end":35485,"line_start":20,"line_end":20,"column_start":10,"column_end":22},"name":"HashFunction","qualname":"::options::HashFunction","value":"pub enum HashFunction { Blake3_192 = , Blake3_256 = , Sha3_256 = , }","parent":null,"children":[{"krate":0,"index":820},{"krate":0,"index":823},{"krate":0,"index":826}],"decl_id":null,"docs":" Defines a set of available hash function for STARK protocol.","sig":null,"attributes":[{"value":"/ Defines a set of available hash function for STARK protocol.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":35107,"byte_end":35171,"line_start":13,"line_end":13,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":35172,"byte_end":35175,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Choice of a hash function has a direct impact on proof generation time, proof size, and proof","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":35176,"byte_end":35273,"line_start":15,"line_end":15,"column_start":1,"column_end":98}},{"value":"/ soundness. In general, sounds of the proof is bounded by the collision resistance of the hash","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":35274,"byte_end":35371,"line_start":16,"line_end":16,"column_start":1,"column_end":98}},{"value":"/ function used by the protocol.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":35372,"byte_end":35406,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"repr(u8)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":35407,"byte_end":35418,"line_start":18,"line_end":18,"column_start":1,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":841},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":36897,"byte_end":36901,"line_start":54,"line_end":54,"column_start":5,"column_end":9},"name":"None","qualname":"::options::FieldExtension::None","value":"FieldExtension::None","parent":{"krate":0,"index":840},"children":[],"decl_id":null,"docs":" Composition polynomial is constructed in the base field.\n","sig":null,"attributes":[{"value":"/ Composition polynomial is constructed in the base field.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":36832,"byte_end":36892,"line_start":53,"line_end":53,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":844},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":37003,"byte_end":37012,"line_start":56,"line_end":56,"column_start":5,"column_end":14},"name":"Quadratic","qualname":"::options::FieldExtension::Quadratic","value":"FieldExtension::Quadratic","parent":{"krate":0,"index":840},"children":[],"decl_id":null,"docs":" Composition polynomial is constructed in the quadratic extension of the base field.\n","sig":null,"attributes":[{"value":"/ Composition polynomial is constructed in the quadratic extension of the base field.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":36911,"byte_end":36998,"line_start":55,"line_end":55,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":847},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":37110,"byte_end":37115,"line_start":58,"line_end":58,"column_start":5,"column_end":10},"name":"Cubic","qualname":"::options::FieldExtension::Cubic","value":"FieldExtension::Cubic","parent":{"krate":0,"index":840},"children":[],"decl_id":null,"docs":" Composition polynomial is constructed in the cubic extension of the base field.\n","sig":null,"attributes":[{"value":"/ Composition polynomial is constructed in the cubic extension of the base field.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":37022,"byte_end":37105,"line_start":57,"line_end":57,"column_start":5,"column_end":88}}]},{"kind":"Enum","id":{"krate":0,"index":840},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":36811,"byte_end":36825,"line_start":52,"line_end":52,"column_start":10,"column_end":24},"name":"FieldExtension","qualname":"::options::FieldExtension","value":"pub enum FieldExtension { None = , Quadratic = , Cubic = , }","parent":null,"children":[{"krate":0,"index":841},{"krate":0,"index":844},{"krate":0,"index":847}],"decl_id":null,"docs":" Defines an extension field for the composition polynomial.","sig":null,"attributes":[{"value":"/ Defines an extension field for the composition polynomial.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":36013,"byte_end":36075,"line_start":37,"line_end":37,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":36076,"byte_end":36079,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Choice of a field for a composition polynomial may impact proof soundness, and can also have","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":36080,"byte_end":36176,"line_start":39,"line_end":39,"column_start":1,"column_end":97}},{"value":"/ a non-negligible impact on proof generation time and proof size. Specifically, for small","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":36177,"byte_end":36269,"line_start":40,"line_end":40,"column_start":1,"column_end":93}},{"value":"/ fields, security offered by the base field itself may be inadequate or insufficient, and an","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":36270,"byte_end":36365,"line_start":41,"line_end":41,"column_start":1,"column_end":96}},{"value":"/ extension of the base field may need to be used.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":36366,"byte_end":36418,"line_start":42,"line_end":42,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":36419,"byte_end":36422,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ For example, if the size of base field is ~64-bits, a quadratic extension must be use to","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":36423,"byte_end":36515,"line_start":44,"line_end":44,"column_start":1,"column_end":93}},{"value":"/ achieve ~100 bits of soundness, and a cubic extension must be used to achieve 128+ bits","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":36516,"byte_end":36607,"line_start":45,"line_end":45,"column_start":1,"column_end":92}},{"value":"/ of soundness.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":36608,"byte_end":36625,"line_start":46,"line_end":46,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":36626,"byte_end":36629,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ However, increasing extension degree will increase proof generation time and proof size by","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":36630,"byte_end":36724,"line_start":48,"line_end":48,"column_start":1,"column_end":95}},{"value":"/ as much as 50%.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":36725,"byte_end":36744,"line_start":49,"line_end":49,"column_start":1,"column_end":20}},{"value":"repr(u8)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":36745,"byte_end":36756,"line_start":50,"line_end":50,"column_start":1,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":861},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":38635,"byte_end":38647,"line_start":82,"line_end":82,"column_start":12,"column_end":24},"name":"ProofOptions","qualname":"::options::ProofOptions","value":"ProofOptions {  }","parent":null,"children":[{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868}],"decl_id":null,"docs":" STARK protocol parameters.","sig":null,"attributes":[{"value":"/ STARK protocol parameters.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":37124,"byte_end":37154,"line_start":61,"line_end":61,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":37155,"byte_end":37158,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ These parameters have a direct impact on proof soundness, proof generation time, and proof","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":37159,"byte_end":37253,"line_start":63,"line_end":63,"column_start":1,"column_end":95}},{"value":"/ size. Specifically:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":37254,"byte_end":37277,"line_start":64,"line_end":64,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":37278,"byte_end":37281,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ 1. Hash function - proof soundness is limited by the collision resistance of the hash function","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":37282,"byte_end":37380,"line_start":66,"line_end":66,"column_start":1,"column_end":99}},{"value":"/    used by the protocol. For example, if a hash function with 128-bit collision resistance is","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":37381,"byte_end":37478,"line_start":67,"line_end":67,"column_start":1,"column_end":98}},{"value":"/    used, soundness of a STARK proof cannot exceed 128 bits.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":37479,"byte_end":37542,"line_start":68,"line_end":68,"column_start":1,"column_end":64}},{"value":"/ 2. Finite field - proof soundness depends on the size of finite field used by the protocol.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":37543,"byte_end":37638,"line_start":69,"line_end":69,"column_start":1,"column_end":96}},{"value":"/    This means, that for small fields (e.g. smaller than ~128 bits), field extensions must be","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":37639,"byte_end":37735,"line_start":70,"line_end":70,"column_start":1,"column_end":97}},{"value":"/    used to achieve adequate security. And even for ~128 bit fields, to achieve security over","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":37736,"byte_end":37832,"line_start":71,"line_end":71,"column_start":1,"column_end":97}},{"value":"/    100 bits, a field extension may be required.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":37833,"byte_end":37884,"line_start":72,"line_end":72,"column_start":1,"column_end":52}},{"value":"/ 3. Number of queries - higher values increase proof soundness, but also increase proof size.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":37885,"byte_end":37981,"line_start":73,"line_end":73,"column_start":1,"column_end":97}},{"value":"/ 4. Blowup factor - higher values increase proof soundness, but also increase proof generation","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":37982,"byte_end":38079,"line_start":74,"line_end":74,"column_start":1,"column_end":98}},{"value":"/    time and proof size. However, higher blowup factors require fewer queries for the same","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":38080,"byte_end":38173,"line_start":75,"line_end":75,"column_start":1,"column_end":94}},{"value":"/    security level. Thus, it is frequently possible to increase blowup factor and at the same","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":38174,"byte_end":38270,"line_start":76,"line_end":76,"column_start":1,"column_end":97}},{"value":"/    time decrease the number of queries in such a way that the proofs become smaller.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":38271,"byte_end":38359,"line_start":77,"line_end":77,"column_start":1,"column_end":89}},{"value":"/ 5. Grinding factor - higher values increase proof soundness, but also may increase proof","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":38360,"byte_end":38452,"line_start":78,"line_end":78,"column_start":1,"column_end":93}},{"value":"/    generation time. More precisely, proof soundness is bounded by","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":38453,"byte_end":38522,"line_start":79,"line_end":79,"column_start":1,"column_end":70}},{"value":"/    `num_queries * log2(blowup_factor) + grinding_factor`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":38523,"byte_end":38584,"line_start":80,"line_end":80,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":39658,"byte_end":39661,"line_start":107,"line_end":107,"column_start":12,"column_end":15},"name":"new","qualname":"<ProofOptions>::new","value":"pub fn new(usize, usize, u32, HashFunction, FieldExtension, usize, usize)\n-> ProofOptions","parent":null,"children":[],"decl_id":null,"docs":" Returns a new instance of [ProofOptions] struct constructed from the specified parameters.","sig":null,"attributes":[{"value":"/ Returns a new instance of [ProofOptions] struct constructed from the specified parameters.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":39146,"byte_end":39240,"line_start":97,"line_end":97,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":39245,"byte_end":39248,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":39253,"byte_end":39265,"line_start":99,"line_end":99,"column_start":5,"column_end":17}},{"value":"/ Panics if:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":39270,"byte_end":39284,"line_start":100,"line_end":100,"column_start":5,"column_end":19}},{"value":"/ * `num_queries` is zero or greater than 128.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":39289,"byte_end":39337,"line_start":101,"line_end":101,"column_start":5,"column_end":53}},{"value":"/ * `blowup_factor` is smaller than 4, greater than 256, or is not a power of two.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":39342,"byte_end":39426,"line_start":102,"line_end":102,"column_start":5,"column_end":89}},{"value":"/ * `grinding_factor` is greater than 32.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":39431,"byte_end":39474,"line_start":103,"line_end":103,"column_start":5,"column_end":48}},{"value":"/ * `fri_folding_factor` is not 4, 8, or 16.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":39479,"byte_end":39525,"line_start":104,"line_end":104,"column_start":5,"column_end":51}},{"value":"/ * `fri_max_remainder_size` is smaller than 32, greater than 1024, or is not a power of two.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":39530,"byte_end":39625,"line_start":105,"line_end":105,"column_start":5,"column_end":100}},{"value":"rustfmt::skip","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":39630,"byte_end":39646,"line_start":106,"line_end":106,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":41843,"byte_end":41854,"line_start":153,"line_end":153,"column_start":12,"column_end":23},"name":"num_queries","qualname":"<ProofOptions>::num_queries","value":"pub fn num_queries(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns number of queries for a STARK proof.","sig":null,"attributes":[{"value":"/ Returns number of queries for a STARK proof.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":41566,"byte_end":41614,"line_start":148,"line_end":148,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":41619,"byte_end":41622,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ This directly impacts proof soundness as each additional query adds roughly","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":41627,"byte_end":41706,"line_start":150,"line_end":150,"column_start":5,"column_end":84}},{"value":"/ `log2(blowup_factor)` bits of security to a proof. However, each additional query also","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":41711,"byte_end":41801,"line_start":151,"line_end":151,"column_start":5,"column_end":95}},{"value":"/ increases proof size.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":41806,"byte_end":41831,"line_start":152,"line_end":152,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":42320,"byte_end":42333,"line_start":163,"line_end":163,"column_start":12,"column_end":25},"name":"blowup_factor","qualname":"<ProofOptions>::blowup_factor","value":"pub fn blowup_factor(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns trace blowup factor for a STARK proof.","sig":null,"attributes":[{"value":"/ Returns trace blowup factor for a STARK proof.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":41918,"byte_end":41968,"line_start":157,"line_end":157,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":41973,"byte_end":41976,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ This is the factor by which the execution trace is extended during low-degree extension. It","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":41981,"byte_end":42076,"line_start":159,"line_end":159,"column_start":5,"column_end":100}},{"value":"/ has a direct impact on proof soundness as each query adds roughly `log2(blowup_factor)`","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":42081,"byte_end":42172,"line_start":160,"line_end":160,"column_start":5,"column_end":96}},{"value":"/ bits of security to a proof. However, higher blowup factors also increases prover runtime,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":42177,"byte_end":42271,"line_start":161,"line_end":161,"column_start":5,"column_end":99}},{"value":"/ and may increase proof size.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":42276,"byte_end":42308,"line_start":162,"line_end":162,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":42900,"byte_end":42915,"line_start":174,"line_end":174,"column_start":12,"column_end":27},"name":"grinding_factor","qualname":"<ProofOptions>::grinding_factor","value":"pub fn grinding_factor(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns query seed grinding factor for a STARK proof.","sig":null,"attributes":[{"value":"/ Returns query seed grinding factor for a STARK proof.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":42399,"byte_end":42456,"line_start":167,"line_end":167,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":42461,"byte_end":42464,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ Grinding applies Proof-of-Work/ to the query position seed. An honest prover needs to","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":42469,"byte_end":42558,"line_start":169,"line_end":169,"column_start":5,"column_end":94}},{"value":"/ perform this work only once, while a dishonest prover will need to perform it every time","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":42563,"byte_end":42655,"line_start":170,"line_end":170,"column_start":5,"column_end":97}},{"value":"/ they try to change a commitment. Thus, higher grinding factor makes it more difficult to","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":42660,"byte_end":42752,"line_start":171,"line_end":171,"column_start":5,"column_end":97}},{"value":"/ forge a STARK proof. However, setting grinding factor too high (e.g. higher than 20) will","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":42757,"byte_end":42850,"line_start":172,"line_end":172,"column_start":5,"column_end":98}},{"value":"/ adversely affect prover time.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":42855,"byte_end":42888,"line_start":173,"line_end":173,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":43371,"byte_end":43378,"line_start":184,"line_end":184,"column_start":12,"column_end":19},"name":"hash_fn","qualname":"<ProofOptions>::hash_fn","value":"pub fn hash_fn(&Self) -> HashFunction","parent":null,"children":[],"decl_id":null,"docs":" Returns a hash functions to be used during STARK proof construction.","sig":null,"attributes":[{"value":"/ Returns a hash functions to be used during STARK proof construction.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":42979,"byte_end":43051,"line_start":178,"line_end":178,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":43056,"byte_end":43059,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Security of a STARK proof is bounded by collision resistance of the hash function used","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":43064,"byte_end":43154,"line_start":180,"line_end":180,"column_start":5,"column_end":95}},{"value":"/ during proof construction. For example, if collision resistance of a hash function is","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":43159,"byte_end":43248,"line_start":181,"line_end":181,"column_start":5,"column_end":94}},{"value":"/ 128 bits, then soundness of a proof generated using this hash function cannot exceed","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":43253,"byte_end":43341,"line_start":182,"line_end":182,"column_start":5,"column_end":93}},{"value":"/ 128 bits.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":43346,"byte_end":43359,"line_start":183,"line_end":183,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":43714,"byte_end":43729,"line_start":193,"line_end":193,"column_start":12,"column_end":27},"name":"field_extension","qualname":"<ProofOptions>::field_extension","value":"pub fn field_extension(&Self) -> FieldExtension","parent":null,"children":[],"decl_id":null,"docs":" Specifies whether composition polynomial should be constructed in an extension field\n of STARK protocol.","sig":null,"attributes":[{"value":"/ Specifies whether composition polynomial should be constructed in an extension field","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":43436,"byte_end":43524,"line_start":188,"line_end":188,"column_start":5,"column_end":93}},{"value":"/ of STARK protocol.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":43529,"byte_end":43551,"line_start":189,"line_end":189,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":43556,"byte_end":43559,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ Using a field extension increases maximum security level of a proof, but also has","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":43564,"byte_end":43649,"line_start":191,"line_end":191,"column_start":5,"column_end":90}},{"value":"/ non-negligible impact on prover performance.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":43654,"byte_end":43702,"line_start":192,"line_end":192,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":44025,"byte_end":44038,"line_start":201,"line_end":201,"column_start":12,"column_end":25},"name":"domain_offset","qualname":"<ProofOptions>::domain_offset","value":"pub fn domain_offset<B: StarkField>(&Self) -> B","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset by which the low-degree extension domain is shifted in relation to the\n trace domain.","sig":null,"attributes":[{"value":"/ Returns the offset by which the low-degree extension domain is shifted in relation to the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":43797,"byte_end":43890,"line_start":197,"line_end":197,"column_start":5,"column_end":98}},{"value":"/ trace domain.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":43895,"byte_end":43912,"line_start":198,"line_end":198,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":43917,"byte_end":43920,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ Currently, this is hard-coded to the primitive element of the underlying base field.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":43925,"byte_end":44013,"line_start":200,"line_end":200,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":44202,"byte_end":44216,"line_start":206,"line_end":206,"column_start":12,"column_end":26},"name":"to_fri_options","qualname":"<ProofOptions>::to_fri_options","value":"pub fn to_fri_options(&Self) -> FriOptions","parent":null,"children":[],"decl_id":null,"docs":" Returns options for FRI protocol instantiated with parameters from this proof options.\n","sig":null,"attributes":[{"value":"/ Returns options for FRI protocol instantiated with parameters from this proof options.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":44100,"byte_end":44190,"line_start":205,"line_end":205,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":45888,"byte_end":45895,"line_start":249,"line_end":249,"column_start":12,"column_end":19},"name":"is_none","qualname":"<FieldExtension>::is_none","value":"pub fn is_none(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this field extension is set to `None`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this field extension is set to `None`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":45816,"byte_end":45876,"line_start":248,"line_end":248,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":46024,"byte_end":46030,"line_start":254,"line_end":254,"column_start":12,"column_end":18},"name":"degree","qualname":"<FieldExtension>::degree","value":"pub fn degree(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns extension degree of this field extension.\n","sig":null,"attributes":[{"value":"/ Returns extension degree of this field extension.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":45959,"byte_end":46012,"line_start":253,"line_end":253,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":47197,"byte_end":47217,"line_start":290,"line_end":290,"column_start":12,"column_end":32},"name":"collision_resistance","qualname":"<HashFunction>::collision_resistance","value":"pub fn collision_resistance(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns collision resistance of this hash function in bits.\n","sig":null,"attributes":[{"value":"/ Returns collision resistance of this hash function in bits.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":47122,"byte_end":47185,"line_start":289,"line_end":289,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":881},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":74533,"byte_end":74542,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"TraceInfo","qualname":"::air::trace_info::TraceInfo","value":"TraceInfo {  }","parent":null,"children":[{"krate":0,"index":882},{"krate":0,"index":883},{"krate":0,"index":884}],"decl_id":null,"docs":" Information about a specific execution trace.","sig":null,"attributes":[{"value":"/ Information about a specific execution trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":74267,"byte_end":74316,"line_start":10,"line_end":10,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":74317,"byte_end":74320,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Trace info consists of trace width, length, and optional custom metadata. Metadata is just a","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":74321,"byte_end":74417,"line_start":12,"line_end":12,"column_start":1,"column_end":97}},{"value":"/ vector of bytes and can store any values up to 64KB in size.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":74418,"byte_end":74482,"line_start":13,"line_end":13,"column_start":1,"column_end":65}}]},{"kind":"Const","id":{"krate":0,"index":370},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":74704,"byte_end":74720,"line_start":23,"line_end":23,"column_start":15,"column_end":31},"name":"MIN_TRACE_LENGTH","qualname":"::air::trace_info::TraceInfo::MIN_TRACE_LENGTH","value":"usize","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Smallest allowed execution trace length; currently set at 8.\n","sig":null,"attributes":[{"value":"/ Smallest allowed execution trace length; currently set at 8.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":74625,"byte_end":74689,"line_start":22,"line_end":22,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":371},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":74828,"byte_end":74843,"line_start":25,"line_end":25,"column_start":15,"column_end":30},"name":"MAX_TRACE_WIDTH","qualname":"::air::trace_info::TraceInfo::MAX_TRACE_WIDTH","value":"usize","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Maximum number of registers in an execution trace; currently set at 255.\n","sig":null,"attributes":[{"value":"/ Maximum number of registers in an execution trace; currently set at 255.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":74737,"byte_end":74813,"line_start":24,"line_end":24,"column_start":5,"column_end":81}}]},{"kind":"Const","id":{"krate":0,"index":372},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":74947,"byte_end":74962,"line_start":27,"line_end":27,"column_start":15,"column_end":30},"name":"MAX_META_LENGTH","qualname":"::air::trace_info::TraceInfo::MAX_META_LENGTH","value":"usize","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Maximum number of bytes in trace metadata; currently set at 65535.\n","sig":null,"attributes":[{"value":"/ Maximum number of bytes in trace metadata; currently set at 65535.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":74862,"byte_end":74932,"line_start":26,"line_end":26,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":75326,"byte_end":75329,"line_start":38,"line_end":38,"column_start":12,"column_end":15},"name":"new","qualname":"<TraceInfo>::new","value":"pub fn new(usize, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new trace info from the specified length.","sig":null,"attributes":[{"value":"/ Creates a new trace info from the specified length.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":75105,"byte_end":75160,"line_start":32,"line_end":32,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":75165,"byte_end":75168,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":75173,"byte_end":75185,"line_start":34,"line_end":34,"column_start":5,"column_end":17}},{"value":"/ Panics if:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":75190,"byte_end":75204,"line_start":35,"line_end":35,"column_start":5,"column_end":19}},{"value":"/ * `width` is zero or greater than 255.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":75209,"byte_end":75251,"line_start":36,"line_end":36,"column_start":5,"column_end":47}},{"value":"/ * `length` is smaller than 8 or is not a power of two.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":75256,"byte_end":75314,"line_start":37,"line_end":37,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":75711,"byte_end":75720,"line_start":49,"line_end":49,"column_start":12,"column_end":21},"name":"with_meta","qualname":"<TraceInfo>::with_meta","value":"pub fn with_meta(usize, usize, Vec<u8>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new trace info from the specified length and metadata.","sig":null,"attributes":[{"value":"/ Creates a new trace info from the specified length and metadata.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":75427,"byte_end":75495,"line_start":42,"line_end":42,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":75500,"byte_end":75503,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":75508,"byte_end":75520,"line_start":44,"line_end":44,"column_start":5,"column_end":17}},{"value":"/ Panics if:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":75525,"byte_end":75539,"line_start":45,"line_end":45,"column_start":5,"column_end":19}},{"value":"/ * `width` is zero or greater than 255.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":75544,"byte_end":75586,"line_start":46,"line_end":46,"column_start":5,"column_end":47}},{"value":"/ * `length` is smaller than 8 or is not a power of two.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":75591,"byte_end":75649,"line_start":47,"line_end":47,"column_start":5,"column_end":63}},{"value":"/ * Length of `meta` is greater than 65535;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":75654,"byte_end":75699,"line_start":48,"line_end":48,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":76910,"byte_end":76915,"line_start":87,"line_end":87,"column_start":12,"column_end":17},"name":"width","qualname":"<TraceInfo>::width","value":"pub fn width(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns execution trace width;","sig":null,"attributes":[{"value":"/ Returns execution trace width;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":76804,"byte_end":76838,"line_start":84,"line_end":84,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":76843,"byte_end":76846,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ This is guaranteed to be between 1 and 255.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":76851,"byte_end":76898,"line_start":86,"line_end":86,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":77074,"byte_end":77080,"line_start":94,"line_end":94,"column_start":12,"column_end":18},"name":"length","qualname":"<TraceInfo>::length","value":"pub fn length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns execution trace length.","sig":null,"attributes":[{"value":"/ Returns execution trace length.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":76964,"byte_end":76999,"line_start":91,"line_end":91,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":77004,"byte_end":77007,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ The length is guaranteed to be a power of two.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":77012,"byte_end":77062,"line_start":93,"line_end":93,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":77179,"byte_end":77183,"line_start":99,"line_end":99,"column_start":12,"column_end":16},"name":"meta","qualname":"<TraceInfo>::meta","value":"pub fn meta(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns execution trace metadata.\n","sig":null,"attributes":[{"value":"/ Returns execution trace metadata.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":77130,"byte_end":77167,"line_start":98,"line_end":98,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":896},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/context.rs","byte_start":77786,"byte_end":77796,"line_start":14,"line_end":14,"column_start":12,"column_end":22},"name":"AirContext","qualname":"::air::context::AirContext","value":"AirContext {  }","parent":null,"children":[{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":903}],"decl_id":null,"docs":" STARK parameters and trace properties for a specific execution of a computation.\n","sig":null,"attributes":[{"value":"/ STARK parameters and trace properties for a specific execution of a computation.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/context.rs","byte_start":77658,"byte_end":77742,"line_start":12,"line_end":12,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/context.rs","byte_start":78768,"byte_end":78771,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<AirContext<B>>::new","value":"pub fn new(TraceInfo, Vec<TransitionConstraintDegree>, ProofOptions) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new instance of [AirContext] instantiated from the specified parameters.","sig":null,"attributes":[{"value":"/ Returns a new instance of [AirContext] instantiated from the specified parameters.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/context.rs","byte_start":78254,"byte_end":78340,"line_start":26,"line_end":26,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/context.rs","byte_start":78345,"byte_end":78348,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ The list of transition constraint degrees defines the total number of transition","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/context.rs","byte_start":78353,"byte_end":78437,"line_start":28,"line_end":28,"column_start":5,"column_end":89}},{"value":"/ constraints and their expected degrees. Constraint evaluations computed by","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/context.rs","byte_start":78442,"byte_end":78520,"line_start":29,"line_end":29,"column_start":5,"column_end":83}},{"value":"/ [Air::evaluate_transition()](crate::Air::evaluate_transition) function are expected to be","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/context.rs","byte_start":78525,"byte_end":78618,"line_start":30,"line_end":30,"column_start":5,"column_end":98}},{"value":"/ in the order defined by this list.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/context.rs","byte_start":78623,"byte_end":78661,"line_start":31,"line_end":31,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/context.rs","byte_start":78666,"byte_end":78669,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/context.rs","byte_start":78674,"byte_end":78686,"line_start":33,"line_end":33,"column_start":5,"column_end":17}},{"value":"/ Panics if `transition_constraint_degrees` is an empty vector.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/context.rs","byte_start":78691,"byte_end":78756,"line_start":34,"line_end":34,"column_start":5,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":918},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":82471,"byte_end":82480,"line_start":49,"line_end":49,"column_start":12,"column_end":21},"name":"Assertion","qualname":"::air::assertions::Assertion","value":"Assertion {  }","parent":null,"children":[{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":923}],"decl_id":null,"docs":" An assertion made against an execution trace.","sig":null,"attributes":[{"value":"/ An assertion made against an execution trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":80818,"byte_end":80867,"line_start":26,"line_end":26,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":80868,"byte_end":80871,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ An assertion is always placed against a single register of an execution trace, but can cover","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":80872,"byte_end":80968,"line_start":28,"line_end":28,"column_start":1,"column_end":97}},{"value":"/ multiple steps and multiple values. Specifically, there are three kinds of assertions:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":80969,"byte_end":81059,"line_start":29,"line_end":29,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":81060,"byte_end":81063,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ 1. **Single** assertion - which requires that a value in a single cell of an execution trace","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":81064,"byte_end":81160,"line_start":31,"line_end":31,"column_start":1,"column_end":97}},{"value":"/    is equal to the specified value.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":81161,"byte_end":81200,"line_start":32,"line_end":32,"column_start":1,"column_end":40}},{"value":"/ 2. **Periodic** assertion - which requires that values in multiple cells of a single register","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":81201,"byte_end":81298,"line_start":33,"line_end":33,"column_start":1,"column_end":98}},{"value":"/   are equal to the specified value. The cells must be evenly spaced at intervals with lengths","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":81299,"byte_end":81396,"line_start":34,"line_end":34,"column_start":1,"column_end":98}},{"value":"/   equal to powers of two. For example, we can specify that values in a register must be equal","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":81397,"byte_end":81494,"line_start":35,"line_end":35,"column_start":1,"column_end":98}},{"value":"/   to 0 at steps 0, 8, 16, 24, 32 etc. Steps can also start at some offset - e.g., 1, 9, 17,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":81495,"byte_end":81590,"line_start":36,"line_end":36,"column_start":1,"column_end":96}},{"value":"/   25, 33 is also a valid sequence of steps.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":81591,"byte_end":81638,"line_start":37,"line_end":37,"column_start":1,"column_end":48}},{"value":"/ 3. **Sequence** assertion - which requires that multiple cells in a single register are equal","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":81639,"byte_end":81736,"line_start":38,"line_end":38,"column_start":1,"column_end":98}},{"value":"/   to the values from the provided list. The cells must be evenly spaced at intervals with","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":81737,"byte_end":81830,"line_start":39,"line_end":39,"column_start":1,"column_end":94}},{"value":"/   lengths equal to powers of two. For example, we can specify that values in a register must","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":81831,"byte_end":81927,"line_start":40,"line_end":40,"column_start":1,"column_end":97}},{"value":"/   be equal to a sequence 1, 2, 3, 4 at steps 0, 8, 16, 24. That is, value at step 0 should be","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":81928,"byte_end":82025,"line_start":41,"line_end":41,"column_start":1,"column_end":98}},{"value":"/   equal to 1, value at step 8 should be equal to 2 etc.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":82026,"byte_end":82085,"line_start":42,"line_end":42,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":82086,"byte_end":82089,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Note that single and periodic assertions are succinct. That is, a verifier can evaluate them","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":82090,"byte_end":82186,"line_start":44,"line_end":44,"column_start":1,"column_end":97}},{"value":"/ very efficiently. However, sequence assertions have liner complexity in the number of","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":82187,"byte_end":82276,"line_start":45,"line_end":45,"column_start":1,"column_end":90}},{"value":"/ asserted values. Though, unless many thousands of values are asserted, practical impact of","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":82277,"byte_end":82371,"line_start":46,"line_end":46,"column_start":1,"column_end":95}},{"value":"/ this linear complexity should be negligible.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":82372,"byte_end":82420,"line_start":47,"line_end":47,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":83025,"byte_end":83031,"line_start":63,"line_end":63,"column_start":12,"column_end":18},"name":"single","qualname":"<Assertion<B>>::single","value":"pub fn single(usize, usize, B) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns an assertion against a single cell of an execution trace.","sig":null,"attributes":[{"value":"/ Returns an assertion against a single cell of an execution trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":82787,"byte_end":82856,"line_start":59,"line_end":59,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":82861,"byte_end":82864,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ The returned assertion requires that the value in the specified `register` at the specified","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":82869,"byte_end":82964,"line_start":61,"line_end":61,"column_start":5,"column_end":100}},{"value":"/ `step` is equal to the provided `value`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":82969,"byte_end":83013,"line_start":62,"line_end":62,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":83723,"byte_end":83731,"line_start":82,"line_end":82,"column_start":12,"column_end":20},"name":"periodic","qualname":"<Assertion<B>>::periodic","value":"pub fn periodic(usize, usize, usize, B) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns an single-value assertion against multiple cells of a single register.","sig":null,"attributes":[{"value":"/ Returns an single-value assertion against multiple cells of a single register.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":83239,"byte_end":83321,"line_start":72,"line_end":72,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":83326,"byte_end":83329,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ The returned assertion requires that values in the specified `register` must be equal to","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":83334,"byte_end":83426,"line_start":74,"line_end":74,"column_start":5,"column_end":97}},{"value":"/ the specified `value` at steps which start at `first_step` and repeat in equal intervals","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":83431,"byte_end":83523,"line_start":75,"line_end":75,"column_start":5,"column_end":97}},{"value":"/ specified by `stride`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":83528,"byte_end":83554,"line_start":76,"line_end":76,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":83559,"byte_end":83562,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":83567,"byte_end":83579,"line_start":78,"line_end":78,"column_start":5,"column_end":17}},{"value":"/ Panics if:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":83584,"byte_end":83598,"line_start":79,"line_end":79,"column_start":5,"column_end":19}},{"value":"/ * `stride` is not a power of two, or is smaller than 2.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":83603,"byte_end":83662,"line_start":80,"line_end":80,"column_start":5,"column_end":64}},{"value":"/ * `first_step` is greater than `stride`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":83667,"byte_end":83711,"line_start":81,"line_end":81,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":84587,"byte_end":84595,"line_start":103,"line_end":103,"column_start":12,"column_end":20},"name":"sequence","qualname":"<Assertion<B>>::sequence","value":"pub fn sequence(usize, usize, usize, Vec<B>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a multi-value assertion against multiple cells of a single register.","sig":null,"attributes":[{"value":"/ Returns a multi-value assertion against multiple cells of a single register.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":83998,"byte_end":84078,"line_start":92,"line_end":92,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":84083,"byte_end":84086,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ The returned assertion requires that values in the specified `register` must be equal to","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":84091,"byte_end":84183,"line_start":94,"line_end":94,"column_start":5,"column_end":97}},{"value":"/ the provided `values` at steps which start at `first_step` and repeat in equal intervals","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":84188,"byte_end":84280,"line_start":95,"line_end":95,"column_start":5,"column_end":97}},{"value":"/ specified by `stride` until all values have been consumed.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":84285,"byte_end":84347,"line_start":96,"line_end":96,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":84352,"byte_end":84355,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":84360,"byte_end":84372,"line_start":98,"line_end":98,"column_start":5,"column_end":17}},{"value":"/ Panics if:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":84377,"byte_end":84391,"line_start":99,"line_end":99,"column_start":5,"column_end":19}},{"value":"/ * `stride` is not a power of two, or is smaller than 2.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":84396,"byte_end":84455,"line_start":100,"line_end":100,"column_start":5,"column_end":64}},{"value":"/ * `first_step` is greater than `stride`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":84460,"byte_end":84504,"line_start":101,"line_end":101,"column_start":5,"column_end":49}},{"value":"/ * `values` is empty or number of values in not a power of two.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":84509,"byte_end":84575,"line_start":102,"line_end":102,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":85530,"byte_end":85538,"line_start":128,"line_end":128,"column_start":12,"column_end":20},"name":"register","qualname":"<Assertion<B>>::register","value":"pub fn register(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns index of the register against which this assertion is placed.\n","sig":null,"attributes":[{"value":"/ Returns index of the register against which this assertion is placed.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":85445,"byte_end":85518,"line_start":127,"line_end":127,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":85777,"byte_end":85787,"line_start":135,"line_end":135,"column_start":12,"column_end":22},"name":"first_step","qualname":"<Assertion<B>>::first_step","value":"pub fn first_step(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the first step of the execution trace against which this assertion is placed.","sig":null,"attributes":[{"value":"/ Returns the first step of the execution trace against which this assertion is placed.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":85590,"byte_end":85679,"line_start":132,"line_end":132,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":85684,"byte_end":85687,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ For single value assertions this is equivalent to the assertion step.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":85692,"byte_end":85765,"line_start":134,"line_end":134,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":85993,"byte_end":85999,"line_start":142,"line_end":142,"column_start":12,"column_end":18},"name":"stride","qualname":"<Assertion<B>>::stride","value":"pub fn stride(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the interval at which the assertion repeats in the execution trace.","sig":null,"attributes":[{"value":"/ Returns the interval at which the assertion repeats in the execution trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":85841,"byte_end":85920,"line_start":139,"line_end":139,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":85925,"byte_end":85928,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ For single value assertions, this will be 0.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":85933,"byte_end":85981,"line_start":141,"line_end":141,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":86189,"byte_end":86195,"line_start":149,"line_end":149,"column_start":12,"column_end":18},"name":"values","qualname":"<Assertion<B>>::values","value":"pub fn values(&Self) -> &[B]","parent":null,"children":[],"decl_id":null,"docs":" Returns asserted values.","sig":null,"attributes":[{"value":"/ Returns asserted values.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":86049,"byte_end":86077,"line_start":146,"line_end":146,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":86082,"byte_end":86085,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ For single value and periodic assertions this will be a slice containing one value.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":86090,"byte_end":86177,"line_start":148,"line_end":148,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":86332,"byte_end":86341,"line_start":154,"line_end":154,"column_start":12,"column_end":21},"name":"is_single","qualname":"<Assertion<B>>::is_single","value":"pub fn is_single(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this is a single-value assertion (one value, one step).\n","sig":null,"attributes":[{"value":"/ Returns true if this is a single-value assertion (one value, one step).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":86245,"byte_end":86320,"line_start":153,"line_end":153,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":86488,"byte_end":86499,"line_start":159,"line_end":159,"column_start":12,"column_end":23},"name":"is_periodic","qualname":"<Assertion<B>>::is_periodic","value":"pub fn is_periodic(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this is a periodic assertion (one value, many steps).\n","sig":null,"attributes":[{"value":"/ Returns true if this is a periodic assertion (one value, many steps).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":86403,"byte_end":86476,"line_start":158,"line_end":158,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":86674,"byte_end":86685,"line_start":164,"line_end":164,"column_start":12,"column_end":23},"name":"is_sequence","qualname":"<Assertion<B>>::is_sequence","value":"pub fn is_sequence(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this is a sequence assertion (many values, many steps).\n","sig":null,"attributes":[{"value":"/ Returns true if this is a sequence assertion (many values, many steps).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":86587,"byte_end":86662,"line_start":163,"line_end":163,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":87041,"byte_end":87054,"line_start":174,"line_end":174,"column_start":12,"column_end":25},"name":"overlaps_with","qualname":"<Assertion<B>>::overlaps_with","value":"pub fn overlaps_with(&Self, &Assertion<B>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if this assertion overlaps with the provided assertion.","sig":null,"attributes":[{"value":"/ Checks if this assertion overlaps with the provided assertion.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":86867,"byte_end":86933,"line_start":171,"line_end":171,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":86938,"byte_end":86941,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Overlap is defined as asserting a value for the same step in the same register.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":86946,"byte_end":87029,"line_start":173,"line_end":173,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":88228,"byte_end":88248,"line_start":210,"line_end":210,"column_start":12,"column_end":32},"name":"validate_trace_width","qualname":"<Assertion<B>>::validate_trace_width","value":"pub fn validate_trace_width(&Self, usize) -> Result<(), AssertionError>","parent":null,"children":[],"decl_id":null,"docs":" Panics if the assertion cannot be placed against an execution trace of the specified width.\n","sig":null,"attributes":[{"value":"/ Panics if the assertion cannot be placed against an execution trace of the specified width.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":88121,"byte_end":88216,"line_start":209,"line_end":209,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":88925,"byte_end":88946,"line_start":228,"line_end":228,"column_start":12,"column_end":33},"name":"validate_trace_length","qualname":"<Assertion<B>>::validate_trace_length","value":"pub fn validate_trace_length(&Self, usize) -> Result<(), AssertionError>","parent":null,"children":[],"decl_id":null,"docs":" Checks if the assertion is valid against an execution trace of the specified length.","sig":null,"attributes":[{"value":"/ Checks if the assertion is valid against an execution trace of the specified length.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":88521,"byte_end":88609,"line_start":220,"line_end":220,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":88614,"byte_end":88617,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":88622,"byte_end":88634,"line_start":222,"line_end":222,"column_start":5,"column_end":17}},{"value":"/ Returns an error if:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":88639,"byte_end":88663,"line_start":223,"line_end":223,"column_start":5,"column_end":29}},{"value":"/ * `trace_length` is not a power of two.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":88668,"byte_end":88711,"line_start":224,"line_end":224,"column_start":5,"column_end":48}},{"value":"/ * For single assertion, `first_step` >= `trace_length`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":88716,"byte_end":88775,"line_start":225,"line_end":225,"column_start":5,"column_end":64}},{"value":"/ * For periodic assertion, `stride` > `trace_length`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":88780,"byte_end":88836,"line_start":226,"line_end":226,"column_start":5,"column_end":61}},{"value":"/ * For sequence assertion, `num_values` * `stride` != `trace_length`;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":88841,"byte_end":88913,"line_start":227,"line_end":227,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":90260,"byte_end":90265,"line_start":263,"line_end":263,"column_start":12,"column_end":17},"name":"apply","qualname":"<Assertion<B>>::apply","value":"pub fn apply<F>(&Self, usize, F) where F: FnMut(usize, B) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Executes the provided closure for all possible instantiations of this assertions against\n a execution trace of the specified length.","sig":null,"attributes":[{"value":"/ Executes the provided closure for all possible instantiations of this assertions against","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":90002,"byte_end":90094,"line_start":258,"line_end":258,"column_start":5,"column_end":97}},{"value":"/ a execution trace of the specified length.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":90099,"byte_end":90145,"line_start":259,"line_end":259,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":90150,"byte_end":90153,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":90158,"byte_end":90170,"line_start":261,"line_end":261,"column_start":5,"column_end":17}},{"value":"/ Panics if the specified trace length is not valid for this assertion.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":90175,"byte_end":90248,"line_start":262,"line_end":262,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":91433,"byte_end":91446,"line_start":293,"line_end":293,"column_start":12,"column_end":25},"name":"get_num_steps","qualname":"<Assertion<B>>::get_num_steps","value":"pub fn get_num_steps(&Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of steps against which this assertion will be applied given an\n execution trace of the specified length.","sig":null,"attributes":[{"value":"/ Returns the number of steps against which this assertion will be applied given an","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":90942,"byte_end":91027,"line_start":284,"line_end":284,"column_start":5,"column_end":90}},{"value":"/ execution trace of the specified length.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":91032,"byte_end":91076,"line_start":285,"line_end":285,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":91081,"byte_end":91084,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ * For single-value assertions, this will always be one.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":91089,"byte_end":91148,"line_start":287,"line_end":287,"column_start":5,"column_end":64}},{"value":"/ * For periodic assertions this will be equal to `trace_length` / `stride`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":91153,"byte_end":91231,"line_start":288,"line_end":288,"column_start":5,"column_end":83}},{"value":"/ * For sequence assertions this will be equal to the number of asserted values.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":91236,"byte_end":91318,"line_start":289,"line_end":289,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":91323,"byte_end":91326,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":91331,"byte_end":91343,"line_start":291,"line_end":291,"column_start":5,"column_end":17}},{"value":"/ Panics if the specified trace length is not valid for this assertion.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":91348,"byte_end":91421,"line_start":292,"line_end":292,"column_start":5,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":941},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":95424,"byte_end":95447,"line_start":28,"line_end":28,"column_start":12,"column_end":35},"name":"BoundaryConstraintGroup","qualname":"::air::boundary::BoundaryConstraintGroup","value":"BoundaryConstraintGroup {  }","parent":null,"children":[{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946}],"decl_id":null,"docs":" A group of boundary constraints all having the same divisor.","sig":null,"attributes":[{"value":"/ A group of boundary constraints all having the same divisor.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":94668,"byte_end":94732,"line_start":15,"line_end":15,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":94733,"byte_end":94736,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ A boundary constraint is described by a rational function $\\frac{f(x) - b(x)}{z(x)}$, where:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":94737,"byte_end":94833,"line_start":17,"line_end":17,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":94834,"byte_end":94837,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ * $f(x)$ is a trace polynomial for the register against which the constraint is placed.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":94838,"byte_end":94929,"line_start":19,"line_end":19,"column_start":1,"column_end":92}},{"value":"/ * $b(x)$ is the value polynomial for the constraint.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":94930,"byte_end":94986,"line_start":20,"line_end":20,"column_start":1,"column_end":57}},{"value":"/ * $z(x)$ is the constraint divisor polynomial.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":94987,"byte_end":95037,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":95038,"byte_end":95041,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ A boundary constraint group groups together all boundary constraints where polynomial $z$ is","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":95042,"byte_end":95138,"line_start":23,"line_end":23,"column_start":1,"column_end":97}},{"value":"/ the same. The constraints stored in the group describe polynomials $b$. At the time of","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":95139,"byte_end":95229,"line_start":24,"line_end":24,"column_start":1,"column_end":91}},{"value":"/ constraint evaluation, a prover or a verifier provides evaluations of the relevant polynomial","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":95230,"byte_end":95327,"line_start":25,"line_end":25,"column_start":1,"column_end":98}},{"value":"/ $f$ so that the value of the constraint can be computed.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":95328,"byte_end":95388,"line_start":26,"line_end":26,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":96884,"byte_end":96895,"line_start":61,"line_end":61,"column_start":12,"column_end":23},"name":"constraints","qualname":"<BoundaryConstraintGroup<B, E>>::constraints","value":"pub fn constraints(&Self) -> &[BoundaryConstraint<B, E>]","parent":null,"children":[],"decl_id":null,"docs":" Returns a list of boundary constraints in this group.\n","sig":null,"attributes":[{"value":"/ Returns a list of boundary constraints in this group.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":96815,"byte_end":96872,"line_start":60,"line_end":60,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":97060,"byte_end":97067,"line_start":66,"line_end":66,"column_start":12,"column_end":19},"name":"divisor","qualname":"<BoundaryConstraintGroup<B, E>>::divisor","value":"pub fn divisor(&Self) -> &ConstraintDivisor<B>","parent":null,"children":[],"decl_id":null,"docs":" Returns a divisor applicable to all boundary constraints in this group.\n","sig":null,"attributes":[{"value":"/ Returns a divisor applicable to all boundary constraints in this group.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":96973,"byte_end":97048,"line_start":65,"line_end":65,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":97229,"byte_end":97246,"line_start":71,"line_end":71,"column_start":12,"column_end":29},"name":"degree_adjustment","qualname":"<BoundaryConstraintGroup<B, E>>::degree_adjustment","value":"pub fn degree_adjustment(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a degree adjustment factor for all boundary constraints in this group.\n","sig":null,"attributes":[{"value":"/ Returns a degree adjustment factor for all boundary constraints in this group.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":97135,"byte_end":97217,"line_start":70,"line_end":70,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":99155,"byte_end":99166,"line_start":114,"line_end":114,"column_start":12,"column_end":23},"name":"evaluate_at","qualname":"<BoundaryConstraintGroup<B, E>>::evaluate_at","value":"pub fn evaluate_at(&Self, &[E], E, E) -> E","parent":null,"children":[],"decl_id":null,"docs":" Evaluates all constraints in this group at the specified point `x`.","sig":null,"attributes":[{"value":"/ Evaluates all constraints in this group at the specified point `x`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":97874,"byte_end":97945,"line_start":94,"line_end":94,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":97950,"byte_end":97953,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ `xp` is a degree adjustment multiplier which must be computed as `x^degree_adjustment`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":97958,"byte_end":98049,"line_start":96,"line_end":96,"column_start":5,"column_end":96}},{"value":"/ This value is provided as an argument to this function for optimization purposes.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":98054,"byte_end":98139,"line_start":97,"line_end":97,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":98144,"byte_end":98147,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ Constraint evaluations are merges into a single value by computing their random linear","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":98152,"byte_end":98242,"line_start":99,"line_end":99,"column_start":5,"column_end":95}},{"value":"/ combination and dividing the result by the divisor of this constraint group as follows:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":98247,"byte_end":98338,"line_start":100,"line_end":100,"column_start":5,"column_end":96}},{"value":"/ $$","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":98343,"byte_end":98349,"line_start":101,"line_end":101,"column_start":5,"column_end":11}},{"value":"/ \\frac{\\sum_{i=0}^{k-1}{C_i(x) \\cdot (\\alpha_i + \\beta_i \\cdot x^d)}}{z(x)}","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":98354,"byte_end":98432,"line_start":102,"line_end":102,"column_start":5,"column_end":83}},{"value":"/ $$","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":98437,"byte_end":98443,"line_start":103,"line_end":103,"column_start":5,"column_end":11}},{"value":"/ where:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":98448,"byte_end":98458,"line_start":104,"line_end":104,"column_start":5,"column_end":15}},{"value":"/ * $C_i(x)$ is the evaluation of the $i$th constraint at `x` computed as $f(x) - b(x)$.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":98463,"byte_end":98553,"line_start":105,"line_end":105,"column_start":5,"column_end":95}},{"value":"/ * $\\alpha$ and $\\beta$ are random field elements. In the interactive version of the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":98558,"byte_end":98645,"line_start":106,"line_end":106,"column_start":5,"column_end":92}},{"value":"/   protocol, these are provided by the verifier.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":98650,"byte_end":98701,"line_start":107,"line_end":107,"column_start":5,"column_end":56}},{"value":"/ * $z(x)$ is the evaluation of the divisor polynomial for this group at $x$.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":98706,"byte_end":98785,"line_start":108,"line_end":108,"column_start":5,"column_end":84}},{"value":"/ * $d$ is the degree adjustment factor computed as $D - deg(C_i(x)) + deg(z(x))$, where","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":98790,"byte_end":98880,"line_start":109,"line_end":109,"column_start":5,"column_end":95}},{"value":"/   $D$ is the degree of the composition polynomial.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":98885,"byte_end":98939,"line_start":110,"line_end":110,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":98944,"byte_end":98947,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ Thus, the merged evaluations represent a polynomial of degree $D$, as the degree of the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":98952,"byte_end":99043,"line_start":112,"line_end":112,"column_start":5,"column_end":96}},{"value":"/ numerator is $D + deg(z(x))$, and the division by $z(x)$ reduces the degree by $deg(z(x))$.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":99048,"byte_end":99143,"line_start":113,"line_end":113,"column_start":5,"column_end":100}}]},{"kind":"Struct","id":{"krate":0,"index":955},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":100658,"byte_end":100676,"line_start":150,"line_end":150,"column_start":12,"column_end":30},"name":"BoundaryConstraint","qualname":"::air::boundary::BoundaryConstraint","value":"BoundaryConstraint {  }","parent":null,"children":[{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":960},{"krate":0,"index":961}],"decl_id":null,"docs":" The numerator portion of a boundary constraint.","sig":null,"attributes":[{"value":"/ The numerator portion of a boundary constraint.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":99890,"byte_end":99941,"line_start":135,"line_end":135,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":99942,"byte_end":99945,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ A boundary constraint is described by a rational function $\\frac{f(x) - b(x)}{z(x)}$, where:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":99946,"byte_end":100042,"line_start":137,"line_end":137,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":100043,"byte_end":100046,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ * $f(x)$ is a trace polynomial for the register against which the constraint is placed.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":100047,"byte_end":100138,"line_start":139,"line_end":139,"column_start":1,"column_end":92}},{"value":"/ * $b(b)$ is the value polynomial for this constraint.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":100139,"byte_end":100196,"line_start":140,"line_end":140,"column_start":1,"column_end":58}},{"value":"/ * $z(x)$ is the constraint divisor polynomial.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":100197,"byte_end":100247,"line_start":141,"line_end":141,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":100248,"byte_end":100251,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ In addition to the value polynomial, a `BoundaryConstraint` also contains info needed to","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":100252,"byte_end":100344,"line_start":143,"line_end":143,"column_start":1,"column_end":93}},{"value":"/ evaluate the constraint and to compose constraint evaluations with other constraints (i.e.,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":100345,"byte_end":100440,"line_start":144,"line_end":144,"column_start":1,"column_end":96}},{"value":"/ constraint composition coefficients).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":100441,"byte_end":100482,"line_start":145,"line_end":145,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":100483,"byte_end":100486,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ `BoundaryConstraint`s cannot be instantiated directly, they are created internally from","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":100487,"byte_end":100578,"line_start":147,"line_end":147,"column_start":1,"column_end":92}},{"value":"/ [Assertions](Assertion).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":100579,"byte_end":100607,"line_start":148,"line_end":148,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":103030,"byte_end":103038,"line_start":203,"line_end":203,"column_start":12,"column_end":20},"name":"register","qualname":"<BoundaryConstraint<B, E>>::register","value":"pub fn register(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns index of the register against which this constraint applies.\n","sig":null,"attributes":[{"value":"/ Returns index of the register against which this constraint applies.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":102946,"byte_end":103018,"line_start":202,"line_end":202,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":103153,"byte_end":103157,"line_start":208,"line_end":208,"column_start":12,"column_end":16},"name":"poly","qualname":"<BoundaryConstraint<B, E>>::poly","value":"pub fn poly(&Self) -> &[B]","parent":null,"children":[],"decl_id":null,"docs":" Returns a value polynomial for this constraint.\n","sig":null,"attributes":[{"value":"/ Returns a value polynomial for this constraint.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":103090,"byte_end":103141,"line_start":207,"line_end":207,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":103548,"byte_end":103559,"line_start":217,"line_end":217,"column_start":12,"column_end":23},"name":"poly_offset","qualname":"<BoundaryConstraint<B, E>>::poly_offset","value":"pub fn poly_offset(&Self) -> (usize, B)","parent":null,"children":[],"decl_id":null,"docs":" Returns offset by which we need to shift the domain before evaluating this constraint.","sig":null,"attributes":[{"value":"/ Returns offset by which we need to shift the domain before evaluating this constraint.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":103205,"byte_end":103295,"line_start":212,"line_end":212,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":103300,"byte_end":103303,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ The offset is returned as a tuple describing both, the number of steps by which the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":103308,"byte_end":103395,"line_start":214,"line_end":214,"column_start":5,"column_end":92}},{"value":"/ domain needs to be shifted, and field element by which a domain element needs to be","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":103400,"byte_end":103487,"line_start":215,"line_end":215,"column_start":5,"column_end":92}},{"value":"/ multiplied to achieve the desired shift.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":103492,"byte_end":103536,"line_start":216,"line_end":216,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":103688,"byte_end":103690,"line_start":222,"line_end":222,"column_start":12,"column_end":14},"name":"cc","qualname":"<BoundaryConstraint<B, E>>::cc","value":"pub fn cc(&Self) -> &(E, E)","parent":null,"children":[],"decl_id":null,"docs":" Returns composition coefficients for this constraint.\n","sig":null,"attributes":[{"value":"/ Returns composition coefficients for this constraint.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":103619,"byte_end":103676,"line_start":221,"line_end":221,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":104308,"byte_end":104319,"line_start":236,"line_end":236,"column_start":12,"column_end":23},"name":"evaluate_at","qualname":"<BoundaryConstraint<B, E>>::evaluate_at","value":"pub fn evaluate_at(&Self, E, E) -> E","parent":null,"children":[],"decl_id":null,"docs":" Evaluates this constraint at the specified point `x`.","sig":null,"attributes":[{"value":"/ Evaluates this constraint at the specified point `x`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":103867,"byte_end":103924,"line_start":228,"line_end":228,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":103929,"byte_end":103932,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ The constraint is evaluated by computing $f(x) - b(x)$, where:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":103937,"byte_end":104003,"line_start":230,"line_end":230,"column_start":5,"column_end":71}},{"value":"/ * $f$ is a trace polynomial for the register against which the constraint is placed.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":104008,"byte_end":104096,"line_start":231,"line_end":231,"column_start":5,"column_end":93}},{"value":"/ * $f(x)$ = `trace_value`","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":104101,"byte_end":104129,"line_start":232,"line_end":232,"column_start":5,"column_end":33}},{"value":"/ * $b$ is the value polynomial for this constraint.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":104134,"byte_end":104188,"line_start":233,"line_end":233,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":104193,"byte_end":104196,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ For boundary constraints derived from single and periodic assertions, $b(x)$ is a constant.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":104201,"byte_end":104296,"line_start":235,"line_end":235,"column_start":5,"column_end":100}}]},{"kind":"Struct","id":{"krate":0,"index":985},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":106762,"byte_end":106787,"line_start":35,"line_end":35,"column_start":12,"column_end":37},"name":"TransitionConstraintGroup","qualname":"::air::transition::TransitionConstraintGroup","value":"TransitionConstraintGroup {  }","parent":null,"children":[{"krate":0,"index":987},{"krate":0,"index":988},{"krate":0,"index":989},{"krate":0,"index":990}],"decl_id":null,"docs":" A group of transition constraints all having the same degree.","sig":null,"attributes":[{"value":"/ A group of transition constraints all having the same degree.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":105812,"byte_end":105877,"line_start":18,"line_end":18,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":105878,"byte_end":105881,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ A transition constraint group does not actually store transition constraints - it stores only","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":105882,"byte_end":105979,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/ their indexes and the info needed to compute their random linear combination. The indexes are","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":105980,"byte_end":106077,"line_start":21,"line_end":21,"column_start":1,"column_end":98}},{"value":"/ assumed to be consistent with the order in which constraint evaluations are written into the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":106078,"byte_end":106174,"line_start":22,"line_end":22,"column_start":1,"column_end":97}},{"value":"/ `evaluation` table by the [Air::evaluate_transition()](crate::Air::evaluate_transition)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":106175,"byte_end":106266,"line_start":23,"line_end":23,"column_start":1,"column_end":92}},{"value":"/ function.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":106267,"byte_end":106280,"line_start":24,"line_end":24,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":106281,"byte_end":106284,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ A transition constraint is described by a rational function of the form $\\frac{C(x)}{z(x)}$,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":106285,"byte_end":106381,"line_start":26,"line_end":26,"column_start":1,"column_end":97}},{"value":"/ where:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":106382,"byte_end":106392,"line_start":27,"line_end":27,"column_start":1,"column_end":11}},{"value":"/ * $C(x)$ is the constraint polynomial.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":106393,"byte_end":106435,"line_start":28,"line_end":28,"column_start":1,"column_end":43}},{"value":"/ * $z(x)$ is the constraint divisor polynomial.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":106436,"byte_end":106486,"line_start":29,"line_end":29,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":106487,"byte_end":106490,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ The divisor polynomial is the same for all transition constraints (see","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":106491,"byte_end":106565,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/ [Air::transition_constraint_divisor()](crate::Air::transition_constraint_divisor())) and for","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":106566,"byte_end":106662,"line_start":32,"line_end":32,"column_start":1,"column_end":97}},{"value":"/ this reason is not stored in a transition constraint group.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":106663,"byte_end":106726,"line_start":33,"line_end":33,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":108304,"byte_end":108311,"line_start":70,"line_end":70,"column_start":12,"column_end":19},"name":"indexes","qualname":"<TransitionConstraintGroup<E>>::indexes","value":"pub fn indexes(&Self) -> &[usize]","parent":null,"children":[],"decl_id":null,"docs":" Returns indexes of all constraints in this group.\n","sig":null,"attributes":[{"value":"/ Returns indexes of all constraints in this group.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":108239,"byte_end":108292,"line_start":69,"line_end":69,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":108443,"byte_end":108449,"line_start":75,"line_end":75,"column_start":12,"column_end":18},"name":"degree","qualname":"<TransitionConstraintGroup<E>>::degree","value":"pub fn degree(&Self) -> &TransitionConstraintDegree","parent":null,"children":[],"decl_id":null,"docs":" Returns degree descriptors for all constraints in this group.\n","sig":null,"attributes":[{"value":"/ Returns degree descriptors for all constraints in this group.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":108366,"byte_end":108431,"line_start":74,"line_end":74,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":108647,"byte_end":108650,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"add","qualname":"<TransitionConstraintGroup<E>>::add","value":"pub fn add(&mut Self, usize, (E, E))","parent":null,"children":[],"decl_id":null,"docs":" Adds a new constraint to the group. The constraint is identified by an index in the\n evaluation table.\n","sig":null,"attributes":[{"value":"/ Adds a new constraint to the group. The constraint is identified by an index in the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":108522,"byte_end":108609,"line_start":79,"line_end":79,"column_start":5,"column_end":92}},{"value":"/ evaluation table.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":108614,"byte_end":108635,"line_start":80,"line_end":80,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":110411,"byte_end":110428,"line_start":110,"line_end":110,"column_start":12,"column_end":29},"name":"merge_evaluations","qualname":"<TransitionConstraintGroup<E>>::merge_evaluations","value":"pub fn merge_evaluations<B>(&Self, &[B], B) -> E where B: FieldElement,\nE: From<B>","parent":null,"children":[],"decl_id":null,"docs":" Computes a linear combination of evaluations relevant to this constraint group.","sig":null,"attributes":[{"value":"/ Computes a linear combination of evaluations relevant to this constraint group.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":108926,"byte_end":109009,"line_start":88,"line_end":88,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":109014,"byte_end":109017,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ The linear combination is computed as follows:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":109022,"byte_end":109072,"line_start":90,"line_end":90,"column_start":5,"column_end":55}},{"value":"/ $$","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":109077,"byte_end":109083,"line_start":91,"line_end":91,"column_start":5,"column_end":11}},{"value":"/ \\sum_{i=0}^{k-1}{C_i(x) \\cdot (\\alpha_i + \\beta_i \\cdot x^d)}","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":109088,"byte_end":109153,"line_start":92,"line_end":92,"column_start":5,"column_end":70}},{"value":"/ $$","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":109158,"byte_end":109164,"line_start":93,"line_end":93,"column_start":5,"column_end":11}},{"value":"/ where:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":109169,"byte_end":109179,"line_start":94,"line_end":94,"column_start":5,"column_end":15}},{"value":"/ * $C_i(x)$ is the evaluation of the $i$th constraint at `x` (same as `evaluations[i]`).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":109184,"byte_end":109275,"line_start":95,"line_end":95,"column_start":5,"column_end":96}},{"value":"/ * $\\alpha$ and $\\beta$ are random field elements. In the interactive version of the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":109280,"byte_end":109367,"line_start":96,"line_end":96,"column_start":5,"column_end":92}},{"value":"/   protocol, these are provided by the verifier.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":109372,"byte_end":109423,"line_start":97,"line_end":97,"column_start":5,"column_end":56}},{"value":"/ * $d$ is the degree adjustment factor computed as $D + (n - 1) - deg(C_i(x))$, where","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":109428,"byte_end":109516,"line_start":98,"line_end":98,"column_start":5,"column_end":93}},{"value":"/   $D$ is the degree of the composition polynomial, $n$ is the length of the execution","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":109521,"byte_end":109610,"line_start":99,"line_end":99,"column_start":5,"column_end":94}},{"value":"/   trace, and $deg(C_i(x))$ is the evaluation degree of the $i$th constraint.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":109615,"byte_end":109695,"line_start":100,"line_end":100,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":109700,"byte_end":109703,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ There are two things to note here. First, the degree adjustment factor $d$ is the same","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":109708,"byte_end":109798,"line_start":102,"line_end":102,"column_start":5,"column_end":95}},{"value":"/ for all constraints in the group (since all constraints have the same degree). Second,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":109803,"byte_end":109893,"line_start":103,"line_end":103,"column_start":5,"column_end":95}},{"value":"/ the merged evaluations represent a polynomial of degree $D + n - 1$, which is higher","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":109898,"byte_end":109986,"line_start":104,"line_end":104,"column_start":5,"column_end":93}},{"value":"/ then the target degree of the composition polynomial. This is because at this stage,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":109991,"byte_end":110079,"line_start":105,"line_end":105,"column_start":5,"column_end":93}},{"value":"/ we are merging only the numerators of transition constraints, and we will need to divide","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":110084,"byte_end":110176,"line_start":106,"line_end":106,"column_start":5,"column_end":97}},{"value":"/ them by the divisor later on. The degree of the divisor for transition constraints is","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":110181,"byte_end":110270,"line_start":107,"line_end":107,"column_start":5,"column_end":94}},{"value":"/ always $n - 1$. Thus, once we divide out the divisor, the evaluations will represent a","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":110275,"byte_end":110365,"line_start":108,"line_end":108,"column_start":5,"column_end":95}},{"value":"/ polynomial of degree $D$.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":110370,"byte_end":110399,"line_start":109,"line_end":109,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":997},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":111800,"byte_end":111826,"line_start":139,"line_end":139,"column_start":12,"column_end":38},"name":"TransitionConstraintDegree","qualname":"::air::transition::TransitionConstraintDegree","value":"TransitionConstraintDegree {  }","parent":null,"children":[{"krate":0,"index":998},{"krate":0,"index":999}],"decl_id":null,"docs":" Degree descriptor of a transition constraint.","sig":null,"attributes":[{"value":"/ Degree descriptor of a transition constraint.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":111286,"byte_end":111335,"line_start":131,"line_end":131,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":111336,"byte_end":111339,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ Describes constraint degree as a combination of multiplications of periodic and trace","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":111340,"byte_end":111429,"line_start":133,"line_end":133,"column_start":1,"column_end":90}},{"value":"/ registers. For example, degree of a constraint which requires multiplication of two trace","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":111430,"byte_end":111523,"line_start":134,"line_end":134,"column_start":1,"column_end":94}},{"value":"/ registers can be described as: `base: 2, cycles: []`. A constraint which requires","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":111524,"byte_end":111609,"line_start":135,"line_end":135,"column_start":1,"column_end":86}},{"value":"/ multiplication of 3 trace registers and a periodic register with a period of 32 steps can be","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":111610,"byte_end":111706,"line_start":136,"line_end":136,"column_start":1,"column_end":97}},{"value":"/ described as: `base: 3, cycles: [32]`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":111707,"byte_end":111749,"line_start":137,"line_end":137,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":112370,"byte_end":112373,"line_start":154,"line_end":154,"column_start":12,"column_end":15},"name":"new","qualname":"<TransitionConstraintDegree>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new transition constraint degree descriptor for constraints which involve\n multiplications of trace registers only.","sig":null,"attributes":[{"value":"/ Creates a new transition constraint degree descriptor for constraints which involve","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":111911,"byte_end":111998,"line_start":145,"line_end":145,"column_start":5,"column_end":92}},{"value":"/ multiplications of trace registers only.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":112003,"byte_end":112047,"line_start":146,"line_end":146,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":112052,"byte_end":112055,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ For example, if a constraint involves multiplication of two trace registers, `degree`","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":112060,"byte_end":112149,"line_start":148,"line_end":148,"column_start":5,"column_end":94}},{"value":"/ should be set to 2. If a constraint involves multiplication of three trace registers,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":112154,"byte_end":112243,"line_start":149,"line_end":149,"column_start":5,"column_end":94}},{"value":"/ `degree` should be set to 3 etc.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":112248,"byte_end":112284,"line_start":150,"line_end":150,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":112289,"byte_end":112292,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":112297,"byte_end":112309,"line_start":152,"line_end":152,"column_start":5,"column_end":17}},{"value":"/ Panics if the provided `degree` is zero.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":112314,"byte_end":112358,"line_start":153,"line_end":153,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":113208,"byte_end":113219,"line_start":176,"line_end":176,"column_start":12,"column_end":23},"name":"with_cycles","qualname":"<TransitionConstraintDegree>::with_cycles","value":"pub fn with_cycles(usize, Vec<usize>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new transition degree descriptor for constraints which involve multiplication\n of trace registers and periodic columns.","sig":null,"attributes":[{"value":"/ Creates a new transition degree descriptor for constraints which involve multiplication","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":112641,"byte_end":112732,"line_start":165,"line_end":165,"column_start":5,"column_end":96}},{"value":"/ of trace registers and periodic columns.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":112737,"byte_end":112781,"line_start":166,"line_end":166,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":112786,"byte_end":112789,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ For example, if a constraint involves multiplication of two trace registers and one","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":112794,"byte_end":112881,"line_start":168,"line_end":168,"column_start":5,"column_end":92}},{"value":"/ periodic column with a period length of 32 steps, `base_degree` should be set to 2,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":112886,"byte_end":112973,"line_start":169,"line_end":169,"column_start":5,"column_end":92}},{"value":"/ and `cycles` should be set to `vec![32]`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":112978,"byte_end":113023,"line_start":170,"line_end":170,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":113028,"byte_end":113031,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":113036,"byte_end":113048,"line_start":172,"line_end":172,"column_start":5,"column_end":17}},{"value":"/ Panics if:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":113053,"byte_end":113067,"line_start":173,"line_end":173,"column_start":5,"column_end":19}},{"value":"/ * `base_degree` is zero.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":113072,"byte_end":113100,"line_start":174,"line_end":174,"column_start":5,"column_end":33}},{"value":"/ * Any of the values in the `cycles` vector is smaller than two or is not powers of two.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":113105,"byte_end":113196,"line_start":175,"line_end":175,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":114888,"byte_end":114909,"line_start":222,"line_end":222,"column_start":12,"column_end":33},"name":"get_evaluation_degree","qualname":"<TransitionConstraintDegree>::get_evaluation_degree","value":"pub fn get_evaluation_degree(&Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes a degree to which this degree description expands in the context of execution\n trace of the specified length.","sig":null,"attributes":[{"value":"/ Computes a degree to which this degree description expands in the context of execution","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":114008,"byte_end":114098,"line_start":202,"line_end":202,"column_start":5,"column_end":95}},{"value":"/ trace of the specified length.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":114103,"byte_end":114137,"line_start":203,"line_end":203,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":114142,"byte_end":114145,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ The expanded degree is computed as follows:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":114150,"byte_end":114197,"line_start":205,"line_end":205,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":114202,"byte_end":114205,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ $$","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":114210,"byte_end":114216,"line_start":207,"line_end":207,"column_start":5,"column_end":11}},{"value":"/ b \\cdot (n - 1) + \\sum_{i = 0}^{k - 1}{\\frac{n \\cdot (c_i - 1)}{c_i}}","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":114221,"byte_end":114294,"line_start":208,"line_end":208,"column_start":5,"column_end":78}},{"value":"/ $$","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":114299,"byte_end":114305,"line_start":209,"line_end":209,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":114310,"byte_end":114313,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ where: $b$ is the base degree, $n$ is the `trace_length`, $c_i$ is a cycle length of","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":114318,"byte_end":114406,"line_start":211,"line_end":211,"column_start":5,"column_end":93}},{"value":"/ periodic column $i$, and $k$ is the total number of periodic columns for this degree","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":114411,"byte_end":114499,"line_start":212,"line_end":212,"column_start":5,"column_end":93}},{"value":"/ descriptor.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":114504,"byte_end":114519,"line_start":213,"line_end":213,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":114524,"byte_end":114527,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ Thus, evaluation degree of a transition constraint which involves multiplication of two","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":114532,"byte_end":114623,"line_start":215,"line_end":215,"column_start":5,"column_end":96}},{"value":"/ trace registers and one periodic column with a period length of 32 steps when evaluated","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":114628,"byte_end":114719,"line_start":216,"line_end":216,"column_start":5,"column_end":96}},{"value":"/ over an execution trace of 64 steps would be:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":114724,"byte_end":114773,"line_start":217,"line_end":217,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":114778,"byte_end":114781,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ $$","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":114786,"byte_end":114792,"line_start":219,"line_end":219,"column_start":5,"column_end":11}},{"value":"/ 2 \\cdot (64 - 1) + \\frac{64 \\cdot (32 - 1)}{32} = 126 + 62 = 188","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":114797,"byte_end":114865,"line_start":220,"line_end":220,"column_start":5,"column_end":73}},{"value":"/ $$","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":114870,"byte_end":114876,"line_start":221,"line_end":221,"column_start":5,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":115333,"byte_end":115350,"line_start":233,"line_end":233,"column_start":12,"column_end":29},"name":"min_blowup_factor","qualname":"<TransitionConstraintDegree>::min_blowup_factor","value":"pub fn min_blowup_factor(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns a minimum blowup factor needed to evaluate constraint of this degree.","sig":null,"attributes":[{"value":"/ Returns a minimum blowup factor needed to evaluate constraint of this degree.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":115165,"byte_end":115246,"line_start":230,"line_end":230,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":115251,"byte_end":115254,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ This is guaranteed to be a power of two, greater than one.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":115259,"byte_end":115321,"line_start":232,"line_end":232,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1011},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":115988,"byte_end":116003,"line_start":249,"line_end":249,"column_start":12,"column_end":27},"name":"EvaluationFrame","qualname":"::air::transition::EvaluationFrame","value":"EvaluationFrame {  }","parent":null,"children":[{"krate":0,"index":1013},{"krate":0,"index":1014}],"decl_id":null,"docs":" A set of execution trace rows required for evaluation of transition constraints.","sig":null,"attributes":[{"value":"/ A set of execution trace rows required for evaluation of transition constraints.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":115622,"byte_end":115706,"line_start":243,"line_end":243,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":115707,"byte_end":115710,"line_start":244,"line_end":244,"column_start":1,"column_end":4}},{"value":"/ In the current implementation, an evaluation frame always contains two consecutive rows of the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":115711,"byte_end":115809,"line_start":245,"line_end":245,"column_start":1,"column_end":99}},{"value":"/ execution trace. It is passed in as one of the parameters into","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":115810,"byte_end":115876,"line_start":246,"line_end":246,"column_start":1,"column_end":67}},{"value":"/ [Air::evaluate_transition()](crate::Air::evaluate_transition) function.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":115877,"byte_end":115952,"line_start":247,"line_end":247,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":116400,"byte_end":116403,"line_start":262,"line_end":262,"column_start":12,"column_end":15},"name":"new","qualname":"<EvaluationFrame<E>>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new evaluation frame instantiated with the specified number of registers.","sig":null,"attributes":[{"value":"/ Returns a new evaluation frame instantiated with the specified number of registers.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":116233,"byte_end":116320,"line_start":258,"line_end":258,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":116325,"byte_end":116328,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":116333,"byte_end":116345,"line_start":260,"line_end":260,"column_start":5,"column_end":17}},{"value":"/ Panics if `num_registers` is zero.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":116350,"byte_end":116388,"line_start":261,"line_end":261,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":116940,"byte_end":116949,"line_start":279,"line_end":279,"column_start":12,"column_end":21},"name":"from_rows","qualname":"<EvaluationFrame<E>>::from_rows","value":"pub fn from_rows(Vec<E>, Vec<E>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new evaluation frame instantiated from the provided rows.","sig":null,"attributes":[{"value":"/ Returns a new evaluation frame instantiated from the provided rows.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":116707,"byte_end":116778,"line_start":273,"line_end":273,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":116783,"byte_end":116786,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":116791,"byte_end":116803,"line_start":275,"line_end":275,"column_start":5,"column_end":17}},{"value":"/ Panics if:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":116808,"byte_end":116822,"line_start":276,"line_end":276,"column_start":5,"column_end":19}},{"value":"/ * Lengths of the provided rows are zero.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":116827,"byte_end":116871,"line_start":277,"line_end":277,"column_start":5,"column_end":49}},{"value":"/ * Lengths of the provided rows are not the same.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":116876,"byte_end":116928,"line_start":278,"line_end":278,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":117453,"byte_end":117460,"line_start":294,"line_end":294,"column_start":12,"column_end":19},"name":"current","qualname":"<EvaluationFrame<E>>::current","value":"pub fn current(&Self) -> &[E]","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the current row.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the current row.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":117376,"byte_end":117419,"line_start":292,"line_end":292,"column_start":5,"column_end":48}},{"value":"inline(always)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":117424,"byte_end":117441,"line_start":293,"line_end":293,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":117596,"byte_end":117607,"line_start":300,"line_end":300,"column_start":12,"column_end":23},"name":"current_mut","qualname":"<EvaluationFrame<E>>::current_mut","value":"pub fn current_mut(&mut Self) -> &mut [E]","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the current row.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the current row.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":117511,"byte_end":117562,"line_start":298,"line_end":298,"column_start":5,"column_end":56}},{"value":"inline(always)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":117567,"byte_end":117584,"line_start":299,"line_end":299,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":117744,"byte_end":117748,"line_start":306,"line_end":306,"column_start":12,"column_end":16},"name":"next","qualname":"<EvaluationFrame<E>>::next","value":"pub fn next(&Self) -> &[E]","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the next row.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the next row.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":117670,"byte_end":117710,"line_start":304,"line_end":304,"column_start":5,"column_end":45}},{"value":"inline(always)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":117715,"byte_end":117732,"line_start":305,"line_end":305,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":117878,"byte_end":117886,"line_start":312,"line_end":312,"column_start":12,"column_end":20},"name":"next_mut","qualname":"<EvaluationFrame<E>>::next_mut","value":"pub fn next_mut(&mut Self) -> &mut [E]","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the next row.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the next row.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":117796,"byte_end":117844,"line_start":310,"line_end":310,"column_start":5,"column_end":53}},{"value":"inline(always)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":117849,"byte_end":117866,"line_start":311,"line_end":311,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":1021},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":119391,"byte_end":119424,"line_start":31,"line_end":31,"column_start":12,"column_end":45},"name":"ConstraintCompositionCoefficients","qualname":"::air::coefficients::ConstraintCompositionCoefficients","value":"ConstraintCompositionCoefficients { transition, boundary }","parent":null,"children":[{"krate":0,"index":1023},{"krate":0,"index":1024}],"decl_id":null,"docs":" Coefficients used in construction of constraint composition polynomial.","sig":null,"attributes":[{"value":"/ Coefficients used in construction of constraint composition polynomial.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":118319,"byte_end":118394,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":118395,"byte_end":118398,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ These coefficients are created by the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":118399,"byte_end":118440,"line_start":13,"line_end":13,"column_start":1,"column_end":42}},{"value":"/ [Air::get_constraint_composition_coefficients()](crate::Air::get_constraint_composition_coefficients)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":118441,"byte_end":118546,"line_start":14,"line_end":14,"column_start":1,"column_end":106}},{"value":"/ function. In the interactive version of the protocol, the verifier draws these coefficients","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":118547,"byte_end":118642,"line_start":15,"line_end":15,"column_start":1,"column_end":96}},{"value":"/ uniformly at random from the extension field of the protocol.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":118643,"byte_end":118708,"line_start":16,"line_end":16,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":118709,"byte_end":118712,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ There are two coefficients for each constraint so that we can compute a random linear","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":118713,"byte_end":118802,"line_start":18,"line_end":18,"column_start":1,"column_end":90}},{"value":"/ combination of constraints like so:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":118803,"byte_end":118842,"line_start":19,"line_end":19,"column_start":1,"column_end":40}},{"value":"/ $$","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":118843,"byte_end":118849,"line_start":20,"line_end":20,"column_start":1,"column_end":7}},{"value":"/ \\sum_{i = 0}^k{C_i(x) \\cdot (\\alpha_i + \\beta_i \\cdot x^{d_i})}","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":118850,"byte_end":118917,"line_start":21,"line_end":21,"column_start":1,"column_end":68}},{"value":"/ $$","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":118918,"byte_end":118924,"line_start":22,"line_end":22,"column_start":1,"column_end":7}},{"value":"/ where:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":118925,"byte_end":118935,"line_start":23,"line_end":23,"column_start":1,"column_end":11}},{"value":"/ * $\\alpha_i$ and $\\beta_i$ are the coefficients for the $i$th constraint.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":118936,"byte_end":119013,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ * $C_i(x)$ is an evaluation of the $i$th constraint at $x$.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":119014,"byte_end":119077,"line_start":25,"line_end":25,"column_start":1,"column_end":64}},{"value":"/ * $d_i$ is the degree adjustment factor needed to normalize all constraints to the same degree.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":119078,"byte_end":119177,"line_start":26,"line_end":26,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":119178,"byte_end":119181,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ The coefficients are separated into two lists: one for transition constraints and another one","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":119182,"byte_end":119279,"line_start":28,"line_end":28,"column_start":1,"column_end":98}},{"value":"/ for boundary constraints. This separation is done for convenience only.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":119280,"byte_end":119355,"line_start":29,"line_end":29,"column_start":1,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":1023},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":119452,"byte_end":119462,"line_start":32,"line_end":32,"column_start":9,"column_end":19},"name":"transition","qualname":"::air::coefficients::ConstraintCompositionCoefficients::transition","value":"std::vec::Vec<(E, E)>","parent":{"krate":0,"index":1021},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1024},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":119485,"byte_end":119493,"line_start":33,"line_end":33,"column_start":9,"column_end":17},"name":"boundary","qualname":"::air::coefficients::ConstraintCompositionCoefficients::boundary","value":"std::vec::Vec<(E, E)>","parent":{"krate":0,"index":1021},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1031},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":122022,"byte_end":122049,"line_start":77,"line_end":77,"column_start":12,"column_end":39},"name":"DeepCompositionCoefficients","qualname":"::air::coefficients::DeepCompositionCoefficients","value":"DeepCompositionCoefficients { trace, constraints, degree }","parent":null,"children":[{"krate":0,"index":1033},{"krate":0,"index":1034},{"krate":0,"index":1035}],"decl_id":null,"docs":" Coefficients used in construction of DEEP composition polynomial.","sig":null,"attributes":[{"value":"/ Coefficients used in construction of DEEP composition polynomial.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":119644,"byte_end":119713,"line_start":38,"line_end":38,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":119714,"byte_end":119717,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ These coefficients are created by the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":119718,"byte_end":119759,"line_start":40,"line_end":40,"column_start":1,"column_end":42}},{"value":"/ [Air::get_deep_composition_coefficients()](crate::Air::get_deep_composition_coefficients)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":119760,"byte_end":119853,"line_start":41,"line_end":41,"column_start":1,"column_end":94}},{"value":"/ function. In the interactive version of the protocol, the verifier draws these coefficients","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":119854,"byte_end":119949,"line_start":42,"line_end":42,"column_start":1,"column_end":96}},{"value":"/ uniformly at random from the extension field of the protocol.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":119950,"byte_end":120015,"line_start":43,"line_end":43,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":120016,"byte_end":120019,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ The coefficients are used in computing the DEEP composition polynomial in two steps. First,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":120020,"byte_end":120115,"line_start":45,"line_end":45,"column_start":1,"column_end":96}},{"value":"/ we compute a random linear combination of trace and constraint composition polynomials as:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":120116,"byte_end":120210,"line_start":46,"line_end":46,"column_start":1,"column_end":95}},{"value":"/ $$","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":120211,"byte_end":120217,"line_start":47,"line_end":47,"column_start":1,"column_end":7}},{"value":"/ Y(x) = \\sum_{i=0}^k{(","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":120218,"byte_end":120243,"line_start":48,"line_end":48,"column_start":1,"column_end":26}},{"value":"/     \\alpha_i \\cdot \\frac{T_i(x) - T_i(z)}{x - z} +","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":120244,"byte_end":120298,"line_start":49,"line_end":49,"column_start":1,"column_end":55}},{"value":"/     \\beta_i \\cdot \\frac{T_i(x) - T_i(z \\cdot g)}{x - z \\cdot g} +","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":120299,"byte_end":120368,"line_start":50,"line_end":50,"column_start":1,"column_end":70}},{"value":"/     \\gamma_i \\cdot \\frac{T_i(x) - T_i(\\overline{z})}{x - \\overline{z}}","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":120369,"byte_end":120443,"line_start":51,"line_end":51,"column_start":1,"column_end":75}},{"value":"/ )} + \\sum_{j=0}^m{\\delta \\cdot \\frac{H_j(x) - H_j(z^m)}{x - z^m}}","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":120444,"byte_end":120513,"line_start":52,"line_end":52,"column_start":1,"column_end":70}},{"value":"/ $$","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":120514,"byte_end":120520,"line_start":53,"line_end":53,"column_start":1,"column_end":7}},{"value":"/ where:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":120521,"byte_end":120531,"line_start":54,"line_end":54,"column_start":1,"column_end":11}},{"value":"/ * $z$ is an out-of-domain point drawn randomly from the entire field. In the interactive","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":120532,"byte_end":120624,"line_start":55,"line_end":55,"column_start":1,"column_end":93}},{"value":"/   version of the protocol, $z$ is provided by the verifier. $\\overline{z}$ is the conjugate","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":120625,"byte_end":120720,"line_start":56,"line_end":56,"column_start":1,"column_end":96}},{"value":"/   of $z$.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":120721,"byte_end":120734,"line_start":57,"line_end":57,"column_start":1,"column_end":14}},{"value":"/ * $g$ is the generator of the trace domain. This is the same as $n$th root of unity where","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":120735,"byte_end":120828,"line_start":58,"line_end":58,"column_start":1,"column_end":94}},{"value":"/   $n$ is the length of the execution trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":120829,"byte_end":120876,"line_start":59,"line_end":59,"column_start":1,"column_end":48}},{"value":"/ * $T_i(x)$ is an evaluation of the $i$th trace polynomial at $x$, and $k$ is the total","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":120877,"byte_end":120967,"line_start":60,"line_end":60,"column_start":1,"column_end":91}},{"value":"/   number of trace polynomials (which is equal to the width of the execution trace).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":120968,"byte_end":121055,"line_start":61,"line_end":61,"column_start":1,"column_end":88}},{"value":"/ * $H_i(x)$ is an evaluation of the $j$th constraint composition column polynomial at $x$,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":121056,"byte_end":121149,"line_start":62,"line_end":62,"column_start":1,"column_end":94}},{"value":"/   and $m$ is the total number of column polynomials. The number of column polynomials is equal","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":121150,"byte_end":121248,"line_start":63,"line_end":63,"column_start":1,"column_end":99}},{"value":"/   to the highest constraint degree rounded to the next power of two. For example, if the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":121249,"byte_end":121341,"line_start":64,"line_end":64,"column_start":1,"column_end":93}},{"value":"/   highest constraint degree is 6, $m$ will be equal to 8.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":121342,"byte_end":121403,"line_start":65,"line_end":65,"column_start":1,"column_end":62}},{"value":"/ * $\\alpha_i, \\beta_i, \\gamma_i$ are composition coefficients for the $i$th trace polynomial.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":121404,"byte_end":121500,"line_start":66,"line_end":66,"column_start":1,"column_end":97}},{"value":"/ * $\\delta_j$ is a composition coefficient for $j$th constraint column polynomial.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":121501,"byte_end":121586,"line_start":67,"line_end":67,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":121587,"byte_end":121590,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ $T(x)$ and $H(x)$ are polynomials of degree $n - 1$, where $n$ is the length of the execution","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":121591,"byte_end":121688,"line_start":69,"line_end":69,"column_start":1,"column_end":98}},{"value":"/ trace. Thus, the degree of $Y(x)$ polynomial is $n - 2$. To bring the degree back up to","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":121689,"byte_end":121780,"line_start":70,"line_end":70,"column_start":1,"column_end":92}},{"value":"/ $n - 1$, we compute the DEEP composition polynomial as:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":121781,"byte_end":121840,"line_start":71,"line_end":71,"column_start":1,"column_end":60}},{"value":"/ $$","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":121841,"byte_end":121847,"line_start":72,"line_end":72,"column_start":1,"column_end":7}},{"value":"/ C(x) = Y(x) \\cdot (\\lambda + \\mu \\cdot x)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":121848,"byte_end":121893,"line_start":73,"line_end":73,"column_start":1,"column_end":46}},{"value":"/ $$","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":121894,"byte_end":121900,"line_start":74,"line_end":74,"column_start":1,"column_end":7}},{"value":"/ where $\\lambda$ and $\\mu$ are the composition coefficients for degree adjustment.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":121901,"byte_end":121986,"line_start":75,"line_end":75,"column_start":1,"column_end":86}}]},{"kind":"Field","id":{"krate":0,"index":1033},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":122166,"byte_end":122171,"line_start":79,"line_end":79,"column_start":9,"column_end":14},"name":"trace","qualname":"::air::coefficients::DeepCompositionCoefficients::trace","value":"std::vec::Vec<(E, E, E)>","parent":{"krate":0,"index":1031},"children":[],"decl_id":null,"docs":" Trace polynomial composition coefficients $\\alpha_i$, $\\beta_i$, and $\\gamma_i$.\n","sig":null,"attributes":[{"value":"/ Trace polynomial composition coefficients $\\alpha_i$, $\\beta_i$, and $\\gamma_i$.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":122073,"byte_end":122157,"line_start":78,"line_end":78,"column_start":5,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":1034},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":122271,"byte_end":122282,"line_start":81,"line_end":81,"column_start":9,"column_end":20},"name":"constraints","qualname":"::air::coefficients::DeepCompositionCoefficients::constraints","value":"std::vec::Vec<E>","parent":{"krate":0,"index":1031},"children":[],"decl_id":null,"docs":" Constraint column polynomial composition coefficients $\\delta_j$.\n","sig":null,"attributes":[{"value":"/ Constraint column polynomial composition coefficients $\\delta_j$.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":122193,"byte_end":122262,"line_start":80,"line_end":80,"column_start":5,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":1035},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":122372,"byte_end":122378,"line_start":83,"line_end":83,"column_start":9,"column_end":15},"name":"degree","qualname":"::air::coefficients::DeepCompositionCoefficients::degree","value":"(E, E)","parent":{"krate":0,"index":1031},"children":[],"decl_id":null,"docs":" Degree adjustment composition coefficients $\\lambda$ and $\\mu$.\n","sig":null,"attributes":[{"value":"/ Degree adjustment composition coefficients $\\lambda$ and $\\mu$.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/coefficients.rs","byte_start":122296,"byte_end":122363,"line_start":82,"line_end":82,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1042},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":123608,"byte_end":123625,"line_start":26,"line_end":26,"column_start":12,"column_end":29},"name":"ConstraintDivisor","qualname":"::air::divisor::ConstraintDivisor","value":"ConstraintDivisor {  }","parent":null,"children":[{"krate":0,"index":1044},{"krate":0,"index":1045}],"decl_id":null,"docs":" The denominator portion of boundary and transition constraints.","sig":null,"attributes":[{"value":"/ The denominator portion of boundary and transition constraints.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":122833,"byte_end":122900,"line_start":13,"line_end":13,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":122901,"byte_end":122904,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ A divisor is described by a combination of a sparse polynomial, which describes the numerator","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":122905,"byte_end":123002,"line_start":15,"line_end":15,"column_start":1,"column_end":98}},{"value":"/ of the divisor and a set of exclusion points, which describe the denominator of the divisor.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":123003,"byte_end":123099,"line_start":16,"line_end":16,"column_start":1,"column_end":97}},{"value":"/ The numerator polynomial is described as multiplication of tuples where each tuple encodes","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":123100,"byte_end":123194,"line_start":17,"line_end":17,"column_start":1,"column_end":95}},{"value":"/ an expression $(x^a - b)$. The exclusion points encode expressions $(x - a)$.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":123195,"byte_end":123276,"line_start":18,"line_end":18,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":123277,"byte_end":123280,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ For example divisor $(x^a - 1) \\cdot (x^b - 2) / (x - 3)$ can be represented as:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":123281,"byte_end":123365,"line_start":20,"line_end":20,"column_start":1,"column_end":85}},{"value":"/ numerator: `[(a, 1), (b, 2)]`, exclude: `[3]`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":123366,"byte_end":123416,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":123417,"byte_end":123420,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ A divisor cannot be instantiated directly, and instead must be created either for an","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":123421,"byte_end":123509,"line_start":23,"line_end":23,"column_start":1,"column_end":89}},{"value":"/ [Assertion] or for a transition constraint.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":123510,"byte_end":123557,"line_start":24,"line_end":24,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":124581,"byte_end":124596,"line_start":53,"line_end":53,"column_start":12,"column_end":27},"name":"from_transition","qualname":"<ConstraintDivisor<B>>::from_transition","value":"pub fn from_transition(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a divisor for transition constraints.","sig":null,"attributes":[{"value":"/ Builds a divisor for transition constraints.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":124084,"byte_end":124132,"line_start":40,"line_end":40,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":124137,"byte_end":124140,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ For transition constraints, the divisor polynomial $z(x)$ is always the same:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":124145,"byte_end":124226,"line_start":42,"line_end":42,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":124231,"byte_end":124234,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ $$","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":124239,"byte_end":124245,"line_start":44,"line_end":44,"column_start":5,"column_end":11}},{"value":"/ z(x) = \\frac{x^n - 1}{x - g^{n-1}}","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":124250,"byte_end":124288,"line_start":45,"line_end":45,"column_start":5,"column_end":43}},{"value":"/ $$","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":124293,"byte_end":124299,"line_start":46,"line_end":46,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":124304,"byte_end":124307,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ where, $n$ is the length of the execution trace, and $g$ is the generator of the trace","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":124312,"byte_end":124402,"line_start":48,"line_end":48,"column_start":5,"column_end":95}},{"value":"/ domain.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":124407,"byte_end":124418,"line_start":49,"line_end":49,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":124423,"byte_end":124426,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ The above divisor specifies that transition constraints must hold on all steps of the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":124431,"byte_end":124520,"line_start":51,"line_end":51,"column_start":5,"column_end":94}},{"value":"/ execution trace except for the last one.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":124525,"byte_end":124569,"line_start":52,"line_end":52,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":126213,"byte_end":126227,"line_start":81,"line_end":81,"column_start":12,"column_end":26},"name":"from_assertion","qualname":"<ConstraintDivisor<B>>::from_assertion","value":"pub fn from_assertion(&Assertion<B>, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Builds a divisor for a boundary constraint described by the assertion.","sig":null,"attributes":[{"value":"/ Builds a divisor for a boundary constraint described by the assertion.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":124802,"byte_end":124876,"line_start":58,"line_end":58,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":124881,"byte_end":124884,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ For boundary constraints, the divisor polynomial is defined as:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":124889,"byte_end":124956,"line_start":60,"line_end":60,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":124961,"byte_end":124964,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ $$","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":124969,"byte_end":124975,"line_start":62,"line_end":62,"column_start":5,"column_end":11}},{"value":"/ z(x) = x^k - g^{a \\cdot k}","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":124980,"byte_end":125010,"line_start":63,"line_end":63,"column_start":5,"column_end":35}},{"value":"/ $$","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":125015,"byte_end":125021,"line_start":64,"line_end":64,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":125026,"byte_end":125029,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ where $g$ is the generator of the trace domain, $k$ is the number of asserted steps, and","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":125034,"byte_end":125126,"line_start":66,"line_end":66,"column_start":5,"column_end":97}},{"value":"/ $a$ is the step offset in the trace domain. Specifically:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":125131,"byte_end":125192,"line_start":67,"line_end":67,"column_start":5,"column_end":66}},{"value":"/ * For an assertion against a single step, the polynomial is $(x - g^a)$, where $a$ is the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":125197,"byte_end":125290,"line_start":68,"line_end":68,"column_start":5,"column_end":98}},{"value":"/   step on which the assertion should hold.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":125295,"byte_end":125341,"line_start":69,"line_end":69,"column_start":5,"column_end":51}},{"value":"/ * For an assertion against a sequence of steps which fall on powers of two, it is","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":125346,"byte_end":125431,"line_start":70,"line_end":70,"column_start":5,"column_end":90}},{"value":"/   $(x^k - 1)$ where $k$ is the number of asserted steps.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":125436,"byte_end":125496,"line_start":71,"line_end":71,"column_start":5,"column_end":65}},{"value":"/ * For assertions against a sequence of steps which repeat with a period that is a power","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":125501,"byte_end":125592,"line_start":72,"line_end":72,"column_start":5,"column_end":96}},{"value":"/   of two but don't fall exactly on steps which are powers of two (e.g. 1, 9, 17, ... )","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":125597,"byte_end":125687,"line_start":73,"line_end":73,"column_start":5,"column_end":95}},{"value":"/   it is $(x^k - g^{a \\cdot k})$, where $a$ is the number of steps by which the assertion steps","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":125692,"byte_end":125790,"line_start":74,"line_end":74,"column_start":5,"column_end":103}},{"value":"/   deviate from a power of two, and $k$ is the number of asserted steps. This is equivalent to","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":125795,"byte_end":125892,"line_start":75,"line_end":75,"column_start":5,"column_end":102}},{"value":"/   $(x - g^a) \\cdot (x - g^{a + j}) \\cdot (x - g^{a + 2 \\cdot j}) ... (x - g^{a + (k  - 1) \\cdot j})$,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":125897,"byte_end":126002,"line_start":76,"line_end":76,"column_start":5,"column_end":110}},{"value":"/   where $j$ is the length of interval between asserted steps (e.g. 8).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":126007,"byte_end":126081,"line_start":77,"line_end":77,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":126086,"byte_end":126089,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":126094,"byte_end":126106,"line_start":79,"line_end":79,"column_start":5,"column_end":17}},{"value":"/ Panics of the specified `trace_length` is inconsistent with the specified `assertion`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":126111,"byte_end":126201,"line_start":80,"line_end":80,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":126887,"byte_end":126896,"line_start":96,"line_end":96,"column_start":12,"column_end":21},"name":"numerator","qualname":"<ConstraintDivisor<B>>::numerator","value":"pub fn numerator(&Self) -> &[(usize, B)]","parent":null,"children":[],"decl_id":null,"docs":" Returns the numerator portion of this constraint divisor.\n","sig":null,"attributes":[{"value":"/ Returns the numerator portion of this constraint divisor.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":126814,"byte_end":126875,"line_start":95,"line_end":95,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":127053,"byte_end":127060,"line_start":101,"line_end":101,"column_start":12,"column_end":19},"name":"exclude","qualname":"<ConstraintDivisor<B>>::exclude","value":"pub fn exclude(&Self) -> &[B]","parent":null,"children":[],"decl_id":null,"docs":" Returns exclusion points (the denominator portion) of this constraints divisor.\n","sig":null,"attributes":[{"value":"/ Returns exclusion points (the denominator portion) of this constraints divisor.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":126958,"byte_end":127041,"line_start":100,"line_end":100,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":127171,"byte_end":127177,"line_start":106,"line_end":106,"column_start":12,"column_end":18},"name":"degree","qualname":"<ConstraintDivisor<B>>::degree","value":"pub fn degree(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the degree of the divisor polynomial\n","sig":null,"attributes":[{"value":"/ Returns the degree of the divisor polynomial","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":127111,"byte_end":127159,"line_start":105,"line_end":105,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":127636,"byte_end":127647,"line_start":118,"line_end":118,"column_start":12,"column_end":23},"name":"evaluate_at","qualname":"<ConstraintDivisor<B>>::evaluate_at","value":"pub fn evaluate_at<E: FieldElement<BaseField = B>>(&Self, E) -> E","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the divisor polynomial at the provided `x` coordinate.\n","sig":null,"attributes":[{"value":"/ Evaluates the divisor polynomial at the provided `x` coordinate.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":127556,"byte_end":127624,"line_start":117,"line_end":117,"column_start":5,"column_end":73}}]},{"kind":"Trait","id":{"krate":0,"index":626},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":55739,"byte_end":55742,"line_start":145,"line_end":145,"column_start":11,"column_end":14},"name":"Air","qualname":"::air::Air","value":"Air: Send + Sync","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":640},{"krate":0,"index":644},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":668}],"decl_id":null,"docs":" Describes algebraic intermediate representation of a computation.","sig":null,"attributes":[{"value":"/ Describes algebraic intermediate representation of a computation.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":49335,"byte_end":49404,"line_start":45,"line_end":45,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":49405,"byte_end":49408,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ To describe AIR for a given computation, you'll need to implement the `Air` trait which","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":49409,"byte_end":49500,"line_start":47,"line_end":47,"column_start":1,"column_end":92}},{"value":"/ involves the following:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":49501,"byte_end":49528,"line_start":48,"line_end":48,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":49529,"byte_end":49532,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ 1. Define base field for your computation via the [Air::BaseField] associated type (see","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":49533,"byte_end":49624,"line_start":50,"line_end":50,"column_start":1,"column_end":92}},{"value":"/    [math::fields] for available field options).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":49625,"byte_end":49676,"line_start":51,"line_end":51,"column_start":1,"column_end":52}},{"value":"/ 2. Define a set of public inputs which are required for your computation via the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":49677,"byte_end":49761,"line_start":52,"line_end":52,"column_start":1,"column_end":85}},{"value":"/    [Air::PublicInputs] associated type.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":49762,"byte_end":49805,"line_start":53,"line_end":53,"column_start":1,"column_end":44}},{"value":"/ 3. Implement [Air::new()] function. As a part of this function you should create a","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":49806,"byte_end":49892,"line_start":54,"line_end":54,"column_start":1,"column_end":87}},{"value":"/    [AirContext] struct which takes degrees for all transition constraints as one of","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":49893,"byte_end":49980,"line_start":55,"line_end":55,"column_start":1,"column_end":88}},{"value":"/    the constructor parameters.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":49981,"byte_end":50015,"line_start":56,"line_end":56,"column_start":1,"column_end":35}},{"value":"/ 4. Implement [Air::context()] method which should return a reference to the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":50016,"byte_end":50095,"line_start":57,"line_end":57,"column_start":1,"column_end":80}},{"value":"/    [AirContext] struct created in [Air::new()] function.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":50096,"byte_end":50156,"line_start":58,"line_end":58,"column_start":1,"column_end":61}},{"value":"/ 5. Implement [Air::evaluate_transition()] method which should evaluate","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":50157,"byte_end":50231,"line_start":59,"line_end":59,"column_start":1,"column_end":75}},{"value":"/    [transition constraints](#transition-constraints) over a given evaluation frame.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":50232,"byte_end":50319,"line_start":60,"line_end":60,"column_start":1,"column_end":88}},{"value":"/ 6. Implement [Air::get_assertions()] method which should return a vector of","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":50320,"byte_end":50399,"line_start":61,"line_end":61,"column_start":1,"column_end":80}},{"value":"/    [assertions](#trace-assertions) for a given instance of your computation.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":50400,"byte_end":50480,"line_start":62,"line_end":62,"column_start":1,"column_end":81}},{"value":"/ 7. If your computation requires [periodic values](#periodic-values), you can also override","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":50481,"byte_end":50575,"line_start":63,"line_end":63,"column_start":1,"column_end":95}},{"value":"/    the default [Air::get_periodic_column_values()] method.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":50576,"byte_end":50638,"line_start":64,"line_end":64,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":50639,"byte_end":50642,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ ### Transition constraints","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":50643,"byte_end":50673,"line_start":66,"line_end":66,"column_start":1,"column_end":31}},{"value":"/ Transition constraints define algebraic relations between two consecutive steps of a","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":50674,"byte_end":50762,"line_start":67,"line_end":67,"column_start":1,"column_end":89}},{"value":"/ computation. In Winterfell, transition constraints are evaluated inside","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":50763,"byte_end":50838,"line_start":68,"line_end":68,"column_start":1,"column_end":76}},{"value":"/ [Air::evaluate_transition()] function which takes the following parameters:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":50839,"byte_end":50918,"line_start":69,"line_end":69,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":50919,"byte_end":50922,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ - [EvaluationFrame] which contains vectors with current and next states of the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":50923,"byte_end":51005,"line_start":71,"line_end":71,"column_start":1,"column_end":83}},{"value":"/   computation.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":51006,"byte_end":51024,"line_start":72,"line_end":72,"column_start":1,"column_end":19}},{"value":"/ - A list of periodic values. When periodic columns are defined for a computation,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":51025,"byte_end":51110,"line_start":73,"line_end":73,"column_start":1,"column_end":86}},{"value":"/   this will contain values of periodic columns at the current step of the computation.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":51111,"byte_end":51201,"line_start":74,"line_end":74,"column_start":1,"column_end":91}},{"value":"/   Otherwise, this will be an empty list.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":51202,"byte_end":51246,"line_start":75,"line_end":75,"column_start":1,"column_end":45}},{"value":"/ - A mutable `result` slice. This is the slice where constraint evaluations should be","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":51247,"byte_end":51335,"line_start":76,"line_end":76,"column_start":1,"column_end":89}},{"value":"/   written to. The length of this slice will be equal to the number of transition","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":51336,"byte_end":51420,"line_start":77,"line_end":77,"column_start":1,"column_end":85}},{"value":"/   constraints defined for the computation.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":51421,"byte_end":51467,"line_start":78,"line_end":78,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":51468,"byte_end":51471,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ The constraints are considered to be satisfied if and only if, after the function returns,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":51472,"byte_end":51566,"line_start":80,"line_end":80,"column_start":1,"column_end":95}},{"value":"/ the `result` slice contains all zeros. In general, it is important for the transition","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":51567,"byte_end":51656,"line_start":81,"line_end":81,"column_start":1,"column_end":90}},{"value":"/ constraint evaluation function to work as follows:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":51657,"byte_end":51711,"line_start":82,"line_end":82,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":51712,"byte_end":51715,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ * For all valid transitions between consecutive computation steps, transition constraints","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":51716,"byte_end":51809,"line_start":84,"line_end":84,"column_start":1,"column_end":94}},{"value":"/   should evaluation to all zeros.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":51810,"byte_end":51847,"line_start":85,"line_end":85,"column_start":1,"column_end":38}},{"value":"/ * For any invalid transition, at least one constraint must evaluate to a non-zero value.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":51848,"byte_end":51940,"line_start":86,"line_end":86,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":51941,"byte_end":51944,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ **Note:** since transition constraints define algebraic relations, they should be","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":51945,"byte_end":52030,"line_start":88,"line_end":88,"column_start":1,"column_end":86}},{"value":"/ described using only algebraic operations: additions, subtractions, and multiplications","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":52031,"byte_end":52122,"line_start":89,"line_end":89,"column_start":1,"column_end":92}},{"value":"/ (divisions can be emulated using inverse of multiplication).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":52123,"byte_end":52187,"line_start":90,"line_end":90,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":52188,"byte_end":52191,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ### Constraint degrees","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":52192,"byte_end":52218,"line_start":92,"line_end":92,"column_start":1,"column_end":27}},{"value":"/ One of the main factors impacting proof generation time and proof size is the maximum degree","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":52219,"byte_end":52315,"line_start":93,"line_end":93,"column_start":1,"column_end":97}},{"value":"/ of transition constraints. The higher is this degree, the larger our blowup factor needs to be.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":52316,"byte_end":52415,"line_start":94,"line_end":94,"column_start":1,"column_end":100}},{"value":"/ Usually, we want to keep this degree as low as possible - e.g. under 4 or 8. To accurately","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":52416,"byte_end":52510,"line_start":95,"line_end":95,"column_start":1,"column_end":95}},{"value":"/ describe degrees of your transition constraints, keep the following in mind:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":52511,"byte_end":52591,"line_start":96,"line_end":96,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":52592,"byte_end":52595,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ * All trace registers have degree `1`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":52596,"byte_end":52638,"line_start":98,"line_end":98,"column_start":1,"column_end":43}},{"value":"/ * When multiplying trace registers together, the degree increases by `1`. For example, if our","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":52639,"byte_end":52736,"line_start":99,"line_end":99,"column_start":1,"column_end":98}},{"value":"/   constraint involves multiplication of two registers, the degree of this constraint will be","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":52737,"byte_end":52833,"line_start":100,"line_end":100,"column_start":1,"column_end":97}},{"value":"/   `2`. We can describe this constraint using [TransitionConstraintDegree] struct as follows:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":52834,"byte_end":52930,"line_start":101,"line_end":101,"column_start":1,"column_end":97}},{"value":"/   `TransitionConstraintDegree::new(2)`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":52931,"byte_end":52974,"line_start":102,"line_end":102,"column_start":1,"column_end":44}},{"value":"/ * Degrees of periodic columns depend on the length of their cycles, but in most cases, these","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":52975,"byte_end":53071,"line_start":103,"line_end":103,"column_start":1,"column_end":97}},{"value":"/   degrees are very close to `1`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":53072,"byte_end":53108,"line_start":104,"line_end":104,"column_start":1,"column_end":37}},{"value":"/ * To describe a degree of a constraint involving multiplication of trace registers and","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":53109,"byte_end":53199,"line_start":105,"line_end":105,"column_start":1,"column_end":91}},{"value":"/   periodic columns, use the [TransitionConstraintDegree::with_cycles()] constructor. For","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":53200,"byte_end":53292,"line_start":106,"line_end":106,"column_start":1,"column_end":93}},{"value":"/   example, if our constraint involves multiplication of one trace register and one periodic","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":53293,"byte_end":53388,"line_start":107,"line_end":107,"column_start":1,"column_end":96}},{"value":"/   column with a cycle of 32 steps, the degree can be described as:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":53389,"byte_end":53459,"line_start":108,"line_end":108,"column_start":1,"column_end":71}},{"value":"/   `TransitionConstraintDegree::with_cycles(1, vec![32])`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":53460,"byte_end":53521,"line_start":109,"line_end":109,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":53522,"byte_end":53525,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ In general, multiplications should be used judiciously - though, there are ways to ease this","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":53526,"byte_end":53622,"line_start":111,"line_end":111,"column_start":1,"column_end":97}},{"value":"/ restriction a bit at the expense of wider execution trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":53623,"byte_end":53685,"line_start":112,"line_end":112,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":53686,"byte_end":53689,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ ### Trace assertions","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":53690,"byte_end":53714,"line_start":114,"line_end":114,"column_start":1,"column_end":25}},{"value":"/ Assertions are used to specify that a valid execution trace of a computation must contain","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":53715,"byte_end":53808,"line_start":115,"line_end":115,"column_start":1,"column_end":94}},{"value":"/ certain values in certain cells. They are frequently used to tie public inputs to a specific","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":53809,"byte_end":53905,"line_start":116,"line_end":116,"column_start":1,"column_end":97}},{"value":"/ execution trace, but can be used to constrain a computation in other ways as well.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":53906,"byte_end":53992,"line_start":117,"line_end":117,"column_start":1,"column_end":87}},{"value":"/ Internally within Winterfell, assertions are converted into *boundary constraints*.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":53993,"byte_end":54080,"line_start":118,"line_end":118,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":54081,"byte_end":54084,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ To define assertions for your computation, you'll need to implement [Air::get_assertions()]","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":54085,"byte_end":54180,"line_start":120,"line_end":120,"column_start":1,"column_end":96}},{"value":"/ function which should return a vector of [Assertion] structs. Every computation must have at","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":54181,"byte_end":54277,"line_start":121,"line_end":121,"column_start":1,"column_end":97}},{"value":"/ least one assertion. Assertions can be of the following types:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":54278,"byte_end":54344,"line_start":122,"line_end":122,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":54345,"byte_end":54348,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ * A single assertion - such assertion specifies that a single cell of an execution trace must","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":54349,"byte_end":54446,"line_start":124,"line_end":124,"column_start":1,"column_end":98}},{"value":"/   be equal to a specific value. For example: *value in register 0, at step 0, must be equal","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":54447,"byte_end":54542,"line_start":125,"line_end":125,"column_start":1,"column_end":96}},{"value":"/   to 1*.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":54543,"byte_end":54555,"line_start":126,"line_end":126,"column_start":1,"column_end":13}},{"value":"/ * A periodic assertion - such assertion specifies that values in a given register at specified","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":54556,"byte_end":54654,"line_start":127,"line_end":127,"column_start":1,"column_end":99}},{"value":"/   intervals should be equal to some value. For example: *values in register 0, at steps 0, 8,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":54655,"byte_end":54752,"line_start":128,"line_end":128,"column_start":1,"column_end":98}},{"value":"/   16, 24 etc. must be equal to 2*.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":54753,"byte_end":54791,"line_start":129,"line_end":129,"column_start":1,"column_end":39}},{"value":"/ * A sequence assertion - such assertion specifies that values in a given register at specific","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":54792,"byte_end":54889,"line_start":130,"line_end":130,"column_start":1,"column_end":98}},{"value":"/   intervals must be equal to a sequence of provided values. For example: *values in register 0,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":54890,"byte_end":54989,"line_start":131,"line_end":131,"column_start":1,"column_end":100}},{"value":"/   at step 0 must be equal to 1, at step 8 must be equal to 2, at step 16 must be equal to 3","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":54990,"byte_end":55085,"line_start":132,"line_end":132,"column_start":1,"column_end":96}},{"value":"/   etc.*","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":55086,"byte_end":55097,"line_start":133,"line_end":133,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":55098,"byte_end":55101,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ ### Periodic values","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":55102,"byte_end":55125,"line_start":135,"line_end":135,"column_start":1,"column_end":24}},{"value":"/ Sometimes, it may be useful to define a column in an execution trace which contains a set of","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":55126,"byte_end":55222,"line_start":136,"line_end":136,"column_start":1,"column_end":97}},{"value":"/ repeating values. For example, let's say we have a register which contains value 1 on every","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":55223,"byte_end":55318,"line_start":137,"line_end":137,"column_start":1,"column_end":96}},{"value":"/ 4th step, and 0 otherwise. Such a column can be described with a simple periodic sequence of","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":55319,"byte_end":55415,"line_start":138,"line_end":138,"column_start":1,"column_end":97}},{"value":"/ `[1, 0, 0, 0]`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":55416,"byte_end":55435,"line_start":139,"line_end":139,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":55436,"byte_end":55439,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ To define such columns for your computation, you can override","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":55440,"byte_end":55505,"line_start":141,"line_end":141,"column_start":1,"column_end":66}},{"value":"/ [Air::get_periodic_column_values()] method. The values of the periodic columns at a given","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":55506,"byte_end":55599,"line_start":142,"line_end":142,"column_start":1,"column_end":94}},{"value":"/ step of the computation will be supplied to the [Air::evaluate_transition()] method via the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":55600,"byte_end":55695,"line_start":143,"line_end":143,"column_start":1,"column_end":96}},{"value":"/ `periodic_values` parameter.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":55696,"byte_end":55728,"line_start":144,"line_end":144,"column_start":1,"column_end":33}}]},{"kind":"Type","id":{"krate":0,"index":627},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":55993,"byte_end":56002,"line_start":149,"line_end":149,"column_start":10,"column_end":19},"name":"BaseField","qualname":"::air::Air::BaseField","value":"type BaseField: StarkField + ExtensibleField<2> + ExtensibleField<3>;","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Base field for the computation described by this AIR. STARK protocol for this computation\n may be executed in the base field, or in an extension of the base fields as specified\n by [ProofOptions] struct.\n","sig":null,"attributes":[{"value":"/ Base field for the computation described by this AIR. STARK protocol for this computation","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":55762,"byte_end":55855,"line_start":146,"line_end":146,"column_start":5,"column_end":98}},{"value":"/ may be executed in the base field, or in an extension of the base fields as specified","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":55860,"byte_end":55949,"line_start":147,"line_end":147,"column_start":5,"column_end":94}},{"value":"/ by [ProofOptions] struct.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":55954,"byte_end":55983,"line_start":148,"line_end":148,"column_start":5,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":630},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":56252,"byte_end":56264,"line_start":153,"line_end":153,"column_start":10,"column_end":22},"name":"PublicInputs","qualname":"::air::Air::PublicInputs","value":"type PublicInputs: Serializable;","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" A type defining shape of public inputs for the computation described by this protocol.\n This could be any type as long as it can be serialized into a sequence of bytes.\n","sig":null,"attributes":[{"value":"/ A type defining shape of public inputs for the computation described by this protocol.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":56063,"byte_end":56153,"line_start":151,"line_end":151,"column_start":5,"column_end":95}},{"value":"/ This could be any type as long as it can be serialized into a sequence of bytes.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":56158,"byte_end":56242,"line_start":152,"line_end":152,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":57079,"byte_end":57082,"line_start":166,"line_end":166,"column_start":8,"column_end":11},"name":"new","qualname":"::air::Air::new","value":"pub fn new(TraceInfo, Self::PublicInputs, ProofOptions) -> Self","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns new instance of AIR for this computation instantiated from the provided parameters,\n which have the following meaning:\n - `trace_info` contains information about a concrete execution trace of the computation\n   described by this AIR, including trace width, trace length length, and optionally,\n   additional custom parameters in `meta` field.\n - `public_inputs` specifies public inputs for this instance of the computation.\n - `options` defines proof generation options such as blowup factor, hash function etc.\n   these options define security level of the proof and influence proof generation time.\n","sig":null,"attributes":[{"value":"/ Returns new instance of AIR for this computation instantiated from the provided parameters,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":56410,"byte_end":56505,"line_start":158,"line_end":158,"column_start":5,"column_end":100}},{"value":"/ which have the following meaning:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":56510,"byte_end":56547,"line_start":159,"line_end":159,"column_start":5,"column_end":42}},{"value":"/ - `trace_info` contains information about a concrete execution trace of the computation","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":56552,"byte_end":56643,"line_start":160,"line_end":160,"column_start":5,"column_end":96}},{"value":"/   described by this AIR, including trace width, trace length length, and optionally,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":56648,"byte_end":56736,"line_start":161,"line_end":161,"column_start":5,"column_end":93}},{"value":"/   additional custom parameters in `meta` field.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":56741,"byte_end":56792,"line_start":162,"line_end":162,"column_start":5,"column_end":56}},{"value":"/ - `public_inputs` specifies public inputs for this instance of the computation.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":56797,"byte_end":56880,"line_start":163,"line_end":163,"column_start":5,"column_end":88}},{"value":"/ - `options` defines proof generation options such as blowup factor, hash function etc.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":56885,"byte_end":56975,"line_start":164,"line_end":164,"column_start":5,"column_end":95}},{"value":"/   these options define security level of the proof and influence proof generation time.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":56980,"byte_end":57071,"line_start":165,"line_end":165,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":57240,"byte_end":57247,"line_start":169,"line_end":169,"column_start":8,"column_end":15},"name":"context","qualname":"::air::Air::context","value":"pub fn context(&Self) -> &AirContext<Self::BaseField>","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns context for this instance of the computation.\n","sig":null,"attributes":[{"value":"/ Returns context for this instance of the computation.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":57175,"byte_end":57232,"line_start":168,"line_end":168,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":57719,"byte_end":57738,"line_start":177,"line_end":177,"column_start":8,"column_end":27},"name":"evaluate_transition","qualname":"::air::Air::evaluate_transition","value":"pub fn evaluate_transition<E: FieldElement<BaseField =\n                           Self::BaseField>>(&Self, &EvaluationFrame<E>, &[E],\n                                             &mut [E])","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Evaluates transition constraints over the specified evaluation frame.","sig":null,"attributes":[{"value":"/ Evaluates transition constraints over the specified evaluation frame.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":57293,"byte_end":57366,"line_start":171,"line_end":171,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":57371,"byte_end":57374,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ The evaluations should be written into the `results` slice in the same order as the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":57379,"byte_end":57466,"line_start":173,"line_end":173,"column_start":5,"column_end":92}},{"value":"/ the order of transition constraint degree descriptors used to instantiate [AirContext]","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":57471,"byte_end":57561,"line_start":174,"line_end":174,"column_start":5,"column_end":95}},{"value":"/ for this AIR. Thus, the length of the `result` slice will equal to the number of","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":57566,"byte_end":57650,"line_start":175,"line_end":175,"column_start":5,"column_end":89}},{"value":"/ transition constraints defined for this computation.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":57655,"byte_end":57711,"line_start":176,"line_end":176,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":58001,"byte_end":58015,"line_start":185,"line_end":185,"column_start":8,"column_end":22},"name":"get_assertions","qualname":"::air::Air::get_assertions","value":"pub fn get_assertions(&Self) -> Vec<Assertion<Self::BaseField>>","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns a set of assertions against a concrete execution trace of this computation.\n","sig":null,"attributes":[{"value":"/ Returns a set of assertions against a concrete execution trace of this computation.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":57906,"byte_end":57993,"line_start":184,"line_end":184,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":58778,"byte_end":58804,"line_start":199,"line_end":199,"column_start":8,"column_end":34},"name":"get_periodic_column_values","qualname":"::air::Air::get_periodic_column_values","value":"pub fn get_periodic_column_values(&Self) -> Vec<Vec<Self::BaseField>>","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns values for all periodic columns used in the computation.","sig":null,"attributes":[{"value":"/ Returns values for all periodic columns used in the computation.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":58189,"byte_end":58257,"line_start":190,"line_end":190,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":58262,"byte_end":58265,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ These values will be used to compute column values at specific states of the computation","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":58270,"byte_end":58362,"line_start":192,"line_end":192,"column_start":5,"column_end":97}},{"value":"/ and passed in to the [evaluate_transition()](Air::evaluate_transition) method as","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":58367,"byte_end":58451,"line_start":193,"line_end":193,"column_start":5,"column_end":89}},{"value":"/ `periodic_values` parameter.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":58456,"byte_end":58488,"line_start":194,"line_end":194,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":58493,"byte_end":58496,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ The default implementation of this method returns an empty vector. For computations which","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":58501,"byte_end":58594,"line_start":196,"line_end":196,"column_start":5,"column_end":98}},{"value":"/ rely on periodic columns, this method should be overridden in the specialized","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":58599,"byte_end":58680,"line_start":197,"line_end":197,"column_start":5,"column_end":86}},{"value":"/ implementation. Number of values for each periodic column must be a power of two.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":58685,"byte_end":58770,"line_start":198,"line_end":198,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":59094,"byte_end":59119,"line_start":207,"line_end":207,"column_start":8,"column_end":33},"name":"get_periodic_column_polys","qualname":"::air::Air::get_periodic_column_polys","value":"pub fn get_periodic_column_polys(&Self) -> Vec<Vec<Self::BaseField>>","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns polynomial for all periodic columns.","sig":null,"attributes":[{"value":"/ Returns polynomial for all periodic columns.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":58873,"byte_end":58921,"line_start":203,"line_end":203,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":58926,"byte_end":58929,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ These polynomials are interpolated from the values returned from the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":58934,"byte_end":59006,"line_start":205,"line_end":205,"column_start":5,"column_end":77}},{"value":"/ [get_periodic_column_values()](Air::get_periodic_column_values) method.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":59011,"byte_end":59086,"line_start":206,"line_end":206,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":61112,"byte_end":61138,"line_start":248,"line_end":248,"column_start":8,"column_end":34},"name":"get_transition_constraints","qualname":"::air::Air::get_transition_constraints","value":"pub fn get_transition_constraints<E: FieldElement<BaseField =\n                                  Self::BaseField>>(&Self, &[(E, E)])\n-> Vec<TransitionConstraintGroup<E>>","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Groups transition constraints together by their degree.","sig":null,"attributes":[{"value":"/ Groups transition constraints together by their degree.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":60746,"byte_end":60805,"line_start":243,"line_end":243,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":60810,"byte_end":60813,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ This function also assigns coefficients to each constraint. These coefficients will be","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":60818,"byte_end":60908,"line_start":245,"line_end":245,"column_start":5,"column_end":95}},{"value":"/ used to compute a random linear combination of transition constraints evaluations during","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":60913,"byte_end":61005,"line_start":246,"line_end":246,"column_start":5,"column_end":97}},{"value":"/ constraint merging performed by [TransitionConstraintGroup::merge_evaluations()] function.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":61010,"byte_end":61104,"line_start":247,"line_end":247,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":62709,"byte_end":62733,"line_start":284,"line_end":284,"column_start":8,"column_end":32},"name":"get_boundary_constraints","qualname":"::air::Air::get_boundary_constraints","value":"pub fn get_boundary_constraints<E: FieldElement<BaseField =\n                                Self::BaseField>>(&Self, &[(E, E)])\n-> Vec<BoundaryConstraintGroup<Self::BaseField, E>>","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Convert assertions returned from [get_assertions()](Air::get_assertions) method into\n boundary constraints.","sig":null,"attributes":[{"value":"/ Convert assertions returned from [get_assertions()](Air::get_assertions) method into","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":62332,"byte_end":62420,"line_start":278,"line_end":278,"column_start":5,"column_end":93}},{"value":"/ boundary constraints.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":62425,"byte_end":62450,"line_start":279,"line_end":279,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":62455,"byte_end":62458,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ This function also assign coefficients to each constraint, and group the constraints by","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":62463,"byte_end":62554,"line_start":281,"line_end":281,"column_start":5,"column_end":96}},{"value":"/ denominator. The coefficients will be used to compute random linear combination of boundary","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":62559,"byte_end":62654,"line_start":282,"line_end":282,"column_start":5,"column_end":100}},{"value":"/ constraints during constraint merging.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":62659,"byte_end":62701,"line_start":283,"line_end":283,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":65157,"byte_end":65164,"line_start":336,"line_end":336,"column_start":8,"column_end":15},"name":"options","qualname":"::air::Air::options","value":"pub fn options(&Self) -> &ProofOptions","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns options which specify STARK protocol parameters for an instance of the computation\n described by this AIR.\n","sig":null,"attributes":[{"value":"/ Returns options which specify STARK protocol parameters for an instance of the computation","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":65024,"byte_end":65118,"line_start":334,"line_end":334,"column_start":5,"column_end":99}},{"value":"/ described by this AIR.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":65123,"byte_end":65149,"line_start":335,"line_end":335,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":65347,"byte_end":65357,"line_start":342,"line_end":342,"column_start":8,"column_end":18},"name":"trace_info","qualname":"::air::Air::trace_info","value":"pub fn trace_info(&Self) -> &TraceInfo","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns info of the execution trace for an instance of the computation described by\n this AIR.\n","sig":null,"attributes":[{"value":"/ Returns info of the execution trace for an instance of the computation described by","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":65234,"byte_end":65321,"line_start":340,"line_end":340,"column_start":5,"column_end":92}},{"value":"/ this AIR.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":65326,"byte_end":65339,"line_start":341,"line_end":341,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":65629,"byte_end":65641,"line_start":350,"line_end":350,"column_start":8,"column_end":20},"name":"trace_length","qualname":"::air::Air::trace_length","value":"pub fn trace_length(&Self) -> usize","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns length of the execution trace for an instance of the computation described by\n this AIR.","sig":null,"attributes":[{"value":"/ Returns length of the execution trace for an instance of the computation described by","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":65427,"byte_end":65516,"line_start":346,"line_end":346,"column_start":5,"column_end":94}},{"value":"/ this AIR.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":65521,"byte_end":65534,"line_start":347,"line_end":347,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":65539,"byte_end":65542,"line_start":348,"line_end":348,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":65888,"byte_end":65899,"line_start":358,"line_end":358,"column_start":8,"column_end":19},"name":"trace_width","qualname":"::air::Air::trace_width","value":"pub fn trace_width(&Self) -> usize","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns width of the execution trace for an instance of the computation described by\n this AIR.","sig":null,"attributes":[{"value":"/ Returns width of the execution trace for an instance of the computation described by","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":65714,"byte_end":65802,"line_start":354,"line_end":354,"column_start":5,"column_end":93}},{"value":"/ this AIR.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":65807,"byte_end":65820,"line_start":355,"line_end":355,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":65825,"byte_end":65828,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ This is guaranteed to be between 1 and 255.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":65833,"byte_end":65880,"line_start":357,"line_end":357,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":66141,"byte_end":66158,"line_start":366,"line_end":366,"column_start":8,"column_end":25},"name":"trace_poly_degree","qualname":"::air::Air::trace_poly_degree","value":"pub fn trace_poly_degree(&Self) -> usize","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns degree of trace polynomials for an instance of the computation described by\n this AIR.","sig":null,"attributes":[{"value":"/ Returns degree of trace polynomials for an instance of the computation described by","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":65971,"byte_end":66058,"line_start":362,"line_end":362,"column_start":5,"column_end":92}},{"value":"/ this AIR.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":66063,"byte_end":66076,"line_start":363,"line_end":363,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":66081,"byte_end":66084,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ The degree is always `trace_length` - 1.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":66089,"byte_end":66133,"line_start":365,"line_end":365,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":66444,"byte_end":66466,"line_start":374,"line_end":374,"column_start":8,"column_end":30},"name":"trace_domain_generator","qualname":"::air::Air::trace_domain_generator","value":"pub fn trace_domain_generator(&Self) -> Self::BaseField","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns the generator of the trace domain for an instance of the computation described\n by this AIR.","sig":null,"attributes":[{"value":"/ Returns the generator of the trace domain for an instance of the computation described","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":66220,"byte_end":66310,"line_start":370,"line_end":370,"column_start":5,"column_end":95}},{"value":"/ by this AIR.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":66315,"byte_end":66331,"line_start":371,"line_end":371,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":66336,"byte_end":66339,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ The generator is the $n$th root of unity where $n$ is the length of the execution trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":66344,"byte_end":66436,"line_start":373,"line_end":373,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":67028,"byte_end":67044,"line_start":386,"line_end":386,"column_start":8,"column_end":24},"name":"ce_blowup_factor","qualname":"::air::Air::ce_blowup_factor","value":"pub fn ce_blowup_factor(&Self) -> usize","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns constraint evaluation domain blowup factor for the computation described by this\n AIR.","sig":null,"attributes":[{"value":"/ Returns constraint evaluation domain blowup factor for the computation described by this","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":66552,"byte_end":66644,"line_start":378,"line_end":378,"column_start":5,"column_end":97}},{"value":"/ AIR.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":66649,"byte_end":66657,"line_start":379,"line_end":379,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":66662,"byte_end":66665,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ The blowup factor is defined as the smallest power of two greater than or equal to the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":66670,"byte_end":66760,"line_start":381,"line_end":381,"column_start":5,"column_end":95}},{"value":"/ hightest transition constraint degree. For example, if the hightest transition","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":66765,"byte_end":66847,"line_start":382,"line_end":382,"column_start":5,"column_end":87}},{"value":"/ constraint degree = 3, `ce_blowup_factor` will be set to 4.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":66852,"byte_end":66915,"line_start":383,"line_end":383,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":66920,"byte_end":66923,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ `ce_blowup_factor` is guaranteed to be smaller than or equal to the `lde_blowup_factor`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":66928,"byte_end":67020,"line_start":385,"line_end":385,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":67283,"byte_end":67297,"line_start":393,"line_end":393,"column_start":8,"column_end":22},"name":"ce_domain_size","qualname":"::air::Air::ce_domain_size","value":"pub fn ce_domain_size(&Self) -> usize","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns size of the constraint evaluation domain.","sig":null,"attributes":[{"value":"/ Returns size of the constraint evaluation domain.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":67114,"byte_end":67167,"line_start":390,"line_end":390,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":67172,"byte_end":67175,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ This is guaranteed to be a power of two, and is equal to `trace_length * ce_blowup_factor`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":67180,"byte_end":67275,"line_start":392,"line_end":392,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":67592,"byte_end":67610,"line_start":401,"line_end":401,"column_start":8,"column_end":26},"name":"composition_degree","qualname":"::air::Air::composition_degree","value":"pub fn composition_degree(&Self) -> usize","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns the degree to which all constraint polynomials are normalized before they are\n composed together.","sig":null,"attributes":[{"value":"/ Returns the degree to which all constraint polynomials are normalized before they are","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":67381,"byte_end":67470,"line_start":397,"line_end":397,"column_start":5,"column_end":94}},{"value":"/ composed together.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":67475,"byte_end":67497,"line_start":398,"line_end":398,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":67502,"byte_end":67505,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ This degree is one less than the size of constraint evaluation domain.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":67510,"byte_end":67584,"line_start":400,"line_end":400,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":67899,"byte_end":67916,"line_start":408,"line_end":408,"column_start":8,"column_end":25},"name":"lde_blowup_factor","qualname":"::air::Air::lde_blowup_factor","value":"pub fn lde_blowup_factor(&Self) -> usize","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns low-degree extension domain blowup factor for the computation described by this\n AIR. This is guaranteed to be a power of two, and is always either equal to or greater\n than ce_blowup_factor.\n","sig":null,"attributes":[{"value":"/ Returns low-degree extension domain blowup factor for the computation described by this","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":67674,"byte_end":67765,"line_start":405,"line_end":405,"column_start":5,"column_end":96}},{"value":"/ AIR. This is guaranteed to be a power of two, and is always either equal to or greater","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":67770,"byte_end":67860,"line_start":406,"line_end":406,"column_start":5,"column_end":95}},{"value":"/ than ce_blowup_factor.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":67865,"byte_end":67891,"line_start":407,"line_end":407,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":68166,"byte_end":68181,"line_start":415,"line_end":415,"column_start":8,"column_end":23},"name":"lde_domain_size","qualname":"::air::Air::lde_domain_size","value":"pub fn lde_domain_size(&Self) -> usize","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns the size of the low-degree extension domain.","sig":null,"attributes":[{"value":"/ Returns the size of the low-degree extension domain.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":67993,"byte_end":68049,"line_start":412,"line_end":412,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":68054,"byte_end":68057,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ This is guaranteed to be a power of two, and is equal to `trace_length * lde_blowup_factor`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":68062,"byte_end":68158,"line_start":414,"line_end":414,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":68523,"byte_end":68543,"line_start":424,"line_end":424,"column_start":8,"column_end":28},"name":"lde_domain_generator","qualname":"::air::Air::lde_domain_generator","value":"pub fn lde_domain_generator(&Self) -> Self::BaseField","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns the generator of the low-degree extension domain for an instance of the\n computation described by this AIR.","sig":null,"attributes":[{"value":"/ Returns the generator of the low-degree extension domain for an instance of the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":68266,"byte_end":68349,"line_start":419,"line_end":419,"column_start":5,"column_end":88}},{"value":"/ computation described by this AIR.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":68354,"byte_end":68392,"line_start":420,"line_end":420,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":68397,"byte_end":68400,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ The generator is the $n$th root of unity where $n$ is the size of the low-degree extension","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":68405,"byte_end":68499,"line_start":422,"line_end":422,"column_start":5,"column_end":99}},{"value":"/ domain.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":68504,"byte_end":68515,"line_start":423,"line_end":423,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":68764,"byte_end":68777,"line_start":430,"line_end":430,"column_start":8,"column_end":21},"name":"domain_offset","qualname":"::air::Air::domain_offset","value":"pub fn domain_offset(&Self) -> Self::BaseField","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns the offset by which the domain for low-degree extension is shifted in relation\n to the execution trace domain.\n","sig":null,"attributes":[{"value":"/ Returns the offset by which the domain for low-degree extension is shifted in relation","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":68627,"byte_end":68717,"line_start":428,"line_end":428,"column_start":5,"column_end":95}},{"value":"/ to the execution trace domain.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":68722,"byte_end":68756,"line_start":429,"line_end":429,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":69157,"byte_end":69186,"line_start":439,"line_end":439,"column_start":8,"column_end":37},"name":"transition_constraint_degrees","qualname":"::air::Air::transition_constraint_degrees","value":"pub fn transition_constraint_degrees(&Self) -> &[TransitionConstraintDegree]","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns a list of transition constraint degree description for an instance of the\n computation described by this AIR.","sig":null,"attributes":[{"value":"/ Returns a list of transition constraint degree description for an instance of the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":68864,"byte_end":68949,"line_start":434,"line_end":434,"column_start":5,"column_end":90}},{"value":"/ computation described by this AIR.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":68954,"byte_end":68992,"line_start":435,"line_end":435,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":68997,"byte_end":69000,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ This list will be identical to the list passed into the [AirContext::new()] method as","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":69005,"byte_end":69094,"line_start":437,"line_end":437,"column_start":5,"column_end":94}},{"value":"/ the `transition_constraint_degrees` parameter.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":69099,"byte_end":69149,"line_start":438,"line_end":438,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":69547,"byte_end":69573,"line_start":448,"line_end":448,"column_start":8,"column_end":34},"name":"num_transition_constraints","qualname":"::air::Air::num_transition_constraints","value":"pub fn num_transition_constraints(&Self) -> usize","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns the number of transition constraints for an instance of the computation described\n by this AIR.","sig":null,"attributes":[{"value":"/ Returns the number of transition constraints for an instance of the computation described","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":69294,"byte_end":69387,"line_start":443,"line_end":443,"column_start":5,"column_end":98}},{"value":"/ by this AIR.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":69392,"byte_end":69408,"line_start":444,"line_end":444,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":69413,"byte_end":69416,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ The number of transition constraints is defined by the number of transition constraint","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":69421,"byte_end":69511,"line_start":446,"line_end":446,"column_start":5,"column_end":95}},{"value":"/ degree descriptors.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":69516,"byte_end":69539,"line_start":447,"line_end":447,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":70127,"byte_end":70156,"line_start":463,"line_end":463,"column_start":8,"column_end":37},"name":"transition_constraint_divisor","qualname":"::air::Air::transition_constraint_divisor","value":"pub fn transition_constraint_divisor(&Self)\n-> ConstraintDivisor<Self::BaseField>","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns a divisor for transition constraints.","sig":null,"attributes":[{"value":"/ Returns a divisor for transition constraints.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":69662,"byte_end":69711,"line_start":452,"line_end":452,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":69716,"byte_end":69719,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ All transition constraints have the same divisor which has the form:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":69724,"byte_end":69796,"line_start":454,"line_end":454,"column_start":5,"column_end":77}},{"value":"/ $$","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":69801,"byte_end":69807,"line_start":455,"line_end":455,"column_start":5,"column_end":11}},{"value":"/ z(x) = \\frac{x^n - 1}{x - g^{n - 1}}","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":69812,"byte_end":69852,"line_start":456,"line_end":456,"column_start":5,"column_end":45}},{"value":"/ $$","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":69857,"byte_end":69863,"line_start":457,"line_end":457,"column_start":5,"column_end":11}},{"value":"/ where: $n$ is the length of the execution trace and $g$ is the generator of the trace","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":69868,"byte_end":69957,"line_start":458,"line_end":458,"column_start":5,"column_end":94}},{"value":"/ domain.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":69962,"byte_end":69973,"line_start":459,"line_end":459,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":69978,"byte_end":69981,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ This divisor specifies that transition constraints must hold on all steps of the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":69986,"byte_end":70070,"line_start":461,"line_end":461,"column_start":5,"column_end":89}},{"value":"/ execution trace except for the last one.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":70075,"byte_end":70119,"line_start":462,"line_end":462,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":70554,"byte_end":70593,"line_start":472,"line_end":472,"column_start":8,"column_end":47},"name":"get_constraint_composition_coefficients","qualname":"::air::Air::get_constraint_composition_coefficients","value":"pub fn get_constraint_composition_coefficients<E,\n                                               H>(&Self,\n                                                  &mut RandomCoin<Self::BaseField,\n                                                                  H>)\n-> Result<ConstraintCompositionCoefficients<E>, RandomCoinError> where\nE: FieldElement<BaseField = Self::BaseField>, H: Hasher","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns coefficients needed for random linear combination during construction of constraint\n composition polynomial.\n","sig":null,"attributes":[{"value":"/ Returns coefficients needed for random linear combination during construction of constraint","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":70419,"byte_end":70514,"line_start":470,"line_end":470,"column_start":5,"column_end":100}},{"value":"/ composition polynomial.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":70519,"byte_end":70546,"line_start":471,"line_end":471,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":71566,"byte_end":71599,"line_start":500,"line_end":500,"column_start":8,"column_end":41},"name":"get_deep_composition_coefficients","qualname":"::air::Air::get_deep_composition_coefficients","value":"pub fn get_deep_composition_coefficients<E,\n                                         H>(&Self,\n                                            &mut RandomCoin<Self::BaseField,\n                                                            H>)\n-> Result<DeepCompositionCoefficients<E>, RandomCoinError> where\nE: FieldElement<BaseField = Self::BaseField>, H: Hasher","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns coefficients needed for random linear combinations during construction of DEEP\n composition polynomial.\n","sig":null,"attributes":[{"value":"/ Returns coefficients needed for random linear combinations during construction of DEEP","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":71436,"byte_end":71526,"line_start":498,"line_end":498,"column_start":5,"column_end":95}},{"value":"/ composition polynomial.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":71531,"byte_end":71558,"line_start":499,"line_end":499,"column_start":5,"column_end":32}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":9948,"byte_end":9955,"line_start":25,"line_end":25,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":12410,"byte_end":12417,"line_start":95,"line_end":95,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":13009,"byte_end":13016,"line_start":109,"line_end":109,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":16183,"byte_end":16194,"line_start":26,"line_end":26,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":18396,"byte_end":18407,"line_start":80,"line_end":80,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":18715,"byte_end":18726,"line_start":89,"line_end":89,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":20682,"byte_end":20689,"line_start":35,"line_end":35,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":25190,"byte_end":25197,"line_start":146,"line_end":146,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":25617,"byte_end":25624,"line_start":159,"line_end":159,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":27448,"byte_end":27456,"line_start":33,"line_end":33,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":225},{"krate":0,"index":227},{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":31252,"byte_end":31260,"line_start":131,"line_end":131,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":31808,"byte_end":31816,"line_start":145,"line_end":145,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":4658,"byte_end":4668,"line_start":66,"line_end":66,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/errors.rs","byte_start":33845,"byte_end":33859,"line_start":27,"line_end":27,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":39007,"byte_end":39019,"line_start":94,"line_end":94,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":880},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":44497,"byte_end":44509,"line_start":213,"line_end":213,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":44998,"byte_end":45010,"line_start":226,"line_end":226,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":45795,"byte_end":45809,"line_start":247,"line_end":247,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":46202,"byte_end":46216,"line_start":263,"line_end":263,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":46424,"byte_end":46438,"line_start":270,"line_end":270,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":47103,"byte_end":47115,"line_start":288,"line_end":288,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":47404,"byte_end":47416,"line_start":299,"line_end":299,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":47624,"byte_end":47636,"line_start":306,"line_end":306,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":74609,"byte_end":74618,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/context.rs","byte_start":78114,"byte_end":78124,"line_start":23,"line_end":23,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":82648,"byte_end":82657,"line_start":56,"line_end":56,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":92121,"byte_end":92130,"line_start":313,"line_end":313,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":92582,"byte_end":92591,"line_start":327,"line_end":327,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":92730,"byte_end":92739,"line_start":333,"line_end":333,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":95663,"byte_end":95686,"line_start":34,"line_end":34,"column_start":53,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":100865,"byte_end":100883,"line_start":157,"line_end":157,"column_start":53,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":511},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":106956,"byte_end":106981,"line_start":42,"line_end":42,"column_start":23,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":111878,"byte_end":111904,"line_start":144,"line_end":144,"column_start":6,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":116087,"byte_end":116102,"line_start":254,"line_end":254,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":123741,"byte_end":123758,"line_start":31,"line_end":31,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":128253,"byte_end":128270,"line_start":138,"line_end":138,"column_start":33,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/lib.rs","byte_start":1828,"byte_end":1833,"line_start":36,"line_end":36,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":9948,"byte_end":9955,"line_start":25,"line_end":25,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":713},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":12410,"byte_end":12417,"line_start":95,"line_end":95,"column_start":23,"column_end":30},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":713},"to":{"krate":20,"index":57}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/context.rs","byte_start":13009,"byte_end":13016,"line_start":109,"line_end":109,"column_start":25,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":713},"to":{"krate":20,"index":97}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":16183,"byte_end":16194,"line_start":26,"line_end":26,"column_start":6,"column_end":17},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":730},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":18396,"byte_end":18407,"line_start":80,"line_end":80,"column_start":23,"column_end":34},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":730},"to":{"krate":20,"index":57}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/commitments.rs","byte_start":18715,"byte_end":18726,"line_start":89,"line_end":89,"column_start":25,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":730},"to":{"krate":20,"index":97}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":20682,"byte_end":20689,"line_start":35,"line_end":35,"column_start":6,"column_end":13},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":746},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":25190,"byte_end":25197,"line_start":146,"line_end":146,"column_start":23,"column_end":30},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":746},"to":{"krate":20,"index":57}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/queries.rs","byte_start":25617,"byte_end":25624,"line_start":159,"line_end":159,"column_start":25,"column_end":32},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":746},"to":{"krate":20,"index":97}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":27448,"byte_end":27456,"line_start":33,"line_end":33,"column_start":6,"column_end":14},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":31252,"byte_end":31260,"line_start":131,"line_end":131,"column_start":23,"column_end":31},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":760},"to":{"krate":20,"index":57}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/ood_frame.rs","byte_start":31808,"byte_end":31816,"line_start":145,"line_end":145,"column_start":25,"column_end":33},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":760},"to":{"krate":20,"index":97}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/proof/mod.rs","byte_start":4658,"byte_end":4668,"line_start":66,"line_end":66,"column_start":6,"column_end":16},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":777},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/errors.rs","byte_start":33845,"byte_end":33859,"line_start":27,"line_end":27,"column_start":23,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":796},"to":{"krate":2,"index":9403}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":39007,"byte_end":39019,"line_start":94,"line_end":94,"column_start":6,"column_end":18},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":861},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":44497,"byte_end":44509,"line_start":213,"line_end":213,"column_start":23,"column_end":35},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":861},"to":{"krate":20,"index":57}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":44998,"byte_end":45010,"line_start":226,"line_end":226,"column_start":25,"column_end":37},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":861},"to":{"krate":20,"index":97}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":45795,"byte_end":45809,"line_start":247,"line_end":247,"column_start":6,"column_end":20},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":840},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":46202,"byte_end":46216,"line_start":263,"line_end":263,"column_start":23,"column_end":37},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":840},"to":{"krate":20,"index":57}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":46424,"byte_end":46438,"line_start":270,"line_end":270,"column_start":25,"column_end":39},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":840},"to":{"krate":20,"index":97}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":47103,"byte_end":47115,"line_start":288,"line_end":288,"column_start":6,"column_end":18},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":819},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":47404,"byte_end":47416,"line_start":299,"line_end":299,"column_start":23,"column_end":35},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":819},"to":{"krate":20,"index":57}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/options.rs","byte_start":47624,"byte_end":47636,"line_start":306,"line_end":306,"column_start":25,"column_end":37},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":819},"to":{"krate":20,"index":97}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/trace_info.rs","byte_start":74609,"byte_end":74618,"line_start":21,"line_end":21,"column_start":6,"column_end":15},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":881},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/context.rs","byte_start":78114,"byte_end":78124,"line_start":23,"line_end":23,"column_start":21,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":896},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":82648,"byte_end":82657,"line_start":56,"line_end":56,"column_start":21,"column_end":30},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":918},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":92121,"byte_end":92130,"line_start":313,"line_end":313,"column_start":29,"column_end":38},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":918},"to":{"krate":2,"index":2703}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":92582,"byte_end":92591,"line_start":327,"line_end":327,"column_start":36,"column_end":45},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":918},"to":{"krate":2,"index":2714}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/assertions/mod.rs","byte_start":92730,"byte_end":92739,"line_start":333,"line_end":333,"column_start":33,"column_end":42},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":918},"to":{"krate":2,"index":9403}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":95663,"byte_end":95686,"line_start":34,"line_end":34,"column_start":53,"column_end":76},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":941},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/boundary/mod.rs","byte_start":100865,"byte_end":100883,"line_start":157,"line_end":157,"column_start":53,"column_end":71},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":955},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":106956,"byte_end":106981,"line_start":42,"line_end":42,"column_start":23,"column_end":48},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":985},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":111878,"byte_end":111904,"line_start":144,"line_end":144,"column_start":6,"column_end":32},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":997},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/transition/mod.rs","byte_start":116087,"byte_end":116102,"line_start":254,"line_end":254,"column_start":23,"column_end":38},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1011},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":123741,"byte_end":123758,"line_start":31,"line_end":31,"column_start":21,"column_end":38},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1042},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/divisor.rs","byte_start":128253,"byte_end":128270,"line_start":138,"line_end":138,"column_start":33,"column_end":50},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1042},"to":{"krate":2,"index":9403}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":55744,"byte_end":55748,"line_start":145,"line_end":145,"column_start":16,"column_end":20},"kind":"SuperTrait","from":{"krate":2,"index":3016},"to":{"krate":0,"index":626}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-air-0.3.0/src/air/mod.rs","byte_start":55751,"byte_end":55755,"line_start":145,"line_end":145,"column_start":23,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":3028},"to":{"krate":0,"index":626}}]}