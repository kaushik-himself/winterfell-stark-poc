{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0","program":"/Users/verloop/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","winter_prover","--edition=2021","/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"std\"","-C","metadata=562c0227b5bb4a38","-C","extra-filename=-562c0227b5bb4a38","--out-dir","/Users/verloop/web3/winterfell-nft/target/rls/debug/deps","-L","dependency=/Users/verloop/web3/winterfell-nft/target/rls/debug/deps","--extern","log=/Users/verloop/web3/winterfell-nft/target/rls/debug/deps/liblog-0183a59b840a039d.rmeta","--extern","air=/Users/verloop/web3/winterfell-nft/target/rls/debug/deps/libwinter_air-b6526562dee9432f.rmeta","--extern","crypto=/Users/verloop/web3/winterfell-nft/target/rls/debug/deps/libwinter_crypto-5ce773de4a24102d.rmeta","--extern","fri=/Users/verloop/web3/winterfell-nft/target/rls/debug/deps/libwinter_fri-9decb77369600f6f.rmeta","--extern","math=/Users/verloop/web3/winterfell-nft/target/rls/debug/deps/libwinter_math-caa6979d5adfb8a1.rmeta","--extern","utils=/Users/verloop/web3/winterfell-nft/target/rls/debug/deps/libwinter_utils-7e9ca64107c5b293.rmeta","--cap-lints","allow","-L","native=/Users/verloop/web3/winterfell-nft/target/rls/debug/build/blake3-92387bdc436ce863/out","-L","native=/Users/verloop/web3/winterfell-nft/target/rls/debug/build/blake3-92387bdc436ce863/out","--error-format=json","--sysroot","/Users/verloop/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/verloop/web3/winterfell-nft/target/rls/debug/deps/libwinter_prover-562c0227b5bb4a38.rmeta"},"prelude":{"crate_id":{"name":"winter_prover","disambiguator":[5679998213305815927,0]},"crate_root":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src","external_crates":[{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[5737620048972976797,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/constraints/composition_poly.rs","num":2,"id":{"name":"core","disambiguator":[2242199718071837415,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2188212999151601010,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[1020664553731942337,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5221923779696816614,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10454403582981253701,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7392107620293427149,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9383090470819858406,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[13561338507145107503,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2153887466384468734,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[11638676648589799525,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[17336646944492823354,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[16179365956064936006,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[2085897901681677768,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[4724748409658749452,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[13513626471981952824,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[14681960900203760207,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":18,"id":{"name":"winter_air","disambiguator":[12765257955789625656,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":19,"id":{"name":"winter_fri","disambiguator":[8240717306310797145,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":20,"id":{"name":"winter_math","disambiguator":[7939711538366881299,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":21,"id":{"name":"winter_utils","disambiguator":[6543379861855309929,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":22,"id":{"name":"winter_crypto","disambiguator":[8941282792384159007,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":23,"id":{"name":"sha3","disambiguator":[7268035942060313992,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":24,"id":{"name":"digest","disambiguator":[7578323278360302728,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":25,"id":{"name":"generic_array","disambiguator":[8836281415988858016,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":26,"id":{"name":"typenum","disambiguator":[18344174592359653307,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":27,"id":{"name":"crypto_common","disambiguator":[7493296314554171395,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":28,"id":{"name":"block_buffer","disambiguator":[11768130926017568546,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":29,"id":{"name":"subtle","disambiguator":[4511373288773010580,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":30,"id":{"name":"keccak","disambiguator":[9107484285738289293,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":31,"id":{"name":"blake3","disambiguator":[16313067414413823840,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":32,"id":{"name":"arrayref","disambiguator":[15621369136658719922,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":33,"id":{"name":"arrayvec","disambiguator":[8238203197434002581,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":34,"id":{"name":"cfg_if","disambiguator":[10518978035588998298,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":35,"id":{"name":"constant_time_eq","disambiguator":[4478672943650019765,0]}},{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","num":36,"id":{"name":"log","disambiguator":[4032182714514011434,0]}}],"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":182,"byte_end":20623,"line_start":6,"line_end":440,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":18,"index":777},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2230,"byte_end":2240,"line_start":47,"line_end":47,"column_start":12,"column_end":22},"alias_span":null,"name":"StarkProof","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":626},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2242,"byte_end":2245,"line_start":47,"line_end":47,"column_start":24,"column_end":27},"alias_span":null,"name":"Air","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":896},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2247,"byte_end":2257,"line_start":47,"line_end":47,"column_start":29,"column_end":39},"alias_span":null,"name":"AirContext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":918},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2259,"byte_end":2268,"line_start":47,"line_end":47,"column_start":41,"column_end":50},"alias_span":null,"name":"Assertion","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":955},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2270,"byte_end":2288,"line_start":47,"line_end":47,"column_start":52,"column_end":70},"alias_span":null,"name":"BoundaryConstraint","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":941},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2290,"byte_end":2313,"line_start":47,"line_end":47,"column_start":72,"column_end":95},"alias_span":null,"name":"BoundaryConstraintGroup","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":1021},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2319,"byte_end":2352,"line_start":48,"line_end":48,"column_start":5,"column_end":38},"alias_span":null,"name":"ConstraintCompositionCoefficients","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":1042},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2354,"byte_end":2371,"line_start":48,"line_end":48,"column_start":40,"column_end":57},"alias_span":null,"name":"ConstraintDivisor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":1031},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2373,"byte_end":2400,"line_start":48,"line_end":48,"column_start":59,"column_end":86},"alias_span":null,"name":"DeepCompositionCoefficients","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":1011},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2406,"byte_end":2421,"line_start":49,"line_end":49,"column_start":5,"column_end":20},"alias_span":null,"name":"EvaluationFrame","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":840},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2423,"byte_end":2437,"line_start":49,"line_end":49,"column_start":22,"column_end":36},"alias_span":null,"name":"FieldExtension","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":819},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2439,"byte_end":2451,"line_start":49,"line_end":49,"column_start":38,"column_end":50},"alias_span":null,"name":"HashFunction","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":861},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2453,"byte_end":2465,"line_start":49,"line_end":49,"column_start":52,"column_end":64},"alias_span":null,"name":"ProofOptions","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":881},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2467,"byte_end":2476,"line_start":49,"line_end":49,"column_start":66,"column_end":75},"alias_span":null,"name":"TraceInfo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":997},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2482,"byte_end":2508,"line_start":50,"line_end":50,"column_start":5,"column_end":31},"alias_span":null,"name":"TransitionConstraintDegree","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":985},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2510,"byte_end":2535,"line_start":50,"line_end":50,"column_start":33,"column_end":58},"alias_span":null,"name":"TransitionConstraintGroup","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":42},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2561,"byte_end":2570,"line_start":53,"line_end":53,"column_start":5,"column_end":14},"alias_span":null,"name":"iterators","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":102},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2572,"byte_end":2582,"line_start":53,"line_end":53,"column_start":16,"column_end":26},"alias_span":null,"name":"ByteReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":137},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2584,"byte_end":2594,"line_start":53,"line_end":53,"column_start":28,"column_end":38},"alias_span":null,"name":"ByteWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":97},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2596,"byte_end":2610,"line_start":53,"line_end":53,"column_start":40,"column_end":54},"alias_span":null,"name":"Deserializable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":194},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2612,"byte_end":2632,"line_start":53,"line_end":53,"column_start":56,"column_end":76},"alias_span":null,"name":"DeserializationError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":57},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2634,"byte_end":2646,"line_start":53,"line_end":53,"column_start":78,"column_end":90},"alias_span":null,"name":"Serializable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":0},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2710,"byte_end":2714,"line_start":59,"line_end":59,"column_start":9,"column_end":13},"alias_span":null,"name":"math","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":0},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2854,"byte_end":2860,"line_start":66,"line_end":66,"column_start":9,"column_end":15},"alias_span":null,"name":"crypto","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":855},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":3299,"byte_end":3304,"line_start":90,"line_end":90,"column_start":17,"column_end":22},"alias_span":null,"name":"Trace","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":793},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":3306,"byte_end":3316,"line_start":90,"line_end":90,"column_start":24,"column_end":34},"alias_span":null,"name":"TraceTable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":824},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":3318,"byte_end":3336,"line_start":90,"line_end":90,"column_start":36,"column_end":54},"alias_span":null,"name":"TraceTableFragment","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1004},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":3410,"byte_end":3421,"line_start":96,"line_end":96,"column_start":17,"column_end":28},"alias_span":null,"name":"ProverError","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":182,"byte_end":20623,"line_start":6,"line_end":440,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":111},{"krate":0,"index":114},{"krate":0,"index":117},{"krate":0,"index":120},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":163},{"krate":0,"index":166},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":563},{"krate":0,"index":566},{"krate":0,"index":644},{"krate":0,"index":647},{"krate":0,"index":871},{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":878},{"krate":0,"index":881},{"krate":0,"index":884},{"krate":0,"index":978},{"krate":0,"index":981},{"krate":0,"index":986},{"krate":0,"index":989}],"decl_id":null,"docs":" This crate contains Winterfell STARK prover.","sig":null,"attributes":[{"value":"/ This crate contains Winterfell STARK prover.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":182,"byte_end":230,"line_start":6,"line_end":6,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":231,"byte_end":234,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This prover can be used to generate proofs of computational integrity using the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":235,"byte_end":318,"line_start":8,"line_end":8,"column_start":1,"column_end":84}},{"value":"/ [STARK](https://eprint.iacr.org/2018/046) (Scalable Transparent ARguments of Knowledge)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":319,"byte_end":410,"line_start":9,"line_end":9,"column_start":1,"column_end":92}},{"value":"/ protocol.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":411,"byte_end":424,"line_start":10,"line_end":10,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":425,"byte_end":428,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ When the crate is compiled with `concurrent` feature enabled, proof generation will be","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":429,"byte_end":519,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"/ performed in multiple threads (usually, as many threads as there are logical cores on the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":520,"byte_end":613,"line_start":13,"line_end":13,"column_start":1,"column_end":94}},{"value":"/ machine). The number of threads can be configured via `RAYON_NUM_THREADS` environment","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":614,"byte_end":703,"line_start":14,"line_end":14,"column_start":1,"column_end":90}},{"value":"/ variable.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":704,"byte_end":717,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":718,"byte_end":721,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":722,"byte_end":733,"line_start":17,"line_end":17,"column_start":1,"column_end":12}},{"value":"/ To generate a proof that a computation was executed correctly, you'll need to do the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":734,"byte_end":822,"line_start":18,"line_end":18,"column_start":1,"column_end":89}},{"value":"/ following:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":823,"byte_end":837,"line_start":19,"line_end":19,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":838,"byte_end":841,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ 1. Define an *algebraic intermediate representation* (AIR) for your computation. This can","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":842,"byte_end":935,"line_start":21,"line_end":21,"column_start":1,"column_end":94}},{"value":"/    be done by implementing [Air] trait.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":936,"byte_end":979,"line_start":22,"line_end":22,"column_start":1,"column_end":44}},{"value":"/ 2. Define an execution trace for your computation. This can be done by implementing [Trace]","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":980,"byte_end":1075,"line_start":23,"line_end":23,"column_start":1,"column_end":96}},{"value":"/    trait. Alternatively, you can use [TraceTable] struct which already implements [Trace]","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":1076,"byte_end":1169,"line_start":24,"line_end":24,"column_start":1,"column_end":94}},{"value":"/    trait in cases when this generic implementation works for your use case.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":1170,"byte_end":1249,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/ 3. Execute your computation and record its execution trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":1250,"byte_end":1313,"line_start":26,"line_end":26,"column_start":1,"column_end":64}},{"value":"/ 4. Define your prover by implementing [Prover] trait. Then execute [Prover::prove()] function","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":1314,"byte_end":1411,"line_start":27,"line_end":27,"column_start":1,"column_end":98}},{"value":"/    passing the trace generated in the previous step into it as a parameter. The function will","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":1412,"byte_end":1509,"line_start":28,"line_end":28,"column_start":1,"column_end":98}},{"value":"/    return a instance of [StarkProof].","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":1510,"byte_end":1551,"line_start":29,"line_end":29,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":1552,"byte_end":1555,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This [StarkProof] can be serialized and sent to a STARK verifier for verification. The size","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":1556,"byte_end":1651,"line_start":31,"line_end":31,"column_start":1,"column_end":96}},{"value":"/ of proof depends on the specifics of a given computation, but for most computations it should","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":1652,"byte_end":1749,"line_start":32,"line_end":32,"column_start":1,"column_end":98}},{"value":"/ be in the range between 15 KB (for very small computations) and 300 KB (for very large","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":1750,"byte_end":1840,"line_start":33,"line_end":33,"column_start":1,"column_end":91}},{"value":"/ computations).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":1841,"byte_end":1859,"line_start":34,"line_end":34,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":1860,"byte_end":1863,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Proof generation time is also highly dependent on the specifics of a given computation, but","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":1864,"byte_end":1959,"line_start":36,"line_end":36,"column_start":1,"column_end":96}},{"value":"/ also depends on the capabilities of the machine used to generate the proofs (i.e. on number","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":1960,"byte_end":2055,"line_start":37,"line_end":37,"column_start":1,"column_end":96}},{"value":"/ of CPU cores and memory bandwidth).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":2056,"byte_end":2095,"line_start":38,"line_end":38,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":143},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":21022,"byte_end":21033,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"StarkDomain","qualname":"::domain::StarkDomain","value":"StarkDomain {  }","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":21866,"byte_end":21869,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<StarkDomain<B>>::new","value":"pub fn new<A: Air<BaseField = B>>(&A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new STARK domain initialized with the provided `context`.\n","sig":null,"attributes":[{"value":"/ Returns a new STARK domain initialized with the provided `context`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":21783,"byte_end":21854,"line_start":33,"line_end":33,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":22466,"byte_end":22478,"line_start":49,"line_end":49,"column_start":12,"column_end":24},"name":"trace_length","qualname":"<StarkDomain<B>>::trace_length","value":"pub fn trace_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns length of the execution trace for this computation.\n","sig":null,"attributes":[{"value":"/ Returns length of the execution trace for this computation.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":22391,"byte_end":22454,"line_start":48,"line_end":48,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":22628,"byte_end":22642,"line_start":54,"line_end":54,"column_start":12,"column_end":26},"name":"trace_twiddles","qualname":"<StarkDomain<B>>::trace_twiddles","value":"pub fn trace_twiddles(&Self) -> &[B]","parent":null,"children":[],"decl_id":null,"docs":" Returns twiddles which can be used to evaluate trace polynomials.\n","sig":null,"attributes":[{"value":"/ Returns twiddles which can be used to evaluate trace polynomials.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":22547,"byte_end":22616,"line_start":53,"line_end":53,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":22805,"byte_end":22823,"line_start":60,"line_end":60,"column_start":12,"column_end":30},"name":"trace_to_ce_blowup","qualname":"<StarkDomain<B>>::trace_to_ce_blowup","value":"pub fn trace_to_ce_blowup(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns blowup factor from trace to constraint evaluation domain.\n","sig":null,"attributes":[{"value":"/ Returns blowup factor from trace to constraint evaluation domain.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":22700,"byte_end":22769,"line_start":58,"line_end":58,"column_start":5,"column_end":74}},{"value":"allow(dead_code)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":22774,"byte_end":22793,"line_start":59,"line_end":59,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":22968,"byte_end":22987,"line_start":65,"line_end":65,"column_start":12,"column_end":31},"name":"trace_to_lde_blowup","qualname":"<StarkDomain<B>>::trace_to_lde_blowup","value":"pub fn trace_to_lde_blowup(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns blowup factor from trace to LDE domain.\n","sig":null,"attributes":[{"value":"/ Returns blowup factor from trace to LDE domain.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":22905,"byte_end":22956,"line_start":64,"line_end":64,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":23297,"byte_end":23311,"line_start":73,"line_end":73,"column_start":12,"column_end":26},"name":"ce_domain_size","qualname":"<StarkDomain<B>>::ce_domain_size","value":"pub fn ce_domain_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the size of the constraint evaluation domain for this computation.\n","sig":null,"attributes":[{"value":"/ Returns the size of the constraint evaluation domain for this computation.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":23207,"byte_end":23285,"line_start":72,"line_end":72,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":23447,"byte_end":23466,"line_start":78,"line_end":78,"column_start":12,"column_end":31},"name":"ce_domain_generator","qualname":"<StarkDomain<B>>::ce_domain_generator","value":"pub fn ce_domain_generator(&Self) -> B","parent":null,"children":[],"decl_id":null,"docs":" Returns the generator of constraint evaluation domain.\n","sig":null,"attributes":[{"value":"/ Returns the generator of constraint evaluation domain.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":23377,"byte_end":23435,"line_start":77,"line_end":77,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":23636,"byte_end":23647,"line_start":83,"line_end":83,"column_start":12,"column_end":23},"name":"ce_twiddles","qualname":"<StarkDomain<B>>::ce_twiddles","value":"pub fn ce_twiddles(&Self) -> &[B]","parent":null,"children":[],"decl_id":null,"docs":" Returns twiddles which can be used to evaluate constraint polynomials.\n","sig":null,"attributes":[{"value":"/ Returns twiddles which can be used to evaluate constraint polynomials.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":23550,"byte_end":23624,"line_start":82,"line_end":82,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":23781,"byte_end":23797,"line_start":88,"line_end":88,"column_start":12,"column_end":28},"name":"ce_to_lde_blowup","qualname":"<StarkDomain<B>>::ce_to_lde_blowup","value":"pub fn ce_to_lde_blowup(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns blowup factor from constraint evaluation to LDE domain.\n","sig":null,"attributes":[{"value":"/ Returns blowup factor from constraint evaluation to LDE domain.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":23702,"byte_end":23769,"line_start":87,"line_end":87,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":24061,"byte_end":24076,"line_start":96,"line_end":96,"column_start":12,"column_end":27},"name":"lde_domain_size","qualname":"<StarkDomain<B>>::lde_domain_size","value":"pub fn lde_domain_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the size of the low-degree extension domain.\n","sig":null,"attributes":[{"value":"/ Returns the size of the low-degree extension domain.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":23993,"byte_end":24049,"line_start":95,"line_end":95,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":24204,"byte_end":24210,"line_start":101,"line_end":101,"column_start":12,"column_end":18},"name":"offset","qualname":"<StarkDomain<B>>::offset","value":"pub fn offset(&Self) -> B","parent":null,"children":[],"decl_id":null,"docs":" Returns LDE domain offset.\n","sig":null,"attributes":[{"value":"/ Returns LDE domain offset.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":24162,"byte_end":24192,"line_start":100,"line_end":100,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":705},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_lde.rs","byte_start":96072,"byte_end":96080,"line_start":18,"line_end":18,"column_start":12,"column_end":20},"name":"TraceLde","qualname":"::trace::trace_lde::TraceLde","value":"TraceLde {  }","parent":null,"children":[{"krate":0,"index":707},{"krate":0,"index":708}],"decl_id":null,"docs":" Trace low-degree extension.\n","sig":null,"attributes":[{"value":"/ Trace low-degree extension.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_lde.rs","byte_start":96029,"byte_end":96060,"line_start":17,"line_end":17,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_lde.rs","byte_start":96674,"byte_end":96679,"line_start":35,"line_end":35,"column_start":12,"column_end":17},"name":"width","qualname":"<TraceLde<B>>::width","value":"pub fn width(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns number of columns in this trace LDE.\n","sig":null,"attributes":[{"value":"/ Returns number of columns in this trace LDE.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_lde.rs","byte_start":96614,"byte_end":96662,"line_start":34,"line_end":34,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_lde.rs","byte_start":96837,"byte_end":96840,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"len","qualname":"<TraceLde<B>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of rows in this trace LDE.\n","sig":null,"attributes":[{"value":"/ Returns the number of rows in this trace LDE.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_lde.rs","byte_start":96733,"byte_end":96782,"line_start":39,"line_end":39,"column_start":5,"column_end":54}},{"value":"allow(clippy :: len_without_is_empty)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_lde.rs","byte_start":96787,"byte_end":96825,"line_start":40,"line_end":40,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_lde.rs","byte_start":96999,"byte_end":97005,"line_start":46,"line_end":46,"column_start":12,"column_end":18},"name":"blowup","qualname":"<TraceLde<B>>::blowup","value":"pub fn blowup(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns blowup factor which was used to extend original execution trace into this LDE.\n","sig":null,"attributes":[{"value":"/ Returns blowup factor which was used to extend original execution trace into this LDE.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_lde.rs","byte_start":96897,"byte_end":96987,"line_start":45,"line_end":45,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_lde.rs","byte_start":97160,"byte_end":97163,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"get","qualname":"<TraceLde<B>>::get","value":"pub fn get(&Self, usize, usize) -> B","parent":null,"children":[],"decl_id":null,"docs":" Returns value of a trace cell in the column at the specified index at the specified step.\n","sig":null,"attributes":[{"value":"/ Returns value of a trace cell in the column at the specified index at the specified step.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_lde.rs","byte_start":97055,"byte_end":97148,"line_start":50,"line_end":50,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_lde.rs","byte_start":97528,"byte_end":97541,"line_start":62,"line_end":62,"column_start":12,"column_end":25},"name":"read_row_into","qualname":"<TraceLde<B>>::read_row_into","value":"pub fn read_row_into(&Self, usize, &mut [B])","parent":null,"children":[],"decl_id":null,"docs":" Copies values of all columns at the specified `step` into the `destination` slice.\n","sig":null,"attributes":[{"value":"/ Copies values of all columns at the specified `step` into the `destination` slice.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_lde.rs","byte_start":97430,"byte_end":97516,"line_start":61,"line_end":61,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_lde.rs","byte_start":97805,"byte_end":97820,"line_start":69,"line_end":69,"column_start":12,"column_end":27},"name":"read_frame_into","qualname":"<TraceLde<B>>::read_frame_into","value":"pub fn read_frame_into(&Self, usize, &mut EvaluationFrame<B>)","parent":null,"children":[],"decl_id":null,"docs":" Reads current and next rows from the execution trace table into the specified frame.\n","sig":null,"attributes":[{"value":"/ Reads current and next rows from the execution trace table into the specified frame.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_lde.rs","byte_start":97705,"byte_end":97793,"line_start":68,"line_end":68,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_lde.rs","byte_start":98404,"byte_end":98420,"line_start":80,"line_end":80,"column_start":12,"column_end":28},"name":"build_commitment","qualname":"<TraceLde<B>>::build_commitment","value":"pub fn build_commitment<H: ElementHasher<BaseField = B>>(&Self)\n-> MerkleTree<H>","parent":null,"children":[],"decl_id":null,"docs":" Builds a Merkle tree out of trace table rows (hash of each row becomes a leaf in the tree).\n","sig":null,"attributes":[{"value":"/ Builds a Merkle tree out of trace table rows (hash of each row becomes a leaf in the tree).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_lde.rs","byte_start":98297,"byte_end":98392,"line_start":79,"line_end":79,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_lde.rs","byte_start":99738,"byte_end":99743,"line_start":107,"line_end":107,"column_start":12,"column_end":17},"name":"query","qualname":"<TraceLde<B>>::query","value":"pub fn query<H: Hasher>(&Self, MerkleTree<H>, &[usize]) -> Queries","parent":null,"children":[],"decl_id":null,"docs":" Returns trace table rows at the specified positions along with Merkle authentication paths\n from the `commitment` root to these rows.\n","sig":null,"attributes":[{"value":"/ Returns trace table rows at the specified positions along with Merkle authentication paths","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_lde.rs","byte_start":99582,"byte_end":99676,"line_start":105,"line_end":105,"column_start":5,"column_end":99}},{"value":"/ from the `commitment` root to these rows.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_lde.rs","byte_start":99681,"byte_end":99726,"line_start":106,"line_end":106,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":750},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/poly_table.rs","byte_start":101141,"byte_end":101155,"line_start":15,"line_end":15,"column_start":12,"column_end":26},"name":"TracePolyTable","qualname":"::trace::poly_table::TracePolyTable","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/poly_table.rs","byte_start":101313,"byte_end":101316,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"new","qualname":"<TracePolyTable<B>>::new","value":"pub fn new(Vec<Vec<B>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new table of trace polynomials from the provided vectors.\n","sig":null,"attributes":[{"value":"/ Creates a new table of trace polynomials from the provided vectors.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/poly_table.rs","byte_start":101230,"byte_end":101301,"line_start":18,"line_end":18,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/poly_table.rs","byte_start":101995,"byte_end":102004,"line_start":41,"line_end":41,"column_start":12,"column_end":21},"name":"poly_size","qualname":"<TracePolyTable<B>>::poly_size","value":"pub fn poly_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the size of each polynomial - i.e. size of a vector needed to hold a polynomial.\n","sig":null,"attributes":[{"value":"/ Returns the size of each polynomial - i.e. size of a vector needed to hold a polynomial.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/poly_table.rs","byte_start":101891,"byte_end":101983,"line_start":40,"line_end":40,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/poly_table.rs","byte_start":102134,"byte_end":102145,"line_start":46,"line_end":46,"column_start":12,"column_end":23},"name":"evaluate_at","qualname":"<TracePolyTable<B>>::evaluate_at","value":"pub fn evaluate_at<E: FieldElement<BaseField = B>>(&Self, E) -> Vec<E>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates all trace polynomials the the specified point `x`.\n","sig":null,"attributes":[{"value":"/ Evaluates all trace polynomials the the specified point `x`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/poly_table.rs","byte_start":102058,"byte_end":102122,"line_start":45,"line_end":45,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/poly_table.rs","byte_start":102471,"byte_end":102484,"line_start":52,"line_end":52,"column_start":12,"column_end":25},"name":"get_ood_frame","qualname":"<TracePolyTable<B>>::get_ood_frame","value":"pub fn get_ood_frame<E: FieldElement<BaseField = B>>(&Self, E)\n-> EvaluationFrame<E>","parent":null,"children":[],"decl_id":null,"docs":" Returns an out-of-domain evaluation frame constructed by evaluating trace polynomials\n for all registers at points z and z * g, where g is the generator of the trace domain.\n","sig":null,"attributes":[{"value":"/ Returns an out-of-domain evaluation frame constructed by evaluating trace polynomials","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/poly_table.rs","byte_start":102275,"byte_end":102364,"line_start":50,"line_end":50,"column_start":5,"column_end":94}},{"value":"/ for all registers at points z and z * g, where g is the generator of the trace domain.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/poly_table.rs","byte_start":102369,"byte_end":102459,"line_start":51,"line_end":51,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/poly_table.rs","byte_start":102786,"byte_end":102795,"line_start":58,"line_end":58,"column_start":12,"column_end":21},"name":"num_polys","qualname":"<TracePolyTable<B>>::num_polys","value":"pub fn num_polys(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of trace polynomials in the table.\n","sig":null,"attributes":[{"value":"/ Returns the number of trace polynomials in the table.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/poly_table.rs","byte_start":102717,"byte_end":102774,"line_start":57,"line_end":57,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/poly_table.rs","byte_start":103064,"byte_end":103072,"line_start":69,"line_end":69,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<TracePolyTable<B>>::into_vec","value":"pub fn into_vec(Self) -> Vec<Vec<B>>","parent":null,"children":[],"decl_id":null,"docs":" Converts this table into a vector of polynomials.\n","sig":null,"attributes":[{"value":"/ Converts this table into a vector of polynomials.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/poly_table.rs","byte_start":102999,"byte_end":103052,"line_start":68,"line_end":68,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":793},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":106183,"byte_end":106193,"line_start":62,"line_end":62,"column_start":12,"column_end":22},"name":"TraceTable","qualname":"::trace::trace_table::TraceTable","value":"TraceTable {  }","parent":null,"children":[{"krate":0,"index":795},{"krate":0,"index":796}],"decl_id":null,"docs":" A concrete implementation of the [Trace] trait.","sig":null,"attributes":[{"value":"/ A concrete implementation of the [Trace] trait.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":103817,"byte_end":103868,"line_start":24,"line_end":24,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":103869,"byte_end":103872,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ This implementation supports concurrent trace generation and should be sufficient for most use","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":103873,"byte_end":103971,"line_start":26,"line_end":26,"column_start":1,"column_end":99}},{"value":"/ cases. There are two ways to create a trace table trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":103972,"byte_end":104032,"line_start":27,"line_end":27,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":104033,"byte_end":104036,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ First, you can use the [TraceTable::init()] function which takes a set of vectors as a","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":104037,"byte_end":104127,"line_start":29,"line_end":29,"column_start":1,"column_end":91}},{"value":"/ parameter, where each vector contains values for a given column of the trace. This approach","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":104128,"byte_end":104223,"line_start":30,"line_end":30,"column_start":1,"column_end":96}},{"value":"/ allows you to build an execution trace as you see fit, as long as it meets a basic set of","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":104224,"byte_end":104317,"line_start":31,"line_end":31,"column_start":1,"column_end":94}},{"value":"/ requirements. These requirements are:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":104318,"byte_end":104359,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":104360,"byte_end":104363,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ 1. Lengths of all columns in the execution trace must be the same.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":104364,"byte_end":104434,"line_start":34,"line_end":34,"column_start":1,"column_end":71}},{"value":"/ 2. The length of the columns must be some power of two.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":104435,"byte_end":104494,"line_start":35,"line_end":35,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":104495,"byte_end":104498,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ The other approach is to use [TraceTable::new()] function, which takes trace width and","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":104499,"byte_end":104589,"line_start":37,"line_end":37,"column_start":1,"column_end":91}},{"value":"/ length as parameters. This function will allocate memory for the trace, but will not fill it","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":104590,"byte_end":104686,"line_start":38,"line_end":38,"column_start":1,"column_end":97}},{"value":"/ with data. To fill the execution trace, you can use the [fill()](TraceTable::fill) method,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":104687,"byte_end":104781,"line_start":39,"line_end":39,"column_start":1,"column_end":95}},{"value":"/ which takes two closures as parameters:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":104782,"byte_end":104825,"line_start":40,"line_end":40,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":104826,"byte_end":104829,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ 1. The first closure is responsible for initializing the first state of the computation","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":104830,"byte_end":104921,"line_start":42,"line_end":42,"column_start":1,"column_end":92}},{"value":"/    (the first row of the execution trace).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":104922,"byte_end":104968,"line_start":43,"line_end":43,"column_start":1,"column_end":47}},{"value":"/ 2. The second closure receives the previous state of the execution trace as input, and must","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":104969,"byte_end":105064,"line_start":44,"line_end":44,"column_start":1,"column_end":96}},{"value":"/    update it to the next state of the computation.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":105065,"byte_end":105119,"line_start":45,"line_end":45,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":105120,"byte_end":105123,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ You can also use [TraceTable::with_meta()] function to create a blank execution trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":105124,"byte_end":105214,"line_start":47,"line_end":47,"column_start":1,"column_end":91}},{"value":"/ This function work just like [TraceTable::new()] function, but also takes a metadata","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":105215,"byte_end":105303,"line_start":48,"line_end":48,"column_start":1,"column_end":89}},{"value":"/ parameter which can be an arbitrary sequence of bytes up to 64KB in size.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":105304,"byte_end":105381,"line_start":49,"line_end":49,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":105382,"byte_end":105385,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # Concurrent trace generation","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":105386,"byte_end":105419,"line_start":51,"line_end":51,"column_start":1,"column_end":34}},{"value":"/ For computations which consist of many small independent computations, we can generate the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":105420,"byte_end":105514,"line_start":52,"line_end":52,"column_start":1,"column_end":95}},{"value":"/ execution trace of the entire computation by building fragments of the trace in parallel,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":105515,"byte_end":105608,"line_start":53,"line_end":53,"column_start":1,"column_end":94}},{"value":"/ and then joining these fragments together.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":105609,"byte_end":105655,"line_start":54,"line_end":54,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":105656,"byte_end":105659,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ For this purpose, `TraceTable` struct exposes [fragments()](TraceTable::fragments)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":105660,"byte_end":105746,"line_start":56,"line_end":56,"column_start":1,"column_end":87}},{"value":"/ method, which takes fragment length as a parameter, breaks the execution trace into equally","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":105747,"byte_end":105842,"line_start":57,"line_end":57,"column_start":1,"column_end":96}},{"value":"/ sized fragments, and returns an iterator over these fragments. You can then use fragment's","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":105843,"byte_end":105937,"line_start":58,"line_end":58,"column_start":1,"column_end":95}},{"value":"/ [fill()](TraceTableFragment::fill) method to fill all fragments with data in parallel.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":105938,"byte_end":106028,"line_start":59,"line_end":59,"column_start":1,"column_end":91}},{"value":"/ The semantics of the fragment's [TraceTableFragment::fill()] method are identical to the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":106029,"byte_end":106121,"line_start":60,"line_end":60,"column_start":1,"column_end":93}},{"value":"/ semantics of the [TraceTable::fill()] method.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":106122,"byte_end":106171,"line_start":61,"line_end":61,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":799},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":106916,"byte_end":106919,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"new","qualname":"<TraceTable<B>>::new","value":"pub fn new(usize, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new execution trace of the specified width and length.","sig":null,"attributes":[{"value":"/ Creates a new execution trace of the specified width and length.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":106418,"byte_end":106486,"line_start":71,"line_end":71,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":106491,"byte_end":106494,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ This allocates all the required memory for the trace, but does not initialize it. It is","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":106499,"byte_end":106590,"line_start":73,"line_end":73,"column_start":5,"column_end":96}},{"value":"/ expected that the trace will be filled using one of the data mutator methods.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":106595,"byte_end":106676,"line_start":74,"line_end":74,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":106681,"byte_end":106684,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":106689,"byte_end":106701,"line_start":76,"line_end":76,"column_start":5,"column_end":17}},{"value":"/ Panics if:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":106706,"byte_end":106720,"line_start":77,"line_end":77,"column_start":5,"column_end":19}},{"value":"/ * `width` is zero or greater than 255.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":106725,"byte_end":106767,"line_start":78,"line_end":78,"column_start":5,"column_end":47}},{"value":"/ * `length` is smaller than 8, greater than biggest multiplicative subgroup in the field","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":106772,"byte_end":106863,"line_start":79,"line_end":79,"column_start":5,"column_end":96}},{"value":"/   `B`, or is not a power of two.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":106868,"byte_end":106904,"line_start":80,"line_end":80,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":107610,"byte_end":107619,"line_start":97,"line_end":97,"column_start":12,"column_end":21},"name":"with_meta","qualname":"<TraceTable<B>>::with_meta","value":"pub fn with_meta(usize, usize, Vec<u8>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new execution trace of the specified width and length, and with the specified\n metadata.","sig":null,"attributes":[{"value":"/ Creates a new execution trace of the specified width and length, and with the specified","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":107017,"byte_end":107108,"line_start":85,"line_end":85,"column_start":5,"column_end":96}},{"value":"/ metadata.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":107113,"byte_end":107126,"line_start":86,"line_end":86,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":107131,"byte_end":107134,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ This allocates all the required memory for the trace, but does not initialize it. It is","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":107139,"byte_end":107230,"line_start":88,"line_end":88,"column_start":5,"column_end":96}},{"value":"/ expected that the trace will be filled using one of the data mutator methods.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":107235,"byte_end":107316,"line_start":89,"line_end":89,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":107321,"byte_end":107324,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":107329,"byte_end":107341,"line_start":91,"line_end":91,"column_start":5,"column_end":17}},{"value":"/ Panics if:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":107346,"byte_end":107360,"line_start":92,"line_end":92,"column_start":5,"column_end":19}},{"value":"/ * `width` is zero or greater than 255.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":107365,"byte_end":107407,"line_start":93,"line_end":93,"column_start":5,"column_end":47}},{"value":"/ * `length` is smaller than 8, greater than the biggest multiplicative subgroup in the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":107412,"byte_end":107501,"line_start":94,"line_end":94,"column_start":5,"column_end":94}},{"value":"/   field `B`, or is not a power of two.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":107506,"byte_end":107548,"line_start":95,"line_end":95,"column_start":5,"column_end":47}},{"value":"/ * Length of `meta` is greater than 65535;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":107553,"byte_end":107598,"line_start":96,"line_end":96,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":109471,"byte_end":109475,"line_start":148,"line_end":148,"column_start":12,"column_end":16},"name":"init","qualname":"<TraceTable<B>>::init","value":"pub fn init(Vec<Vec<B>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new execution trace from a list of provided register traces.","sig":null,"attributes":[{"value":"/ Creates a new execution trace from a list of provided register traces.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":108944,"byte_end":109018,"line_start":138,"line_end":138,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":109023,"byte_end":109026,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ The provides `registers` vector is expected to contain register traces.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":109031,"byte_end":109106,"line_start":140,"line_end":140,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":109111,"byte_end":109114,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":109119,"byte_end":109131,"line_start":142,"line_end":142,"column_start":5,"column_end":17}},{"value":"/ Panics if:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":109136,"byte_end":109150,"line_start":143,"line_end":143,"column_start":5,"column_end":19}},{"value":"/ * The `registers` vector is empty or has over 255 registers.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":109155,"byte_end":109219,"line_start":144,"line_end":144,"column_start":5,"column_end":69}},{"value":"/ * Number of elements in any of the registers is smaller than 8, greater than the biggest","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":109224,"byte_end":109316,"line_start":145,"line_end":145,"column_start":5,"column_end":97}},{"value":"/   multiplicative subgroup in the field `B`, or is not a power of two.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":109321,"byte_end":109394,"line_start":146,"line_end":146,"column_start":5,"column_end":78}},{"value":"/ * Number of elements is not identical for all registers.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":109399,"byte_end":109459,"line_start":147,"line_end":147,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":803},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":111245,"byte_end":111248,"line_start":200,"line_end":200,"column_start":12,"column_end":15},"name":"set","qualname":"<TraceTable<B>>::set","value":"pub fn set(&mut Self, usize, usize, B)","parent":null,"children":[],"decl_id":null,"docs":" Updates a value in a single cell of the execution trace.","sig":null,"attributes":[{"value":"/ Updates a value in a single cell of the execution trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":110926,"byte_end":110986,"line_start":193,"line_end":193,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":110991,"byte_end":110994,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ Specifically, the value in the specified `register` and the specified `step` is set to the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":110999,"byte_end":111093,"line_start":195,"line_end":195,"column_start":5,"column_end":99}},{"value":"/ provide `value`.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":111098,"byte_end":111118,"line_start":196,"line_end":196,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":111123,"byte_end":111126,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":111131,"byte_end":111143,"line_start":198,"line_end":198,"column_start":5,"column_end":17}},{"value":"/ Panics if either `register` or `step` are out of bounds for this execution trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":111148,"byte_end":111233,"line_start":199,"line_end":199,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":111535,"byte_end":111543,"line_start":208,"line_end":208,"column_start":12,"column_end":20},"name":"set_meta","qualname":"<TraceTable<B>>::set_meta","value":"pub fn set_meta(&mut Self, Vec<u8>)","parent":null,"children":[],"decl_id":null,"docs":" Updates metadata for this execution trace to the specified vector of bytes.","sig":null,"attributes":[{"value":"/ Updates metadata for this execution trace to the specified vector of bytes.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":111357,"byte_end":111436,"line_start":204,"line_end":204,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":111441,"byte_end":111444,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":111449,"byte_end":111461,"line_start":206,"line_end":206,"column_start":5,"column_end":17}},{"value":"/ Panics if the length of `meta` is greater than 65535;","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":111466,"byte_end":111523,"line_start":207,"line_end":207,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":112581,"byte_end":112585,"line_start":229,"line_end":229,"column_start":12,"column_end":16},"name":"fill","qualname":"<TraceTable<B>>::fill","value":"pub fn fill<I, U>(&mut Self, I, U) where I: Fn(&mut [B]) -> (),\nU: Fn(usize, &mut [B]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Fill all rows in the execution trace.","sig":null,"attributes":[{"value":"/ Fill all rows in the execution trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":111831,"byte_end":111872,"line_start":218,"line_end":218,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":111877,"byte_end":111880,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ The rows are filled by executing the provided closures as follows:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":111885,"byte_end":111955,"line_start":220,"line_end":220,"column_start":5,"column_end":75}},{"value":"/ - `init` closure is used to initialize the first row of the trace; it receives a mutable","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":111960,"byte_end":112052,"line_start":221,"line_end":221,"column_start":5,"column_end":97}},{"value":"/   reference to the first state initialized to all zeros. The contents of the state are","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":112057,"byte_end":112147,"line_start":222,"line_end":222,"column_start":5,"column_end":95}},{"value":"/   copied into the first row of the trace after the closure returns.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":112152,"byte_end":112223,"line_start":223,"line_end":223,"column_start":5,"column_end":76}},{"value":"/ - `update` closure is used to populate all subsequent rows of the trace; it receives two","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":112228,"byte_end":112320,"line_start":224,"line_end":224,"column_start":5,"column_end":97}},{"value":"/   parameters:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":112325,"byte_end":112342,"line_start":225,"line_end":225,"column_start":5,"column_end":22}},{"value":"/   - index of the last updated row (starting with 0).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":112347,"byte_end":112403,"line_start":226,"line_end":226,"column_start":5,"column_end":61}},{"value":"/   - a mutable reference to the last updated state; the contents of the state are copied","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":112408,"byte_end":112499,"line_start":227,"line_end":227,"column_start":5,"column_end":96}},{"value":"/     into the next row of the trace after the closure returns.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":112504,"byte_end":112569,"line_start":228,"line_end":228,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":113031,"byte_end":113041,"line_start":245,"line_end":245,"column_start":12,"column_end":22},"name":"update_row","qualname":"<TraceTable<B>>::update_row","value":"pub fn update_row(&mut Self, usize, &[B])","parent":null,"children":[],"decl_id":null,"docs":" Updates a single row in the execution trace with provided data.\n","sig":null,"attributes":[{"value":"/ Updates a single row in the execution trace with provided data.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":112952,"byte_end":113019,"line_start":244,"line_end":244,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":113775,"byte_end":113784,"line_start":263,"line_end":263,"column_start":12,"column_end":21},"name":"fragments","qualname":"<TraceTable<B>>::fragments","value":"pub fn fragments(&mut Self, usize) -> vec::IntoIter<TraceTableFragment<, B>>","parent":null,"children":[],"decl_id":null,"docs":" Breaks the execution trace into mutable fragments.","sig":null,"attributes":[{"value":"/ Breaks the execution trace into mutable fragments.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":113325,"byte_end":113379,"line_start":254,"line_end":254,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":113384,"byte_end":113387,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ The number of rows in each fragment will be equal to `fragment_length` parameter. The","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":113392,"byte_end":113481,"line_start":256,"line_end":256,"column_start":5,"column_end":94}},{"value":"/ returned fragments can be used to update data in the trace from multiple threads.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":113486,"byte_end":113571,"line_start":257,"line_end":257,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":113576,"byte_end":113579,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":113584,"byte_end":113596,"line_start":259,"line_end":259,"column_start":5,"column_end":17}},{"value":"/ Panics if `fragment_length` is smaller than 2, greater than the length of the trace,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":113601,"byte_end":113689,"line_start":260,"line_end":260,"column_start":5,"column_end":93}},{"value":"/ or is not a power of two.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":113694,"byte_end":113723,"line_start":261,"line_end":261,"column_start":5,"column_end":34}},{"value":"cfg(not(feature = \"concurrent\"))","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":113728,"byte_end":113763,"line_start":262,"line_end":262,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":116149,"byte_end":116161,"line_start":326,"line_end":326,"column_start":12,"column_end":24},"name":"get_register","qualname":"<TraceTable<B>>::get_register","value":"pub fn get_register(&Self, usize) -> &[B]","parent":null,"children":[],"decl_id":null,"docs":" Returns the entire register trace for the register at the specified index.\n","sig":null,"attributes":[{"value":"/ Returns the entire register trace for the register at the specified index.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":116059,"byte_end":116137,"line_start":325,"line_end":325,"column_start":5,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":824},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":117554,"byte_end":117572,"line_start":376,"line_end":376,"column_start":12,"column_end":30},"name":"TraceTableFragment","qualname":"::trace::trace_table::TraceTableFragment","value":"TraceTableFragment {  }","parent":null,"children":[{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829}],"decl_id":null,"docs":" A set of consecutive rows of an execution trace.","sig":null,"attributes":[{"value":"/ A set of consecutive rows of an execution trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":117079,"byte_end":117131,"line_start":366,"line_end":366,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":117132,"byte_end":117135,"line_start":367,"line_end":367,"column_start":1,"column_end":4}},{"value":"/ An execution trace fragment is a \"view\" into the specific execution trace. Updating data in","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":117136,"byte_end":117231,"line_start":368,"line_end":368,"column_start":1,"column_end":96}},{"value":"/ the fragment, directly updates the data in the underlying execution trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":117232,"byte_end":117310,"line_start":369,"line_end":369,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":117311,"byte_end":117314,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"/ A fragment cannot be instantiated directly but is created by executing","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":117315,"byte_end":117389,"line_start":371,"line_end":371,"column_start":1,"column_end":75}},{"value":"/ [TraceTable::fragments()] method.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":117390,"byte_end":117427,"line_start":372,"line_end":372,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":117428,"byte_end":117431,"line_start":373,"line_end":373,"column_start":1,"column_end":4}},{"value":"/ A fragment always contains contiguous rows, and the number of rows is guaranteed to be a power","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":117432,"byte_end":117530,"line_start":374,"line_end":374,"column_start":1,"column_end":99}},{"value":"/ of two.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":117531,"byte_end":117542,"line_start":375,"line_end":375,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":833},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":117894,"byte_end":117899,"line_start":387,"line_end":387,"column_start":12,"column_end":17},"name":"index","qualname":"<TraceTableFragment>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of this fragment.\n","sig":null,"attributes":[{"value":"/ Returns the index of this fragment.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":117843,"byte_end":117882,"line_start":386,"line_end":386,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":118065,"byte_end":118071,"line_start":393,"line_end":393,"column_start":12,"column_end":18},"name":"offset","qualname":"<TraceTableFragment>::offset","value":"pub fn offset(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the step at which the fragment starts in the context of the original execution\n trace.\n","sig":null,"attributes":[{"value":"/ Returns the step at which the fragment starts in the context of the original execution","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":117948,"byte_end":118038,"line_start":391,"line_end":391,"column_start":5,"column_end":95}},{"value":"/ trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":118043,"byte_end":118053,"line_start":392,"line_end":392,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":118197,"byte_end":118203,"line_start":398,"line_end":398,"column_start":12,"column_end":18},"name":"length","qualname":"<TraceTableFragment>::length","value":"pub fn length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of rows in this execution trace fragment.\n","sig":null,"attributes":[{"value":"/ Returns the number of rows in this execution trace fragment.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":118121,"byte_end":118185,"line_start":397,"line_end":397,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":118364,"byte_end":118369,"line_start":403,"line_end":403,"column_start":12,"column_end":17},"name":"width","qualname":"<TraceTableFragment>::width","value":"pub fn width(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the width of the fragment (same as the width of the underlying execution trace).\n","sig":null,"attributes":[{"value":"/ Returns the width of the fragment (same as the width of the underlying execution trace).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":118260,"byte_end":118352,"line_start":402,"line_end":402,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":119297,"byte_end":119301,"line_start":421,"line_end":421,"column_start":12,"column_end":16},"name":"fill","qualname":"<TraceTableFragment>::fill","value":"pub fn fill<I, T>(&mut Self, I, T) where I: Fn(&mut [B]) -> (),\nT: Fn(usize, &mut [B]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Fills all rows in the fragment.","sig":null,"attributes":[{"value":"/ Fills all rows in the fragment.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":118545,"byte_end":118580,"line_start":410,"line_end":410,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":118585,"byte_end":118588,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ The rows are filled by executing the provided closures as follows:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":118593,"byte_end":118663,"line_start":412,"line_end":412,"column_start":5,"column_end":75}},{"value":"/ - `init` closure is used to initialize the first row of the fragment; it receives a","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":118668,"byte_end":118755,"line_start":413,"line_end":413,"column_start":5,"column_end":92}},{"value":"/   mutable reference to the first state initialized to all zeros. Contents of the state are","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":118760,"byte_end":118854,"line_start":414,"line_end":414,"column_start":5,"column_end":99}},{"value":"/   copied into the first row of the fragment after the closure returns.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":118859,"byte_end":118933,"line_start":415,"line_end":415,"column_start":5,"column_end":79}},{"value":"/ - `update` closure is used to populate all subsequent rows of the fragment; it receives two","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":118938,"byte_end":119033,"line_start":416,"line_end":416,"column_start":5,"column_end":100}},{"value":"/   parameters:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":119038,"byte_end":119055,"line_start":417,"line_end":417,"column_start":5,"column_end":22}},{"value":"/   - index of the last updated row (starting with 0).","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":119060,"byte_end":119116,"line_start":418,"line_end":418,"column_start":5,"column_end":61}},{"value":"/   - a mutable reference to the last updated state; the contents of the state are copied","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":119121,"byte_end":119212,"line_start":419,"line_end":419,"column_start":5,"column_end":96}},{"value":"/     into the next row of the fragment after the closure returns.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":119217,"byte_end":119285,"line_start":420,"line_end":420,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":119764,"byte_end":119774,"line_start":437,"line_end":437,"column_start":12,"column_end":22},"name":"update_row","qualname":"<TraceTableFragment>::update_row","value":"pub fn update_row(&mut Self, usize, &[B])","parent":null,"children":[],"decl_id":null,"docs":" Updates a single row in the fragment with provided data.\n","sig":null,"attributes":[{"value":"/ Updates a single row in the fragment with provided data.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":119692,"byte_end":119752,"line_start":436,"line_end":436,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":855},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":88881,"byte_end":88886,"line_start":43,"line_end":43,"column_start":11,"column_end":16},"name":"Trace","qualname":"::trace::Trace","value":"Trace: Sized","parent":null,"children":[{"krate":0,"index":856},{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":867}],"decl_id":null,"docs":" Defines an execution trace of a computation.","sig":null,"attributes":[{"value":"/ Defines an execution trace of a computation.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":87976,"byte_end":88024,"line_start":29,"line_end":29,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":88025,"byte_end":88028,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Execution trace can be reduced to a two-dimensional matrix in which each row represents the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":88029,"byte_end":88124,"line_start":31,"line_end":31,"column_start":1,"column_end":96}},{"value":"/ state of a computation at a single point in time and each column corresponds to an algebraic","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":88125,"byte_end":88221,"line_start":32,"line_end":32,"column_start":1,"column_end":97}},{"value":"/ register tracked over all steps of the computation.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":88222,"byte_end":88277,"line_start":33,"line_end":33,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":88278,"byte_end":88281,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Building a trace is required for STARK proof generation. An execution trace of a specific","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":88282,"byte_end":88375,"line_start":35,"line_end":35,"column_start":1,"column_end":94}},{"value":"/ instance of a computation must be supplied to [Prover::prove()](super::Prover::prove) method","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":88376,"byte_end":88472,"line_start":36,"line_end":36,"column_start":1,"column_end":97}},{"value":"/ to generate a STARK proof.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":88473,"byte_end":88503,"line_start":37,"line_end":37,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":88504,"byte_end":88507,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ This crate exposes one concrete implementation of the [Trace] trait: [TraceTable]. This","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":88508,"byte_end":88599,"line_start":39,"line_end":39,"column_start":1,"column_end":92}},{"value":"/ implementation supports concurrent trace generation and should be sufficient in most","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":88600,"byte_end":88688,"line_start":40,"line_end":40,"column_start":1,"column_end":89}},{"value":"/ situations. However, if functionality provided by [TraceTable] is not sufficient, uses can","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":88689,"byte_end":88783,"line_start":41,"line_end":41,"column_start":1,"column_end":95}},{"value":"/ provide custom implementations of the [Trace] trait which better suit their needs.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":88784,"byte_end":88870,"line_start":42,"line_end":42,"column_start":1,"column_end":87}}]},{"kind":"Type","id":{"krate":0,"index":856},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":89049,"byte_end":89058,"line_start":47,"line_end":47,"column_start":10,"column_end":19},"name":"BaseField","qualname":"::trace::Trace::BaseField","value":"type BaseField: StarkField;","parent":{"krate":0,"index":855},"children":[],"decl_id":null,"docs":" Base field for this execution trace.","sig":null,"attributes":[{"value":"/ Base field for this execution trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":88900,"byte_end":88940,"line_start":44,"line_end":44,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":88945,"byte_end":88948,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ All cells of this execution trace contain values which are elements in this filed.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":88953,"byte_end":89039,"line_start":46,"line_end":46,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":89254,"byte_end":89259,"line_start":53,"line_end":53,"column_start":8,"column_end":13},"name":"width","qualname":"::trace::Trace::width","value":"pub fn width(&Self) -> usize","parent":{"krate":0,"index":855},"children":[],"decl_id":null,"docs":" Returns number of columns in this trace.\n","sig":null,"attributes":[{"value":"/ Returns number of columns in this trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":89202,"byte_end":89246,"line_start":52,"line_end":52,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":89335,"byte_end":89341,"line_start":56,"line_end":56,"column_start":8,"column_end":14},"name":"length","qualname":"::trace::Trace::length","value":"pub fn length(&Self) -> usize","parent":{"krate":0,"index":855},"children":[],"decl_id":null,"docs":" Returns the number of rows in this trace.\n","sig":null,"attributes":[{"value":"/ Returns the number of rows in this trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":89282,"byte_end":89327,"line_start":55,"line_end":55,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":89420,"byte_end":89424,"line_start":59,"line_end":59,"column_start":8,"column_end":12},"name":"meta","qualname":"::trace::Trace::meta","value":"pub fn meta(&Self) -> &[u8]","parent":{"krate":0,"index":855},"children":[],"decl_id":null,"docs":" Returns metadata associated with this trace.\n","sig":null,"attributes":[{"value":"/ Returns metadata associated with this trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":89364,"byte_end":89412,"line_start":58,"line_end":58,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":89544,"byte_end":89547,"line_start":62,"line_end":62,"column_start":8,"column_end":11},"name":"get","qualname":"::trace::Trace::get","value":"pub fn get(&Self, usize, usize) -> Self::BaseField","parent":{"krate":0,"index":855},"children":[],"decl_id":null,"docs":" Returns value of the cell in the specified column at the specified row of this trace.\n","sig":null,"attributes":[{"value":"/ Returns value of the cell in the specified column at the specified row of this trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":89447,"byte_end":89536,"line_start":61,"line_end":61,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":89706,"byte_end":89719,"line_start":65,"line_end":65,"column_start":8,"column_end":21},"name":"read_row_into","qualname":"::trace::Trace::read_row_into","value":"pub fn read_row_into(&Self, usize, &mut [Self::BaseField])","parent":{"krate":0,"index":855},"children":[],"decl_id":null,"docs":" Reads a single row of this trace at the specified index into the specified target.\n","sig":null,"attributes":[{"value":"/ Reads a single row of this trace at the specified index into the specified target.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":89612,"byte_end":89698,"line_start":64,"line_end":64,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":89859,"byte_end":89871,"line_start":68,"line_end":68,"column_start":8,"column_end":20},"name":"into_columns","qualname":"::trace::Trace::into_columns","value":"pub fn into_columns(Self) -> Vec<Vec<Self::BaseField>>","parent":{"krate":0,"index":855},"children":[],"decl_id":null,"docs":" Transforms this trace into a vector of columns containing trace data.\n","sig":null,"attributes":[{"value":"/ Transforms this trace into a vector of columns containing trace data.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":89778,"byte_end":89851,"line_start":67,"line_end":67,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":90084,"byte_end":90092,"line_start":74,"line_end":74,"column_start":8,"column_end":16},"name":"get_info","qualname":"::trace::Trace::get_info","value":"pub fn get_info(&Self) -> TraceInfo","parent":{"krate":0,"index":855},"children":[],"decl_id":null,"docs":" Returns trace info for this trace.\n","sig":null,"attributes":[{"value":"/ Returns trace info for this trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":90038,"byte_end":90076,"line_start":73,"line_end":73,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":90512,"byte_end":90520,"line_start":83,"line_end":83,"column_start":8,"column_end":16},"name":"validate","qualname":"::trace::Trace::validate","value":"pub fn validate<A: Air<BaseField = Self::BaseField>>(&Self, &A)","parent":{"krate":0,"index":855},"children":[],"decl_id":null,"docs":" Checks if this trace is valid against the specified AIR, and panics if not.","sig":null,"attributes":[{"value":"/ Checks if this trace is valid against the specified AIR, and panics if not.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":90324,"byte_end":90403,"line_start":80,"line_end":80,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":90408,"byte_end":90411,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ NOTE: this is a very expensive operation and is intended for use only in debug mode.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":90416,"byte_end":90504,"line_start":82,"line_end":82,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":93643,"byte_end":93649,"line_start":156,"line_end":156,"column_start":8,"column_end":14},"name":"extend","qualname":"::trace::Trace::extend","value":"pub fn extend(Self, &StarkDomain<Self::BaseField>)\n-> (TraceLde<Self::BaseField>, TracePolyTable<Self::BaseField>)","parent":{"krate":0,"index":855},"children":[],"decl_id":null,"docs":" Extends all columns of the trace table to the length of the LDE domain.","sig":null,"attributes":[{"value":"/ Extends all columns of the trace table to the length of the LDE domain.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":93380,"byte_end":93455,"line_start":152,"line_end":152,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":93460,"byte_end":93463,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ The extension is done by first interpolating each register into a polynomial over the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":93468,"byte_end":93557,"line_start":154,"line_end":154,"column_start":5,"column_end":94}},{"value":"/ trace domain, and then evaluating the polynomial over the LDE domain.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":93562,"byte_end":93635,"line_start":155,"line_end":155,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1005},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/errors.rs","byte_start":128144,"byte_end":128180,"line_start":17,"line_end":17,"column_start":5,"column_end":41},"name":"UnsatisfiedTransitionConstraintError","qualname":"::errors::ProverError::UnsatisfiedTransitionConstraintError","value":"ProverError::UnsatisfiedTransitionConstraintError(usize)","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":" This error occurs when a transition constraint evaluated over a specific execution trace\n does not evaluate to zero at any of the steps.\n","sig":null,"attributes":[{"value":"/ This error occurs when a transition constraint evaluated over a specific execution trace","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/errors.rs","byte_start":127992,"byte_end":128084,"line_start":15,"line_end":15,"column_start":5,"column_end":97}},{"value":"/ does not evaluate to zero at any of the steps.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/errors.rs","byte_start":128089,"byte_end":128139,"line_start":16,"line_end":16,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1008},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/errors.rs","byte_start":128333,"byte_end":128369,"line_start":20,"line_end":20,"column_start":5,"column_end":41},"name":"MismatchedConstraintPolynomialDegree","qualname":"::errors::ProverError::MismatchedConstraintPolynomialDegree","value":"ProverError::MismatchedConstraintPolynomialDegree(usize, usize)","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":" This error occurs when polynomials built from the columns of a constraint evaluation\n table do not all have the same degree.\n","sig":null,"attributes":[{"value":"/ This error occurs when polynomials built from the columns of a constraint evaluation","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/errors.rs","byte_start":128193,"byte_end":128281,"line_start":18,"line_end":18,"column_start":5,"column_end":93}},{"value":"/ table do not all have the same degree.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/errors.rs","byte_start":128286,"byte_end":128328,"line_start":19,"line_end":19,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1012},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/errors.rs","byte_start":128535,"byte_end":128560,"line_start":23,"line_end":23,"column_start":5,"column_end":30},"name":"UnsupportedFieldExtension","qualname":"::errors::ProverError::UnsupportedFieldExtension","value":"ProverError::UnsupportedFieldExtension(usize)","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":" This error occurs when the base field specified by the AIR does not support field extension\n of degree specified by proof options.\n","sig":null,"attributes":[{"value":"/ This error occurs when the base field specified by the AIR does not support field extension","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/errors.rs","byte_start":128389,"byte_end":128484,"line_start":21,"line_end":21,"column_start":5,"column_end":100}},{"value":"/ of degree specified by proof options.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/errors.rs","byte_start":128489,"byte_end":128530,"line_start":22,"line_end":22,"column_start":5,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":1004},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/errors.rs","byte_start":127974,"byte_end":127985,"line_start":14,"line_end":14,"column_start":10,"column_end":21},"name":"ProverError","qualname":"::errors::ProverError","value":"pub enum ProverError {\n    UnsatisfiedTransitionConstraintError(usize),\n    MismatchedConstraintPolynomialDegree(usize, usize),\n    UnsupportedFieldExtension(usize),\n}","parent":null,"children":[{"krate":0,"index":1005},{"krate":0,"index":1008},{"krate":0,"index":1012}],"decl_id":null,"docs":" Represents an error returned by the prover during an execution of the protocol.\n","sig":null,"attributes":[{"value":"/ Represents an error returned by the prover during an execution of the protocol.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/errors.rs","byte_start":127853,"byte_end":127936,"line_start":12,"line_end":12,"column_start":1,"column_end":84}}]},{"kind":"Trait","id":{"krate":0,"index":989},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":4433,"byte_end":4439,"line_start":119,"line_end":119,"column_start":11,"column_end":17},"name":"Prover","qualname":"::Prover","value":"Prover","parent":null,"children":[{"krate":0,"index":990},{"krate":0,"index":993},{"krate":0,"index":994},{"krate":0,"index":995},{"krate":0,"index":996},{"krate":0,"index":1022},{"krate":0,"index":997}],"decl_id":null,"docs":" Defines a STARK prover for a computation.","sig":null,"attributes":[{"value":"/ Defines a STARK prover for a computation.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":3564,"byte_end":3609,"line_start":104,"line_end":104,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":3610,"byte_end":3613,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ A STARK prover can be used to generate STARK proofs. The prover contains definitions of a","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":3614,"byte_end":3707,"line_start":106,"line_end":106,"column_start":1,"column_end":94}},{"value":"/ computation's AIR (specified via [Air](Prover::Air) associated type) and execution trace","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":3708,"byte_end":3800,"line_start":107,"line_end":107,"column_start":1,"column_end":93}},{"value":"/ (specified via [Trace](Prover::Trace) associated type), and exposes [prove()](Prover::prove)","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":3801,"byte_end":3897,"line_start":108,"line_end":108,"column_start":1,"column_end":97}},{"value":"/ method which can be used to build STARK proofs for provided execution traces.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":3898,"byte_end":3979,"line_start":109,"line_end":109,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":3980,"byte_end":3983,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ Thus, once a prover is defined and instantiated, generating a STARK proof consists of two","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":3984,"byte_end":4077,"line_start":111,"line_end":111,"column_start":1,"column_end":94}},{"value":"/ steps:","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":4078,"byte_end":4088,"line_start":112,"line_end":112,"column_start":1,"column_end":11}},{"value":"/ 1. Build an execution trace for a specific instance of the computation.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":4089,"byte_end":4164,"line_start":113,"line_end":113,"column_start":1,"column_end":76}},{"value":"/ 2. Invoke [Prover::prove()] method generate a proof using the trace from the previous step","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":4165,"byte_end":4259,"line_start":114,"line_end":114,"column_start":1,"column_end":95}},{"value":"/    as a witness.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":4260,"byte_end":4280,"line_start":115,"line_end":115,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":4281,"byte_end":4284,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ The generated proof is built using protocol parameters defined by the [ProofOptions] struct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":4285,"byte_end":4380,"line_start":117,"line_end":117,"column_start":1,"column_end":96}},{"value":"/ return from [Prover::options] method.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":4381,"byte_end":4422,"line_start":118,"line_end":118,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":990},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":4516,"byte_end":4525,"line_start":121,"line_end":121,"column_start":10,"column_end":19},"name":"BaseField","qualname":"::Prover::BaseField","value":"type BaseField: StarkField + ExtensibleField<2> + ExtensibleField<3>;","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Base field for the computation described by this prover.\n","sig":null,"attributes":[{"value":"/ Base field for the computation described by this prover.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":4446,"byte_end":4506,"line_start":120,"line_end":120,"column_start":5,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":993},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":4689,"byte_end":4692,"line_start":124,"line_end":124,"column_start":10,"column_end":13},"name":"Air","qualname":"::Prover::Air","value":"type Air: Air<BaseField = Self::BaseField>;","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Algebraic intermediate representation (AIR) for the computation described by this prover.\n","sig":null,"attributes":[{"value":"/ Algebraic intermediate representation (AIR) for the computation described by this prover.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":4586,"byte_end":4679,"line_start":123,"line_end":123,"column_start":5,"column_end":98}}]},{"kind":"Type","id":{"krate":0,"index":994},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":4807,"byte_end":4812,"line_start":127,"line_end":127,"column_start":10,"column_end":15},"name":"Trace","qualname":"::Prover::Trace","value":"type Trace: Trace<BaseField = Self::BaseField>;","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Execution trace of the computation described by this prover.\n","sig":null,"attributes":[{"value":"/ Execution trace of the computation described by this prover.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":4733,"byte_end":4797,"line_start":126,"line_end":126,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":995},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":5199,"byte_end":5213,"line_start":136,"line_end":136,"column_start":8,"column_end":22},"name":"get_pub_inputs","qualname":"::Prover::get_pub_inputs","value":"pub fn get_pub_inputs(&Self, &Self::Trace)\n-> <<Self as Prover>::Air as Air>::PublicInputs","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Returns a set of public inputs for an instance of the computation defined by the provided\n trace.","sig":null,"attributes":[{"value":"/ Returns a set of public inputs for an instance of the computation defined by the provided","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":4980,"byte_end":5073,"line_start":132,"line_end":132,"column_start":5,"column_end":98}},{"value":"/ trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":5078,"byte_end":5088,"line_start":133,"line_end":133,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":5093,"byte_end":5096,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ Public inputs need to be shared with the verifier in order for them to verify a proof.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":5101,"byte_end":5191,"line_start":135,"line_end":135,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":996},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":5675,"byte_end":5682,"line_start":143,"line_end":143,"column_start":8,"column_end":15},"name":"options","qualname":"::Prover::options","value":"pub fn options(&Self) -> &ProofOptions","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Returns [ProofOptions] which this prover uses to generate STARK proofs.","sig":null,"attributes":[{"value":"/ Returns [ProofOptions] which this prover uses to generate STARK proofs.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":5296,"byte_end":5371,"line_start":138,"line_end":138,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":5376,"byte_end":5379,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Proof options defines basic protocol parameters such as: number of queries, blowup factor,","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":5384,"byte_end":5478,"line_start":140,"line_end":140,"column_start":5,"column_end":99}},{"value":"/ grinding factor, hash function to be used in the protocol etc. These properties directly","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":5483,"byte_end":5575,"line_start":141,"line_end":141,"column_start":5,"column_end":97}},{"value":"/ inform such metrics as proof generation time, proof size, and proof security level.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":5580,"byte_end":5667,"line_start":142,"line_end":142,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1022},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":6346,"byte_end":6351,"line_start":156,"line_end":156,"column_start":8,"column_end":13},"name":"prove","qualname":"::Prover::prove","value":"pub fn prove(&Self, Self::Trace) -> Result<StarkProof, ProverError>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Returns a STARK proof attesting to a correct execution of a computation defined by the\n provided trace.","sig":null,"attributes":[{"value":"/ Returns a STARK proof attesting to a correct execution of a computation defined by the","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":5838,"byte_end":5928,"line_start":148,"line_end":148,"column_start":5,"column_end":95}},{"value":"/ provided trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":5933,"byte_end":5952,"line_start":149,"line_end":149,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":5957,"byte_end":5960,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ The returned [StarkProof] attests that the specified `trace` is a valid execution trace of","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":5965,"byte_end":6059,"line_start":151,"line_end":151,"column_start":5,"column_end":99}},{"value":"/ the computation described by [Self::Air](Prover::Air) and generated using some set of","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":6064,"byte_end":6153,"line_start":152,"line_end":152,"column_start":5,"column_end":94}},{"value":"/ secret and public inputs. Public inputs must match the value returned from","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":6158,"byte_end":6236,"line_start":153,"line_end":153,"column_start":5,"column_end":83}},{"value":"/ [Self::get_pub_inputs()](Prover::get_pub_inputs) for the provided trace.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":6241,"byte_end":6317,"line_start":154,"line_end":154,"column_start":5,"column_end":81}},{"value":"rustfmt::skip","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":6322,"byte_end":6338,"line_start":155,"line_end":155,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":8886,"byte_end":8900,"line_start":195,"line_end":195,"column_start":8,"column_end":22},"name":"generate_proof","qualname":"::Prover::generate_proof","value":"pub fn generate_proof<E, H>(&Self, Self::Trace)\n-> Result<StarkProof, ProverError> where E: FieldElement<BaseField =\nSelf::BaseField>, H: ElementHasher<BaseField = Self::BaseField>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Performs the actual proof generation procedure, generating the proof that the provided\n execution `trace` is valid against this prover's AIR.\n TODO: make this function un-callable externally?\n","sig":null,"attributes":[{"value":"/ Performs the actual proof generation procedure, generating the proof that the provided","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":8650,"byte_end":8740,"line_start":191,"line_end":191,"column_start":5,"column_end":95}},{"value":"/ execution `trace` is valid against this prover's AIR.","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":8745,"byte_end":8802,"line_start":192,"line_end":192,"column_start":5,"column_end":62}},{"value":"/ TODO: make this function un-callable externally?","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/lib.rs","byte_start":8807,"byte_end":8859,"line_start":193,"line_end":193,"column_start":5,"column_end":57}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":21762,"byte_end":21773,"line_start":32,"line_end":32,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/constraints/boundary.rs","byte_start":26181,"byte_end":26204,"line_start":29,"line_end":29,"column_start":53,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":212},{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/constraints/boundary.rs","byte_start":29916,"byte_end":29937,"line_start":120,"line_end":120,"column_start":53,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/constraints/boundary.rs","byte_start":30624,"byte_end":30643,"line_start":137,"line_end":137,"column_start":53,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/constraints/boundary.rs","byte_start":31477,"byte_end":31496,"line_start":157,"line_end":157,"column_start":53,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/constraints/periodic_table.rs","byte_start":32730,"byte_end":32748,"line_start":19,"line_end":19,"column_start":21,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":285},{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/constraints/evaluator.rs","byte_start":39457,"byte_end":39476,"line_start":43,"line_end":43,"column_start":61,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":354},{"krate":0,"index":357},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/constraints/composition_poly.rs","byte_start":50045,"byte_end":50060,"line_start":24,"line_end":24,"column_start":53,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":410},{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/constraints/evaluation_table.rs","byte_start":56366,"byte_end":56391,"line_start":37,"line_end":37,"column_start":53,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":483},{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/constraints/evaluation_table.rs","byte_start":65220,"byte_end":65243,"line_start":245,"line_end":245,"column_start":57,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/constraints/commitment.rs","byte_start":72520,"byte_end":72540,"line_start":22,"line_end":22,"column_start":67,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/composer/mod.rs","byte_start":76877,"byte_end":76896,"line_start":25,"line_end":25,"column_start":57,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":636},{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_lde.rs","byte_start":96163,"byte_end":96171,"line_start":23,"line_end":23,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":720}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/poly_table.rs","byte_start":101206,"byte_end":101220,"line_start":17,"line_end":17,"column_start":21,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":761},{"krate":0,"index":763},{"krate":0,"index":764}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":106277,"byte_end":106287,"line_start":67,"line_end":67,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":814}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":116386,"byte_end":116396,"line_start":334,"line_end":334,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":117686,"byte_end":117704,"line_start":382,"line_end":382,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/channel.rs","byte_start":121151,"byte_end":121164,"line_start":40,"line_end":40,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":967},{"krate":0,"index":969}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/channel.rs","byte_start":126942,"byte_end":126955,"line_start":179,"line_end":179,"column_start":45,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/errors.rs","byte_start":128594,"byte_end":128605,"line_start":26,"line_end":26,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1021}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/domain.rs","byte_start":21762,"byte_end":21773,"line_start":32,"line_end":32,"column_start":21,"column_end":32},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":143},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/constraints/boundary.rs","byte_start":26181,"byte_end":26204,"line_start":29,"line_end":29,"column_start":53,"column_end":76},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":202},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/constraints/boundary.rs","byte_start":29916,"byte_end":29937,"line_start":120,"line_end":120,"column_start":53,"column_end":74},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":216},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/constraints/boundary.rs","byte_start":30624,"byte_end":30643,"line_start":137,"line_end":137,"column_start":53,"column_end":72},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/constraints/boundary.rs","byte_start":31477,"byte_end":31496,"line_start":157,"line_end":157,"column_start":53,"column_end":72},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":237},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/constraints/periodic_table.rs","byte_start":32730,"byte_end":32748,"line_start":19,"line_end":19,"column_start":21,"column_end":39},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":273},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/constraints/evaluator.rs","byte_start":39457,"byte_end":39476,"line_start":43,"line_end":43,"column_start":61,"column_end":80},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/constraints/composition_poly.rs","byte_start":50045,"byte_end":50060,"line_start":24,"line_end":24,"column_start":53,"column_end":68},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":396},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/constraints/evaluation_table.rs","byte_start":56366,"byte_end":56391,"line_start":37,"line_end":37,"column_start":53,"column_end":78},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":460},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/constraints/evaluation_table.rs","byte_start":65220,"byte_end":65243,"line_start":245,"line_end":245,"column_start":57,"column_end":80},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":485},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/constraints/commitment.rs","byte_start":72520,"byte_end":72540,"line_start":22,"line_end":22,"column_start":67,"column_end":87},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":539},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/composer/mod.rs","byte_start":76877,"byte_end":76896,"line_start":25,"line_end":25,"column_start":57,"column_end":76},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":619},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_lde.rs","byte_start":96163,"byte_end":96171,"line_start":23,"line_end":23,"column_start":21,"column_end":29},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":705},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/poly_table.rs","byte_start":101206,"byte_end":101220,"line_start":17,"line_end":17,"column_start":21,"column_end":35},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":106277,"byte_end":106287,"line_start":67,"line_end":67,"column_start":21,"column_end":31},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":793},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":116386,"byte_end":116396,"line_start":334,"line_end":334,"column_start":31,"column_end":41},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":793},"to":{"krate":0,"index":855}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/trace_table.rs","byte_start":117686,"byte_end":117704,"line_start":382,"line_end":382,"column_start":25,"column_end":43},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":824},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/trace/mod.rs","byte_start":88888,"byte_end":88893,"line_start":43,"line_end":43,"column_start":18,"column_end":23},"kind":"SuperTrait","from":{"krate":2,"index":3021},"to":{"krate":0,"index":855}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/channel.rs","byte_start":121151,"byte_end":121164,"line_start":40,"line_end":40,"column_start":19,"column_end":32},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":941},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/channel.rs","byte_start":126942,"byte_end":126955,"line_start":179,"line_end":179,"column_start":45,"column_end":58},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":941},"to":{"krate":19,"index":122}},{"span":{"file_name":"/Users/verloop/.cargo/registry/src/github.com-1ecc6299db9ec823/winter-prover-0.3.0/src/errors.rs","byte_start":128594,"byte_end":128605,"line_start":26,"line_end":26,"column_start":23,"column_end":34},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1004},"to":{"krate":2,"index":9403}}]}